
F4_dummy_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800c0fc  0800c0fc  0001c0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4d4  0800c4d4  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4d4  0800c4d4  0001c4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4dc  0800c4dc  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4dc  0800c4dc  0001c4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4e0  0800c4e0  0001c4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800c4e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020270  2**0
                  CONTENTS
 10 .bss          000065e4  20000270  20000270  00020270  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006854  20006854  00020270  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   000275e3  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000516a  00000000  00000000  00047883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  0004c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017a8  00000000  00000000  0004e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007a58  00000000  00000000  0004fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dca8  00000000  00000000  000575a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce212  00000000  00000000  00075248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014345a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074d0  00000000  00000000  001434b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0e4 	.word	0x0800c0e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	0800c0e4 	.word	0x0800c0e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
        // NOTE: Should never reach here.
        // TODO: Handle this error.
        return 0;
    }
#else
    rc = CDC_Transmit_FS((uint8_t *)ptr, len);
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	68b8      	ldr	r0, [r7, #8]
 8000588:	f009 fedc 	bl	800a344 <CDC_Transmit_FS>
 800058c:	4603      	mov	r3, r0
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <_write+0x28>)
 8000592:	701a      	strb	r2, [r3, #0]
#endif
    return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000291 	.word	0x20000291

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fdc4 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f874 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8fa 	bl	80007a8 <MX_GPIO_Init>
  MX_IWDG_Init();
 80005b4:	f000 f8de 	bl	8000774 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80005b8:	f009 fdd8 	bl	800a16c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005bc:	f006 f9ee 	bl	800699c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of DataInSem01 */
  DataInSem01Handle = osSemaphoreNew(1, 1, &DataInSem01_attributes);
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <main+0xa4>)
 80005c2:	2101      	movs	r1, #1
 80005c4:	2001      	movs	r0, #1
 80005c6:	f006 fae0 	bl	8006b8a <osSemaphoreNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a1f      	ldr	r2, [pc, #124]	; (800064c <main+0xa8>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* creation of USB_PlugIN_Sem */
  USB_PlugIN_SemHandle = osSemaphoreNew(1, 1, &USB_PlugIN_Sem_attributes);
 80005d0:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <main+0xac>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	2001      	movs	r0, #1
 80005d6:	f006 fad8 	bl	8006b8a <osSemaphoreNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <main+0xb0>)
 80005de:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RECV_Queue */
  RECV_QueueHandle = osMessageQueueNew (16, 32, &RECV_Queue_attributes);
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <main+0xb4>)
 80005e2:	2120      	movs	r1, #32
 80005e4:	2010      	movs	r0, #16
 80005e6:	f006 fbef 	bl	8006dc8 <osMessageQueueNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <main+0xb8>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* creation of RESP_Queue */
  RESP_QueueHandle = osMessageQueueNew (16, 32, &RESP_Queue_attributes);
 80005f0:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <main+0xbc>)
 80005f2:	2120      	movs	r1, #32
 80005f4:	2010      	movs	r0, #16
 80005f6:	f006 fbe7 	bl	8006dc8 <osMessageQueueNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a19      	ldr	r2, [pc, #100]	; (8000664 <main+0xc0>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <main+0xc4>)
 8000602:	2100      	movs	r1, #0
 8000604:	4819      	ldr	r0, [pc, #100]	; (800066c <main+0xc8>)
 8000606:	f006 fa13 	bl	8006a30 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <main+0xcc>)
 800060e:	6013      	str	r3, [r2, #0]

  /* creation of QueuePushTask */
  QueuePushTaskHandle = osThreadNew(QueuePush, NULL, &QueuePushTask_attributes);
 8000610:	4a18      	ldr	r2, [pc, #96]	; (8000674 <main+0xd0>)
 8000612:	2100      	movs	r1, #0
 8000614:	4818      	ldr	r0, [pc, #96]	; (8000678 <main+0xd4>)
 8000616:	f006 fa0b 	bl	8006a30 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <main+0xd8>)
 800061e:	6013      	str	r3, [r2, #0]

  /* creation of CMD_RespTask */
  CMD_RespTaskHandle = osThreadNew(CMD_Resp, NULL, &CMD_RespTask_attributes);
 8000620:	4a17      	ldr	r2, [pc, #92]	; (8000680 <main+0xdc>)
 8000622:	2100      	movs	r1, #0
 8000624:	4817      	ldr	r0, [pc, #92]	; (8000684 <main+0xe0>)
 8000626:	f006 fa03 	bl	8006a30 <osThreadNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a16      	ldr	r2, [pc, #88]	; (8000688 <main+0xe4>)
 800062e:	6013      	str	r3, [r2, #0]

  /* creation of IWDG_FeedTask */
  IWDG_FeedTaskHandle = osThreadNew(IWDG_Feed, NULL, &IWDG_FeedTask_attributes);
 8000630:	4a16      	ldr	r2, [pc, #88]	; (800068c <main+0xe8>)
 8000632:	2100      	movs	r1, #0
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <main+0xec>)
 8000636:	f006 f9fb 	bl	8006a30 <osThreadNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <main+0xf0>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000640:	f006 f9d0 	bl	80069e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0xa0>
 8000646:	bf00      	nop
 8000648:	0800c304 	.word	0x0800c304
 800064c:	20004ed0 	.word	0x20004ed0
 8000650:	0800c314 	.word	0x0800c314
 8000654:	20004ec4 	.word	0x20004ec4
 8000658:	0800c2d4 	.word	0x0800c2d4
 800065c:	20004ed4 	.word	0x20004ed4
 8000660:	0800c2ec 	.word	0x0800c2ec
 8000664:	20004ecc 	.word	0x20004ecc
 8000668:	0800c244 	.word	0x0800c244
 800066c:	08000c09 	.word	0x08000c09
 8000670:	20004e94 	.word	0x20004e94
 8000674:	0800c268 	.word	0x0800c268
 8000678:	08000d0d 	.word	0x08000d0d
 800067c:	20004ec8 	.word	0x20004ec8
 8000680:	0800c28c 	.word	0x0800c28c
 8000684:	08000d7d 	.word	0x08000d7d
 8000688:	20004edc 	.word	0x20004edc
 800068c:	0800c2b0 	.word	0x0800c2b0
 8000690:	08000de9 	.word	0x08000de9
 8000694:	20004ed8 	.word	0x20004ed8

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00a fbeb 	bl	800ae82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a29      	ldr	r2, [pc, #164]	; (800076c <SystemClock_Config+0xd4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <SystemClock_Config+0xd4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <SystemClock_Config+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a23      	ldr	r2, [pc, #140]	; (8000770 <SystemClock_Config+0xd8>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <SystemClock_Config+0xd8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80006f4:	230b      	movs	r3, #11
 80006f6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000702:	2310      	movs	r3, #16
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000714:	2306      	movs	r3, #6
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000718:	2348      	movs	r3, #72	; 0x48
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000720:	2303      	movs	r3, #3
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f002 f9d5 	bl	8002ad8 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000734:	f000 fb86 	bl	8000e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fc38 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075e:	f000 fb71 	bl	8000e44 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_IWDG_Init+0x2c>)
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <MX_IWDG_Init+0x30>)
 800077c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_IWDG_Init+0x2c>)
 8000780:	2204      	movs	r2, #4
 8000782:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1600;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_IWDG_Init+0x2c>)
 8000786:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800078a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_IWDG_Init+0x2c>)
 800078e:	f000 ffcd 	bl	800172c <HAL_IWDG_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000798:	f000 fb54 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20004e98 	.word	0x20004e98
 80007a4:	40003000 	.word	0x40003000

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_GPIO_Init+0xd8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a2e      	ldr	r2, [pc, #184]	; (8000880 <MX_GPIO_Init+0xd8>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <MX_GPIO_Init+0xd8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_GPIO_Init+0xd8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a27      	ldr	r2, [pc, #156]	; (8000880 <MX_GPIO_Init+0xd8>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_GPIO_Init+0xd8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_GPIO_Init+0xd8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_GPIO_Init+0xd8>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0xd8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_GPIO_Init+0xd8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a19      	ldr	r2, [pc, #100]	; (8000880 <MX_GPIO_Init+0xd8>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_GPIO_Init+0xd8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PIN1_Pin */
  GPIO_InitStruct.Pin = PIN1_Pin;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN1_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <MX_GPIO_Init+0xdc>)
 8000842:	f000 fdbf 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN2_Pin PIN3_Pin PIN4_Pin PIN5_Pin
                           PIN6_Pin PIN7_Pin PIN8_Pin */
  GPIO_InitStruct.Pin = PIN2_Pin|PIN3_Pin|PIN4_Pin|PIN5_Pin
 8000846:	23fe      	movs	r3, #254	; 0xfe
 8000848:	617b      	str	r3, [r7, #20]
                          |PIN6_Pin|PIN7_Pin|PIN8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084e:	2302      	movs	r3, #2
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	480a      	ldr	r0, [pc, #40]	; (8000884 <MX_GPIO_Init+0xdc>)
 800085a:	f000 fdb3 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN9_Pin PIN10_Pin PIN11_Pin PIN12_Pin
                           PIN13_Pin PIN14_Pin PIN15_Pin PIN16_Pin */
  GPIO_InitStruct.Pin = PIN9_Pin|PIN10_Pin|PIN11_Pin|PIN12_Pin
 800085e:	23ff      	movs	r3, #255	; 0xff
 8000860:	617b      	str	r3, [r7, #20]
                          |PIN13_Pin|PIN14_Pin|PIN15_Pin|PIN16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000866:	2302      	movs	r3, #2
 8000868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0xe0>)
 8000872:	f000 fda7 	bl	80013c4 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000
 8000888:	40020400 	.word	0x40020400

0800088c <CMD_Split>:

/* USER CODE BEGIN 4 */
void CMD_Split(uint8_t * cmd, uint8_t * cmd_sn, uint8_t * cmd_name, uint8_t * cmd_pin, uint8_t * cmd_value, uint8_t * resp_string)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
    uint8_t * command = cmd;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t resp_length = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t * underscore = NULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
    //get sn
    underscore = memchr(command, '_', strlen((char *)command));
 80008ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008ae:	f7ff fcdf 	bl	8000270 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	215f      	movs	r1, #95	; 0x5f
 80008b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008ba:	f7ff fc89 	bl	80001d0 <memchr>
 80008be:	61f8      	str	r0, [r7, #28]
    if(underscore == NULL)
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d103      	bne.n	80008ce <CMD_Split+0x42>
    {
        //invalid cmd fmt
        CMD_ERROR_STATE = ERR_INVALID_FMT;
 80008c6:	4b61      	ldr	r3, [pc, #388]	; (8000a4c <CMD_Split+0x1c0>)
 80008c8:	2205      	movs	r2, #5
 80008ca:	701a      	strb	r2, [r3, #0]
        return;
 80008cc:	e0bb      	b.n	8000a46 <CMD_Split+0x1ba>
    }
    if((length = underscore - command)!=SN_LENGTH)
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	2b05      	cmp	r3, #5
 80008da:	d003      	beq.n	80008e4 <CMD_Split+0x58>
    {
        //invalid sn
        CMD_ERROR_STATE = ERR_INVALID_SN;
 80008dc:	4b5b      	ldr	r3, [pc, #364]	; (8000a4c <CMD_Split+0x1c0>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
        return;
 80008e2:	e0b0      	b.n	8000a46 <CMD_Split+0x1ba>
    }
    memcpy(cmd_sn, command, length);
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008e8:	68b8      	ldr	r0, [r7, #8]
 80008ea:	f00a fabc 	bl	800ae66 <memcpy>
    memcpy(resp_string, command, length);
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80008f4:	f00a fab7 	bl	800ae66 <memcpy>
    resp_length = length;
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    resp_string[resp_length++] = '_';
 80008fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 8000908:	461a      	mov	r2, r3
 800090a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090c:	4413      	add	r3, r2
 800090e:	225f      	movs	r2, #95	; 0x5f
 8000910:	701a      	strb	r2, [r3, #0]
    command += length + 1;
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	3301      	adds	r3, #1
 8000916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000918:	4413      	add	r3, r2
 800091a:	627b      	str	r3, [r7, #36]	; 0x24

    //get name
    underscore = memchr(command, '_', strlen((char *)command));
 800091c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800091e:	f7ff fca7 	bl	8000270 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	215f      	movs	r1, #95	; 0x5f
 8000928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800092a:	f7ff fc51 	bl	80001d0 <memchr>
 800092e:	61f8      	str	r0, [r7, #28]
    if(underscore == NULL)
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d103      	bne.n	800093e <CMD_Split+0xb2>
    {
        //invalid cmd fmt
        CMD_ERROR_STATE = ERR_INVALID_FMT;
 8000936:	4b45      	ldr	r3, [pc, #276]	; (8000a4c <CMD_Split+0x1c0>)
 8000938:	2205      	movs	r2, #5
 800093a:	701a      	strb	r2, [r3, #0]
        return;
 800093c:	e083      	b.n	8000a46 <CMD_Split+0x1ba>
    }
    if((length = underscore - command) == 0||length > CMD_NAME_LENGTH)
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <CMD_Split+0xc6>
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	2b06      	cmp	r3, #6
 8000950:	d903      	bls.n	800095a <CMD_Split+0xce>
    {
        //invalid cmd name
        CMD_ERROR_STATE = ERR_INVALID_CMD;
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <CMD_Split+0x1c0>)
 8000954:	2202      	movs	r2, #2
 8000956:	701a      	strb	r2, [r3, #0]
        return;
 8000958:	e075      	b.n	8000a46 <CMD_Split+0x1ba>
    }
    memcpy(cmd_name, command, length);
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f00a fa81 	bl	800ae66 <memcpy>
    command += length + 1;
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	3301      	adds	r3, #1
 8000968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800096a:	4413      	add	r3, r2
 800096c:	627b      	str	r3, [r7, #36]	; 0x24

    //get pin
    underscore = memchr(command, '_', strlen((char *)command));
 800096e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000970:	f7ff fc7e 	bl	8000270 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	215f      	movs	r1, #95	; 0x5f
 800097a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800097c:	f7ff fc28 	bl	80001d0 <memchr>
 8000980:	61f8      	str	r0, [r7, #28]
    if(underscore == NULL)
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d124      	bne.n	80009d2 <CMD_Split+0x146>
    {
        //case read
        uint8_t * carriage_return = memchr(command, '\r', strlen((char *)command));
 8000988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800098a:	f7ff fc71 	bl	8000270 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	210d      	movs	r1, #13
 8000994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000996:	f7ff fc1b 	bl	80001d0 <memchr>
 800099a:	6138      	str	r0, [r7, #16]
        if(carriage_return == NULL)
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <CMD_Split+0x11e>
        {
            //no carriage_return
            CMD_ERROR_STATE = ERR_INVALID_FMT;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <CMD_Split+0x1c0>)
 80009a4:	2205      	movs	r2, #5
 80009a6:	701a      	strb	r2, [r3, #0]
            return;
 80009a8:	e04d      	b.n	8000a46 <CMD_Split+0x1ba>
        }
        if((length = carriage_return - command) == 0||length > PIN_LENGTH)
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <CMD_Split+0x132>
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d903      	bls.n	80009c6 <CMD_Split+0x13a>
        {
            //invalid pin name
            CMD_ERROR_STATE = ERR_INVALID_PIN;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <CMD_Split+0x1c0>)
 80009c0:	2203      	movs	r2, #3
 80009c2:	701a      	strb	r2, [r3, #0]
            return;
 80009c4:	e03f      	b.n	8000a46 <CMD_Split+0x1ba>
        }
        memcpy(cmd_pin, command, length);
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009ca:	6838      	ldr	r0, [r7, #0]
 80009cc:	f00a fa4b 	bl	800ae66 <memcpy>
        return;
 80009d0:	e039      	b.n	8000a46 <CMD_Split+0x1ba>
    }
    else
    {
        //case write
        if((length = underscore - command) == 0||length > PIN_LENGTH)
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <CMD_Split+0x15a>
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d903      	bls.n	80009ee <CMD_Split+0x162>
        {
            //invalid pin name
            CMD_ERROR_STATE = ERR_INVALID_PIN;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <CMD_Split+0x1c0>)
 80009e8:	2203      	movs	r2, #3
 80009ea:	701a      	strb	r2, [r3, #0]
            return;
 80009ec:	e02b      	b.n	8000a46 <CMD_Split+0x1ba>
        }
        memcpy(cmd_pin, command, length);
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009f2:	6838      	ldr	r0, [r7, #0]
 80009f4:	f00a fa37 	bl	800ae66 <memcpy>
        command += length + 1;
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	3301      	adds	r3, #1
 80009fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009fe:	4413      	add	r3, r2
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    }
    //get pin value
    uint8_t * carriage_return = memchr(command, '\r', strlen((char *)command));
 8000a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a04:	f7ff fc34 	bl	8000270 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	210d      	movs	r1, #13
 8000a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a10:	f7ff fbde 	bl	80001d0 <memchr>
 8000a14:	6178      	str	r0, [r7, #20]
    if(carriage_return == NULL)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d103      	bne.n	8000a24 <CMD_Split+0x198>
    {
        //no carriage_return
        CMD_ERROR_STATE = ERR_INVALID_FMT;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <CMD_Split+0x1c0>)
 8000a1e:	2205      	movs	r2, #5
 8000a20:	701a      	strb	r2, [r3, #0]
        return;
 8000a22:	e010      	b.n	8000a46 <CMD_Split+0x1ba>
    }
    if((length = carriage_return - command) != PIN_VALUE_LENGTH)
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d003      	beq.n	8000a3a <CMD_Split+0x1ae>
    {
        // invalid pin value
        CMD_ERROR_STATE = ERR_INVALID_VALUE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <CMD_Split+0x1c0>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	701a      	strb	r2, [r3, #0]
        return;
 8000a38:	e005      	b.n	8000a46 <CMD_Split+0x1ba>
    }
    memcpy(cmd_value, command, length);
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a40:	f00a fa11 	bl	800ae66 <memcpy>
    return;
 8000a44:	bf00      	nop
}
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000290 	.word	0x20000290

08000a50 <Execute_CMD>:

void Execute_CMD(uint8_t * cmd, uint8_t * resp_string)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
    uint8_t cmd_sn[SN_LENGTH] = {0};
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	773b      	strb	r3, [r7, #28]
    uint8_t cmd_name[CMD_NAME_LENGTH] = {0};
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	2300      	movs	r3, #0
 8000a68:	82bb      	strh	r3, [r7, #20]
    uint8_t cmd_pin[PIN_LENGTH] = {0};
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
    uint8_t cmd_value[PIN_VALUE_LENGTH] = {0};
 8000a6e:	2300      	movs	r3, #0
 8000a70:	723b      	strb	r3, [r7, #8]
    uint8_t pin_num = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	77fb      	strb	r3, [r7, #31]
    CMD_ERROR_STATE = ERR_OK;
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <Execute_CMD+0x104>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
    CMD_Split(cmd, cmd_sn, cmd_name, cmd_pin, cmd_value, resp_string);
 8000a7c:	f107 000c 	add.w	r0, r7, #12
 8000a80:	f107 0210 	add.w	r2, r7, #16
 8000a84:	f107 0118 	add.w	r1, r7, #24
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	4603      	mov	r3, r0
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fef9 	bl	800088c <CMD_Split>
    if(CMD_ERROR_STATE != ERR_OK) return;
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <Execute_CMD+0x104>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d153      	bne.n	8000b4a <Execute_CMD+0xfa>
    //get pin number
    pin_num = atoi((char *)&cmd_pin[1]);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f00a f8a7 	bl	800abfc <atoi>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	77fb      	strb	r3, [r7, #31]
    if(cmd_pin[0]!='P'||pin_num == 0||pin_num > 16)
 8000ab2:	7b3b      	ldrb	r3, [r7, #12]
 8000ab4:	2b50      	cmp	r3, #80	; 0x50
 8000ab6:	d105      	bne.n	8000ac4 <Execute_CMD+0x74>
 8000ab8:	7ffb      	ldrb	r3, [r7, #31]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <Execute_CMD+0x74>
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	2b10      	cmp	r3, #16
 8000ac2:	d903      	bls.n	8000acc <Execute_CMD+0x7c>
    {
        CMD_ERROR_STATE = ERR_INVALID_PIN;
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <Execute_CMD+0x104>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	701a      	strb	r2, [r3, #0]
        return;
 8000aca:	e03f      	b.n	8000b4c <Execute_CMD+0xfc>
        //command pin invalid error
    }

    if(memcmp(cmd_name, READ_CMD, strlen((char *)READ_CMD)) == osOK)
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	4921      	ldr	r1, [pc, #132]	; (8000b58 <Execute_CMD+0x108>)
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f00a f9b8 	bl	800ae4a <memcmp>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d126      	bne.n	8000b2e <Execute_CMD+0xde>
    {
    //Read function
        GPIO_PinState result = HAL_GPIO_ReadPin(pin_map[pin_num-1].GPIO_Port, pin_map[pin_num-1].GPIO_Pin);
 8000ae0:	7ffb      	ldrb	r3, [r7, #31]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <Execute_CMD+0x10c>)
 8000ae6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	491b      	ldr	r1, [pc, #108]	; (8000b5c <Execute_CMD+0x10c>)
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	440b      	add	r3, r1
 8000af4:	889b      	ldrh	r3, [r3, #4]
 8000af6:	4619      	mov	r1, r3
 8000af8:	4610      	mov	r0, r2
 8000afa:	f000 fdff 	bl	80016fc <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	77bb      	strb	r3, [r7, #30]
        uint8_t resp_length = strlen((char *)resp_string);
 8000b02:	6838      	ldr	r0, [r7, #0]
 8000b04:	f7ff fbb4 	bl	8000270 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	777b      	strb	r3, [r7, #29]
        sprintf((char *)&resp_string[resp_length], "%s_P%d:%c", READ_CMD, pin_num, result == GPIO_PIN_SET ? 'H' : 'L');
 8000b0c:	7f7b      	ldrb	r3, [r7, #29]
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	18d0      	adds	r0, r2, r3
 8000b12:	7ffa      	ldrb	r2, [r7, #31]
 8000b14:	7fbb      	ldrb	r3, [r7, #30]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d101      	bne.n	8000b1e <Execute_CMD+0xce>
 8000b1a:	2348      	movs	r3, #72	; 0x48
 8000b1c:	e000      	b.n	8000b20 <Execute_CMD+0xd0>
 8000b1e:	234c      	movs	r3, #76	; 0x4c
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	4613      	mov	r3, r2
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <Execute_CMD+0x108>)
 8000b26:	490e      	ldr	r1, [pc, #56]	; (8000b60 <Execute_CMD+0x110>)
 8000b28:	f00a faa0 	bl	800b06c <siprintf>
 8000b2c:	e00e      	b.n	8000b4c <Execute_CMD+0xfc>
    }
    else if(memcmp(cmd_name, WRITE_CMD, strlen((char *)WRITE_CMD)) == osOK)
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2205      	movs	r2, #5
 8000b34:	490b      	ldr	r1, [pc, #44]	; (8000b64 <Execute_CMD+0x114>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00a f987 	bl	800ae4a <memcmp>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d004      	beq.n	8000b4c <Execute_CMD+0xfc>
    {
    //Write function
    }
    else
    {
		CMD_ERROR_STATE = ERR_INVALID_CMD;
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <Execute_CMD+0x104>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	701a      	strb	r2, [r3, #0]
		return;
 8000b48:	e000      	b.n	8000b4c <Execute_CMD+0xfc>
    if(CMD_ERROR_STATE != ERR_OK) return;
 8000b4a:	bf00      	nop
    }
}
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000290 	.word	0x20000290
 8000b58:	0800c1dc 	.word	0x0800c1dc
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	0800c16c 	.word	0x0800c16c
 8000b64:	0800c1e4 	.word	0x0800c1e4

08000b68 <CMD_Error_Handler>:

osStatus_t CMD_Error_Handler(uint8_t * resp_string)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
    if(strlen((char *)resp_string) == 0) return osError;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <CMD_Error_Handler+0x16>
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	e031      	b.n	8000be2 <CMD_Error_Handler+0x7a>
    const uint8_t* error_message = NULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
    switch(CMD_ERROR_STATE){
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <CMD_Error_Handler+0x84>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	2b05      	cmp	r3, #5
 8000b8a:	d821      	bhi.n	8000bd0 <CMD_Error_Handler+0x68>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <CMD_Error_Handler+0x2c>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08000bad 	.word	0x08000bad
 8000b98:	08000bb3 	.word	0x08000bb3
 8000b9c:	08000bb9 	.word	0x08000bb9
 8000ba0:	08000bbf 	.word	0x08000bbf
 8000ba4:	08000bc5 	.word	0x08000bc5
 8000ba8:	08000bcb 	.word	0x08000bcb
        case ERR_INVALID_SN:
            error_message = INVALID_SN;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <CMD_Error_Handler+0x88>)
 8000bae:	60fb      	str	r3, [r7, #12]
            break;
 8000bb0:	e00f      	b.n	8000bd2 <CMD_Error_Handler+0x6a>
        case ERR_INVALID_CMD:
            error_message = INVALID_CMD;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <CMD_Error_Handler+0x8c>)
 8000bb4:	60fb      	str	r3, [r7, #12]
            break;
 8000bb6:	e00c      	b.n	8000bd2 <CMD_Error_Handler+0x6a>
        case ERR_INVALID_PIN:
            error_message = INVALID_PIN;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <CMD_Error_Handler+0x90>)
 8000bba:	60fb      	str	r3, [r7, #12]
            break;
 8000bbc:	e009      	b.n	8000bd2 <CMD_Error_Handler+0x6a>
        case ERR_INVALID_VALUE:
            error_message = INVALID_VALUE;
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <CMD_Error_Handler+0x94>)
 8000bc0:	60fb      	str	r3, [r7, #12]
            break;
 8000bc2:	e006      	b.n	8000bd2 <CMD_Error_Handler+0x6a>
        case ERR_INVALID_FMT:
            error_message = INVALID_FMT;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <CMD_Error_Handler+0x98>)
 8000bc6:	60fb      	str	r3, [r7, #12]
            break;
 8000bc8:	e003      	b.n	8000bd2 <CMD_Error_Handler+0x6a>
        case ERR_UNKNOWN:
            error_message = UNKNOWN_ISSUE;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <CMD_Error_Handler+0x9c>)
 8000bcc:	60fb      	str	r3, [r7, #12]
            break;
 8000bce:	e000      	b.n	8000bd2 <CMD_Error_Handler+0x6a>
        default:
            break;
 8000bd0:	bf00      	nop
    }
    if(error_message != NULL) {
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <CMD_Error_Handler+0x78>
        strcat((char *)resp_string, (char *)error_message);
 8000bd8:	68f9      	ldr	r1, [r7, #12]
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f00a faa9 	bl	800b132 <strcat>
    }
    return osOK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000290 	.word	0x20000290
 8000bf0:	0800c1ec 	.word	0x0800c1ec
 8000bf4:	0800c1f8 	.word	0x0800c1f8
 8000bf8:	0800c214 	.word	0x0800c214
 8000bfc:	0800c224 	.word	0x0800c224
 8000c00:	0800c204 	.word	0x0800c204
 8000c04:	0800c234 	.word	0x0800c234

08000c08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b094      	sub	sp, #80	; 0x50
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  /* USER CODE BEGIN 5 */
  uint8_t msg[32] = {0};
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	619a      	str	r2, [r3, #24]
  uint8_t resp_string[32];
  /* Infinite loop */
  for(;;)
  {
	IWDG_FEED |= TASK1_BIT;
 8000c28:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <StartDefaultTask+0xf4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	4a32      	ldr	r2, [pc, #200]	; (8000cfc <StartDefaultTask+0xf4>)
 8000c32:	6013      	str	r3, [r2, #0]
	if(osMessageQueueGet(RECV_QueueHandle, msg, 0, 1000)==osOK)
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <StartDefaultTask+0xf8>)
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c40:	2200      	movs	r2, #0
 8000c42:	f006 f995 	bl	8006f70 <osMessageQueueGet>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1ed      	bne.n	8000c28 <StartDefaultTask+0x20>
	{
		memset(resp_string, 0, sizeof(resp_string));
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2220      	movs	r2, #32
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f00a f914 	bl	800ae82 <memset>
		Execute_CMD(msg, resp_string);
 8000c5a:	f107 020c 	add.w	r2, r7, #12
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fef3 	bl	8000a50 <Execute_CMD>
		if(CMD_ERROR_STATE != ERR_OK) {
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <StartDefaultTask+0xfc>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d008      	beq.n	8000c84 <StartDefaultTask+0x7c>
			if(CMD_Error_Handler(resp_string) == osError) continue;
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff76 	bl	8000b68 <CMD_Error_Handler>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c82:	d039      	beq.n	8000cf8 <StartDefaultTask+0xf0>
		}
		size_t resp_length = strlen((char*)resp_string);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff faf1 	bl	8000270 <strlen>
 8000c8e:	64f8      	str	r0, [r7, #76]	; 0x4c
		resp_string[resp_length] = '\r';
 8000c90:	f107 020c 	add.w	r2, r7, #12
 8000c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	4413      	add	r3, r2
 8000c98:	220d      	movs	r2, #13
 8000c9a:	701a      	strb	r2, [r3, #0]
		resp_string[resp_length+1] = '\n';
 8000c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000ca4:	4413      	add	r3, r2
 8000ca6:	220a      	movs	r2, #10
 8000ca8:	f803 2c44 	strb.w	r2, [r3, #-68]
		resp_string[resp_length+2] = '\0';
 8000cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cae:	3302      	adds	r3, #2
 8000cb0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f803 2c44 	strb.w	r2, [r3, #-68]
		while(osMessageQueuePut(RESP_QueueHandle, resp_string, 0U, 0U)==osErrorResource)
 8000cbc:	e008      	b.n	8000cd0 <StartDefaultTask+0xc8>
		{
			osDelay(100);
 8000cbe:	2064      	movs	r0, #100	; 0x64
 8000cc0:	f005 ff48 	bl	8006b54 <osDelay>
			IWDG_FEED |= TASK1_BIT;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <StartDefaultTask+0xf4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <StartDefaultTask+0xf4>)
 8000cce:	6013      	str	r3, [r2, #0]
		while(osMessageQueuePut(RESP_QueueHandle, resp_string, 0U, 0U)==osErrorResource)
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <StartDefaultTask+0x100>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	f107 010c 	add.w	r1, r7, #12
 8000cd8:	2300      	movs	r3, #0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f006 f8e8 	bl	8006eb0 <osMessageQueuePut>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f113 0f03 	cmn.w	r3, #3
 8000ce6:	d0ea      	beq.n	8000cbe <StartDefaultTask+0xb6>
		}
		memset(msg, 0, sizeof(msg));
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	2220      	movs	r2, #32
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f00a f8c6 	bl	800ae82 <memset>
 8000cf6:	e797      	b.n	8000c28 <StartDefaultTask+0x20>
			if(CMD_Error_Handler(resp_string) == osError) continue;
 8000cf8:	bf00      	nop
	IWDG_FEED |= TASK1_BIT;
 8000cfa:	e795      	b.n	8000c28 <StartDefaultTask+0x20>
 8000cfc:	2000028c 	.word	0x2000028c
 8000d00:	20004ed4 	.word	0x20004ed4
 8000d04:	20000290 	.word	0x20000290
 8000d08:	20004ecc 	.word	0x20004ecc

08000d0c <QueuePush>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_QueuePush */
void QueuePush(void *argument)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN QueuePush */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreAcquire(DataInSem01Handle, 1000)==osOK)
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <QueuePush+0x60>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 ffbd 	bl	8006c9c <osSemaphoreAcquire>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d119      	bne.n	8000d5c <QueuePush+0x50>
	{
		while(osMessageQueuePut(RECV_QueueHandle, R_buffer, 0U, 0U)==osErrorResource)
 8000d28:	e008      	b.n	8000d3c <QueuePush+0x30>
		{
			osDelay(100);
 8000d2a:	2064      	movs	r0, #100	; 0x64
 8000d2c:	f005 ff12 	bl	8006b54 <osDelay>
			IWDG_FEED |= TASK2_BIT;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <QueuePush+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <QueuePush+0x64>)
 8000d3a:	6013      	str	r3, [r2, #0]
		while(osMessageQueuePut(RECV_QueueHandle, R_buffer, 0U, 0U)==osErrorResource)
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <QueuePush+0x68>)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	2200      	movs	r2, #0
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <QueuePush+0x6c>)
 8000d46:	f006 f8b3 	bl	8006eb0 <osMessageQueuePut>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f113 0f03 	cmn.w	r3, #3
 8000d50:	d0eb      	beq.n	8000d2a <QueuePush+0x1e>
		}
		memset(R_buffer, 0, 32);
 8000d52:	2220      	movs	r2, #32
 8000d54:	2100      	movs	r1, #0
 8000d56:	4808      	ldr	r0, [pc, #32]	; (8000d78 <QueuePush+0x6c>)
 8000d58:	f00a f893 	bl	800ae82 <memset>
	}
	IWDG_FEED |= TASK2_BIT;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <QueuePush+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	4a02      	ldr	r2, [pc, #8]	; (8000d70 <QueuePush+0x64>)
 8000d66:	6013      	str	r3, [r2, #0]
	if(osSemaphoreAcquire(DataInSem01Handle, 1000)==osOK)
 8000d68:	e7d4      	b.n	8000d14 <QueuePush+0x8>
 8000d6a:	bf00      	nop
 8000d6c:	20004ed0 	.word	0x20004ed0
 8000d70:	2000028c 	.word	0x2000028c
 8000d74:	20004ed4 	.word	0x20004ed4
 8000d78:	20004ea4 	.word	0x20004ea4

08000d7c <CMD_Resp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CMD_Resp */
void CMD_Resp(void *argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CMD_Resp */
  uint8_t msg[32] = {0};
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	615a      	str	r2, [r3, #20]
 8000d9a:	619a      	str	r2, [r3, #24]
  /* Infinite loop */
  for(;;)
  {
	if(osMessageQueueGet(RESP_QueueHandle, msg, 0, 1000)==osOK)
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <CMD_Resp+0x60>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	f107 0108 	add.w	r1, r7, #8
 8000da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da8:	2200      	movs	r2, #0
 8000daa:	f006 f8e1 	bl	8006f70 <osMessageQueueGet>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10c      	bne.n	8000dce <CMD_Resp+0x52>
	{
	  printf("%s", msg);
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	4809      	ldr	r0, [pc, #36]	; (8000de0 <CMD_Resp+0x64>)
 8000dbc:	f00a f8c4 	bl	800af48 <iprintf>
	  memset(msg, 0, sizeof(msg));
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00a f85a 	bl	800ae82 <memset>
	}
	IWDG_FEED |= TASK3_BIT;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <CMD_Resp+0x68>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <CMD_Resp+0x68>)
 8000dd8:	6013      	str	r3, [r2, #0]
	if(osMessageQueueGet(RESP_QueueHandle, msg, 0, 1000)==osOK)
 8000dda:	e7df      	b.n	8000d9c <CMD_Resp+0x20>
 8000ddc:	20004ecc 	.word	0x20004ecc
 8000de0:	0800c178 	.word	0x0800c178
 8000de4:	2000028c 	.word	0x2000028c

08000de8 <IWDG_Feed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IWDG_Feed */
void IWDG_Feed(void *argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IWDG_Feed */
  /* Infinite loop */
  for(;;)
  {
    if(IWDG_FEED == ALL_TASKS)
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <IWDG_Feed+0x30>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b07      	cmp	r3, #7
 8000df6:	d10a      	bne.n	8000e0e <IWDG_Feed+0x26>
	{
      if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 8000df8:	4808      	ldr	r0, [pc, #32]	; (8000e1c <IWDG_Feed+0x34>)
 8000dfa:	f000 fcd9 	bl	80017b0 <HAL_IWDG_Refresh>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <IWDG_Feed+0x20>
      {
	    Error_Handler();
 8000e04:	f000 f81e 	bl	8000e44 <Error_Handler>
      }
      IWDG_FEED = 0;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <IWDG_Feed+0x30>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
	}
	osDelay(100);
 8000e0e:	2064      	movs	r0, #100	; 0x64
 8000e10:	f005 fea0 	bl	8006b54 <osDelay>
    if(IWDG_FEED == ALL_TASKS)
 8000e14:	e7ec      	b.n	8000df0 <IWDG_Feed+0x8>
 8000e16:	bf00      	nop
 8000e18:	2000028c 	.word	0x2000028c
 8000e1c:	20004e98 	.word	0x20004e98

08000e20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e32:	f000 f9a1 	bl	8001178 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40010000 	.word	0x40010000

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_MspInit+0x54>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	210f      	movs	r1, #15
 8000e92:	f06f 0001 	mvn.w	r0, #1
 8000e96:	f000 fa6b 	bl	8001370 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	2019      	movs	r0, #25
 8000ebe:	f000 fa57 	bl	8001370 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ec2:	2019      	movs	r0, #25
 8000ec4:	f000 fa70 	bl	80013a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <HAL_InitTick+0xa0>)
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_InitTick+0xa0>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_InitTick+0xa0>)
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee4:	f107 0210 	add.w	r2, r7, #16
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fa26 	bl	8003340 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ef4:	f002 fa10 	bl	8003318 <HAL_RCC_GetPCLK2Freq>
 8000ef8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <HAL_InitTick+0xa4>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	0c9b      	lsrs	r3, r3, #18
 8000f04:	3b01      	subs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <HAL_InitTick+0xac>)
 8000f0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f2a:	f002 fa3b 	bl	80033a4 <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d104      	bne.n	8000f3e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f34:	4806      	ldr	r0, [pc, #24]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f36:	f002 fa8f 	bl	8003458 <HAL_TIM_Base_Start_IT>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3730      	adds	r7, #48	; 0x30
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	431bde83 	.word	0x431bde83
 8000f50:	20004ee0 	.word	0x20004ee0
 8000f54:	40010000 	.word	0x40010000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f8a:	f002 fad5 	bl	8003538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20004ee0 	.word	0x20004ee0

08000f98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <OTG_FS_IRQHandler+0x10>)
 8000f9e:	f000 fd67 	bl	8001a70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000643c 	.word	0x2000643c

08000fac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e00a      	b.n	8000fd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fbe:	f3af 8000 	nop.w
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	b2ca      	uxtb	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf0      	blt.n	8000fbe <_read+0x12>
	}

return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100e:	605a      	str	r2, [r3, #4]
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f009 fdc0 	bl	800ac04 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20020000 	.word	0x20020000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	20000294 	.word	0x20000294
 80010b8:	20006858 	.word	0x20006858

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001118 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010fc:	4c0b      	ldr	r4, [pc, #44]	; (800112c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800110a:	f7ff ffd7 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110e:	f009 fe75 	bl	800adfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001112:	f7ff fa47 	bl	80005a4 <main>
  bx  lr    
 8001116:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8001124:	0800c4e4 	.word	0x0800c4e4
  ldr r2, =_sbss
 8001128:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 800112c:	20006854 	.word	0x20006854

08001130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC_IRQHandler>
	...

08001134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_Init+0x40>)
 800113e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_Init+0x40>)
 800114a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_Init+0x40>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 f8fc 	bl	800135a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	200f      	movs	r0, #15
 8001164:	f7ff fea0 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff fe72 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000088 	.word	0x20000088
 800119c:	20004f28 	.word	0x20004f28

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20004f28 	.word	0x20004f28

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000088 	.word	0x20000088

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff4c 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001382:	f7ff ff61 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001386:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff ffb1 	bl	80012f4 <NVIC_EncodePriority>
 8001392:	4602      	mov	r2, r0
 8001394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff80 	bl	80012a0 <__NVIC_SetPriority>
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff54 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	e16b      	b.n	80016b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f040 815a 	bne.w	80016b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d005      	beq.n	8001416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001412:	2b02      	cmp	r3, #2
 8001414:	d130      	bne.n	8001478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b03      	cmp	r3, #3
 8001482:	d017      	beq.n	80014b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d123      	bne.n	8001508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	69b9      	ldr	r1, [r7, #24]
 8001504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80b4 	beq.w	80016b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b60      	ldr	r3, [pc, #384]	; (80016d0 <HAL_GPIO_Init+0x30c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a5f      	ldr	r2, [pc, #380]	; (80016d0 <HAL_GPIO_Init+0x30c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <HAL_GPIO_Init+0x30c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001566:	4a5b      	ldr	r2, [pc, #364]	; (80016d4 <HAL_GPIO_Init+0x310>)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_GPIO_Init+0x314>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d02b      	beq.n	80015ea <HAL_GPIO_Init+0x226>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a51      	ldr	r2, [pc, #324]	; (80016dc <HAL_GPIO_Init+0x318>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d025      	beq.n	80015e6 <HAL_GPIO_Init+0x222>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a50      	ldr	r2, [pc, #320]	; (80016e0 <HAL_GPIO_Init+0x31c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d01f      	beq.n	80015e2 <HAL_GPIO_Init+0x21e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4f      	ldr	r2, [pc, #316]	; (80016e4 <HAL_GPIO_Init+0x320>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x21a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4e      	ldr	r2, [pc, #312]	; (80016e8 <HAL_GPIO_Init+0x324>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x216>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4d      	ldr	r2, [pc, #308]	; (80016ec <HAL_GPIO_Init+0x328>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x212>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4c      	ldr	r2, [pc, #304]	; (80016f0 <HAL_GPIO_Init+0x32c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x20e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4b      	ldr	r2, [pc, #300]	; (80016f4 <HAL_GPIO_Init+0x330>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x20a>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00e      	b.n	80015ec <HAL_GPIO_Init+0x228>
 80015ce:	2308      	movs	r3, #8
 80015d0:	e00c      	b.n	80015ec <HAL_GPIO_Init+0x228>
 80015d2:	2306      	movs	r3, #6
 80015d4:	e00a      	b.n	80015ec <HAL_GPIO_Init+0x228>
 80015d6:	2305      	movs	r3, #5
 80015d8:	e008      	b.n	80015ec <HAL_GPIO_Init+0x228>
 80015da:	2304      	movs	r3, #4
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x228>
 80015de:	2303      	movs	r3, #3
 80015e0:	e004      	b.n	80015ec <HAL_GPIO_Init+0x228>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e002      	b.n	80015ec <HAL_GPIO_Init+0x228>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x228>
 80015ea:	2300      	movs	r3, #0
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	f002 0203 	and.w	r2, r2, #3
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	4093      	lsls	r3, r2
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fc:	4935      	ldr	r1, [pc, #212]	; (80016d4 <HAL_GPIO_Init+0x310>)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_GPIO_Init+0x334>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162e:	4a32      	ldr	r2, [pc, #200]	; (80016f8 <HAL_GPIO_Init+0x334>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001634:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_GPIO_Init+0x334>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001658:	4a27      	ldr	r2, [pc, #156]	; (80016f8 <HAL_GPIO_Init+0x334>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_GPIO_Init+0x334>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001682:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <HAL_GPIO_Init+0x334>)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_GPIO_Init+0x334>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <HAL_GPIO_Init+0x334>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3301      	adds	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	2b0f      	cmp	r3, #15
 80016bc:	f67f ae90 	bls.w	80013e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40013800 	.word	0x40013800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020800 	.word	0x40020800
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40021400 	.word	0x40021400
 80016f0:	40021800 	.word	0x40021800
 80016f4:	40021c00 	.word	0x40021c00
 80016f8:	40013c00 	.word	0x40013c00

080016fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e001      	b.n	800171e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e034      	b.n	80017a8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001746:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f245 5255 	movw	r2, #21845	; 0x5555
 8001750:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6852      	ldr	r2, [r2, #4]
 800175a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6892      	ldr	r2, [r2, #8]
 8001764:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001766:	f7ff fd1b 	bl	80011a0 <HAL_GetTick>
 800176a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800176c:	e00f      	b.n	800178e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800176e:	f7ff fd17 	bl	80011a0 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b31      	cmp	r3, #49	; 0x31
 800177a:	d908      	bls.n	800178e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e00c      	b.n	80017a8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1e8      	bne.n	800176e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80017a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80017c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d2:	b08f      	sub	sp, #60	; 0x3c
 80017d4:	af0a      	add	r7, sp, #40	; 0x28
 80017d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e10f      	b.n	8001a02 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d106      	bne.n	8001802 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f008 fee9 	bl	800a5d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2203      	movs	r2, #3
 8001806:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 f982 	bl	8003b2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	687e      	ldr	r6, [r7, #4]
 800182e:	466d      	mov	r5, sp
 8001830:	f106 0410 	add.w	r4, r6, #16
 8001834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001840:	e885 0003 	stmia.w	r5, {r0, r1}
 8001844:	1d33      	adds	r3, r6, #4
 8001846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f002 f859 	bl	8003900 <USB_CoreInit>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0d0      	b.n	8001a02 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f002 f970 	bl	8003b4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e04a      	b.n	8001908 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	333d      	adds	r3, #61	; 0x3d
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	333c      	adds	r3, #60	; 0x3c
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b298      	uxth	r0, r3
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	3342      	adds	r3, #66	; 0x42
 80018ae:	4602      	mov	r2, r0
 80018b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	333f      	adds	r3, #63	; 0x3f
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3344      	adds	r3, #68	; 0x44
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	3348      	adds	r3, #72	; 0x48
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	3350      	adds	r3, #80	; 0x50
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	3301      	adds	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3af      	bcc.n	8001872 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	e044      	b.n	80019a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	3301      	adds	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3b5      	bcc.n	8001918 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	687e      	ldr	r6, [r7, #4]
 80019b4:	466d      	mov	r5, sp
 80019b6:	f106 0410 	add.w	r4, r6, #16
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ca:	1d33      	adds	r3, r6, #4
 80019cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ce:	6838      	ldr	r0, [r7, #0]
 80019d0:	f002 f908 	bl	8003be4 <USB_DevInit>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2202      	movs	r2, #2
 80019de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00d      	b.n	8001a02 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 f984 	bl	8004d08 <USB_DevDisconnect>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_PCD_Start+0x1c>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e020      	b.n	8001a68 <HAL_PCD_Start+0x5e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d109      	bne.n	8001a4a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 f85a 	bl	8003b08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 f934 	bl	8004cc6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b08d      	sub	sp, #52	; 0x34
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f9f2 	bl	8004e70 <USB_GetMode>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f040 839d 	bne.w	80021ce <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 f956 	bl	8004d4a <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 8393 	beq.w	80021cc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 f94d 	bl	8004d4a <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d107      	bne.n	8001aca <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f002 0202 	and.w	r2, r2, #2
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 f93b 	bl	8004d4a <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d161      	bne.n	8001ba2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0210 	bic.w	r2, r2, #16
 8001aec:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	0c5b      	lsrs	r3, r3, #17
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d124      	bne.n	8001b64 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d035      	beq.n	8001b92 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	6a38      	ldr	r0, [r7, #32]
 8001b3a:	f002 ff72 	bl	8004a22 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b4a:	441a      	add	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b5c:	441a      	add	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	619a      	str	r2, [r3, #24]
 8001b62:	e016      	b.n	8001b92 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	0c5b      	lsrs	r3, r3, #17
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	2b06      	cmp	r3, #6
 8001b6e:	d110      	bne.n	8001b92 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b76:	2208      	movs	r2, #8
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6a38      	ldr	r0, [r7, #32]
 8001b7c:	f002 ff51 	bl	8004a22 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	699a      	ldr	r2, [r3, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b8c:	441a      	add	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699a      	ldr	r2, [r3, #24]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0210 	orr.w	r2, r2, #16
 8001ba0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 f8cf 	bl	8004d4a <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bb6:	d16e      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 f8d5 	bl	8004d70 <USB_ReadDevAllOutEpInterrupt>
 8001bc6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bc8:	e062      	b.n	8001c90 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d057      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 f8fa 	bl	8004dd8 <USB_ReadDevOutEPInterrupt>
 8001be4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00c      	beq.n	8001c0a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	015a      	lsls	r2, r3, #5
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2301      	movs	r3, #1
 8001c00:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fdb1 	bl	800276c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00c      	beq.n	8001c2e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c20:	461a      	mov	r2, r3
 8001c22:	2308      	movs	r3, #8
 8001c24:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 feab 	bl	8002984 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c44:	461a      	mov	r2, r3
 8001c46:	2310      	movs	r3, #16
 8001c48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c60:	461a      	mov	r2, r3
 8001c62:	2320      	movs	r3, #32
 8001c64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3301      	adds	r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d199      	bne.n	8001bca <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 f855 	bl	8004d4a <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001caa:	f040 80c0 	bne.w	8001e2e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 f876 	bl	8004da4 <USB_ReadDevAllInEpInterrupt>
 8001cb8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cbe:	e0b2      	b.n	8001e26 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80a7 	beq.w	8001e1a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 f89c 	bl	8004e14 <USB_ReadDevInEPInterrupt>
 8001cdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d057      	beq.n	8001d98 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	2201      	movs	r2, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69f9      	ldr	r1, [r7, #28]
 8001d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d08:	4013      	ands	r3, r2
 8001d0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d132      	bne.n	8001d8c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	3348      	adds	r3, #72	; 0x48
 8001d36:	6819      	ldr	r1, [r3, #0]
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4403      	add	r3, r0
 8001d46:	3344      	adds	r3, #68	; 0x44
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4419      	add	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4403      	add	r3, r0
 8001d5a:	3348      	adds	r3, #72	; 0x48
 8001d5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d113      	bne.n	8001d8c <HAL_PCD_IRQHandler+0x31c>
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	3350      	adds	r3, #80	; 0x50
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d108      	bne.n	8001d8c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d84:	461a      	mov	r2, r3
 8001d86:	2101      	movs	r1, #1
 8001d88:	f003 f8a4 	bl	8004ed4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f008 fc9f 	bl	800a6d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dae:	461a      	mov	r2, r3
 8001db0:	2308      	movs	r3, #8
 8001db2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d008      	beq.n	8001dd0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2310      	movs	r3, #16
 8001dce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001de6:	461a      	mov	r2, r3
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e02:	461a      	mov	r2, r3
 8001e04:	2302      	movs	r3, #2
 8001e06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fc1b 	bl	8002650 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f47f af49 	bne.w	8001cc0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 ff89 	bl	8004d4a <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e42:	d122      	bne.n	8001e8a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d108      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fe27 	bl	8002ac0 <HAL_PCDEx_LPM_Callback>
 8001e72:	e002      	b.n	8001e7a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f008 fca5 	bl	800a7c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 ff5b 	bl	8004d4a <USB_ReadInterrupts>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e9e:	d112      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d102      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f008 fc61 	bl	800a778 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ec4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f002 ff3d 	bl	8004d4a <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eda:	f040 80c7 	bne.w	800206c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 ffd7 	bl	8003eac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f02:	e056      	b.n	8001fb2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f10:	461a      	mov	r2, r3
 8001f12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f16:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f28:	0151      	lsls	r1, r2, #5
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	440a      	add	r2, r1
 8001f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f36:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f48:	0151      	lsls	r1, r2, #5
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	440a      	add	r2, r1
 8001f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f64:	461a      	mov	r2, r3
 8001f66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f6a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7c:	0151      	lsls	r1, r2, #5
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	440a      	add	r2, r1
 8001f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f9c:	0151      	lsls	r1, r2, #5
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	440a      	add	r2, r1
 8001fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001faa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	3301      	adds	r3, #1
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d3a3      	bcc.n	8001f04 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d016      	beq.n	8002006 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe8:	f043 030b 	orr.w	r3, r3, #11
 8001fec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ffe:	f043 030b 	orr.w	r3, r3, #11
 8002002:	6453      	str	r3, [r2, #68]	; 0x44
 8002004:	e015      	b.n	8002032 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002018:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800201c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800202c:	f043 030b 	orr.w	r3, r3, #11
 8002030:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002040:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002044:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002056:	461a      	mov	r2, r3
 8002058:	f002 ff3c 	bl	8004ed4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800206a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fe6a 	bl	8004d4a <USB_ReadInterrupts>
 8002076:	4603      	mov	r3, r0
 8002078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800207c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002080:	d124      	bne.n	80020cc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f002 ff00 	bl	8004e8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f001 ff68 	bl	8003f66 <USB_GetDevSpeed>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681c      	ldr	r4, [r3, #0]
 80020a2:	f001 f92d 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 80020a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	4620      	mov	r0, r4
 80020b2:	f001 fc87 	bl	80039c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f008 fb35 	bl	800a726 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 fe3a 	bl	8004d4a <USB_ReadInterrupts>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d10a      	bne.n	80020f6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f008 fb12 	bl	800a70a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f002 0208 	and.w	r2, r2, #8
 80020f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fe25 	bl	8004d4a <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800210a:	d10f      	bne.n	800212c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f008 fb74 	bl	800a804 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800212a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f002 fe0a 	bl	8004d4a <USB_ReadInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002140:	d10f      	bne.n	8002162 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f008 fb47 	bl	800a7e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fdef 	bl	8004d4a <USB_ReadInterrupts>
 800216c:	4603      	mov	r3, r0
 800216e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002176:	d10a      	bne.n	800218e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f008 fb55 	bl	800a828 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800218c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f002 fdd9 	bl	8004d4a <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d115      	bne.n	80021ce <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f008 fb45 	bl	800a844 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	e000      	b.n	80021ce <HAL_PCD_IRQHandler+0x75e>
      return;
 80021cc:	bf00      	nop
    }
  }
}
 80021ce:	3734      	adds	r7, #52	; 0x34
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd90      	pop	{r4, r7, pc}

080021d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_PCD_SetAddress+0x1a>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e013      	b.n	8002216 <HAL_PCD_SetAddress+0x42>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f002 fd37 	bl	8004c7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	4608      	mov	r0, r1
 8002228:	4611      	mov	r1, r2
 800222a:	461a      	mov	r2, r3
 800222c:	4603      	mov	r3, r0
 800222e:	70fb      	strb	r3, [r7, #3]
 8002230:	460b      	mov	r3, r1
 8002232:	803b      	strh	r3, [r7, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800223c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002240:	2b00      	cmp	r3, #0
 8002242:	da0f      	bge.n	8002264 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	f003 020f 	and.w	r2, r3, #15
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	3338      	adds	r3, #56	; 0x38
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	3304      	adds	r3, #4
 800225a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2201      	movs	r2, #1
 8002260:	705a      	strb	r2, [r3, #1]
 8002262:	e00f      	b.n	8002284 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	f003 020f 	and.w	r2, r3, #15
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	3304      	adds	r3, #4
 800227c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002290:	883a      	ldrh	r2, [r7, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	78ba      	ldrb	r2, [r7, #2]
 800229a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	785b      	ldrb	r3, [r3, #1]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022ae:	78bb      	ldrb	r3, [r7, #2]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d102      	bne.n	80022ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_PCD_EP_Open+0xaa>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e00e      	b.n	80022e6 <HAL_PCD_EP_Open+0xc8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 fe6a 	bl	8003fb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022e4:	7afb      	ldrb	r3, [r7, #11]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da0f      	bge.n	8002322 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	f003 020f 	and.w	r2, r3, #15
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3338      	adds	r3, #56	; 0x38
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	3304      	adds	r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	705a      	strb	r2, [r3, #1]
 8002320:	e00f      	b.n	8002342 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 020f 	and.w	r2, r3, #15
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	3304      	adds	r3, #4
 800233a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	b2da      	uxtb	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_PCD_EP_Close+0x6e>
 8002358:	2302      	movs	r3, #2
 800235a:	e00e      	b.n	800237a <HAL_PCD_EP_Close+0x8c>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	4618      	mov	r0, r3
 800236c:	f001 fea8 	bl	80040c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	460b      	mov	r3, r1
 8002390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2200      	movs	r2, #0
 80023c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	f002 f983 	bl	8004700 <USB_EP0StartXfer>
 80023fa:	e008      	b.n	800240e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	6979      	ldr	r1, [r7, #20]
 800240a:	f001 ff35 	bl	8004278 <USB_EPStartXfer>
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	460b      	mov	r3, r1
 8002456:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002458:	7afb      	ldrb	r3, [r7, #11]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	3338      	adds	r3, #56	; 0x38
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2201      	movs	r2, #1
 8002486:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002488:	7afb      	ldrb	r3, [r7, #11]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	b2da      	uxtb	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d102      	bne.n	80024a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024a2:	7afb      	ldrb	r3, [r7, #11]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	6979      	ldr	r1, [r7, #20]
 80024ba:	f002 f921 	bl	8004700 <USB_EP0StartXfer>
 80024be:	e008      	b.n	80024d2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	6979      	ldr	r1, [r7, #20]
 80024ce:	f001 fed3 	bl	8004278 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d901      	bls.n	80024fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e050      	b.n	800259c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da0f      	bge.n	8002522 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	f003 020f 	and.w	r2, r3, #15
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	3338      	adds	r3, #56	; 0x38
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	3304      	adds	r3, #4
 8002518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	705a      	strb	r2, [r3, #1]
 8002520:	e00d      	b.n	800253e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	3304      	adds	r3, #4
 8002536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_PCD_EP_SetStall+0x82>
 800255a:	2302      	movs	r3, #2
 800255c:	e01e      	b.n	800259c <HAL_PCD_EP_SetStall+0xc0>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68f9      	ldr	r1, [r7, #12]
 800256c:	4618      	mov	r0, r3
 800256e:	f002 fab0 	bl	8004ad2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	b2d9      	uxtb	r1, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800258c:	461a      	mov	r2, r3
 800258e:	f002 fca1 	bl	8004ed4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d901      	bls.n	80025c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e042      	b.n	8002648 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	da0f      	bge.n	80025ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	f003 020f 	and.w	r2, r3, #15
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	3338      	adds	r3, #56	; 0x38
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	3304      	adds	r3, #4
 80025e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	705a      	strb	r2, [r3, #1]
 80025e8:	e00f      	b.n	800260a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	f003 020f 	and.w	r2, r3, #15
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	b2da      	uxtb	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_PCD_EP_ClrStall+0x86>
 8002626:	2302      	movs	r3, #2
 8002628:	e00e      	b.n	8002648 <HAL_PCD_EP_ClrStall+0xa4>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68f9      	ldr	r1, [r7, #12]
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fab8 	bl	8004bae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af02      	add	r7, sp, #8
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	3338      	adds	r3, #56	; 0x38
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	3304      	adds	r3, #4
 8002676:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	d901      	bls.n	8002688 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e06c      	b.n	8002762 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	429a      	cmp	r2, r3
 800269c:	d902      	bls.n	80026a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3303      	adds	r3, #3
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ac:	e02b      	b.n	8002706 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d902      	bls.n	80026ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3303      	adds	r3, #3
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4603      	mov	r3, r0
 80026e8:	6978      	ldr	r0, [r7, #20]
 80026ea:	f002 f95c 	bl	80049a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	441a      	add	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	441a      	add	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	b29b      	uxth	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	429a      	cmp	r2, r3
 800271a:	d809      	bhi.n	8002730 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002724:	429a      	cmp	r2, r3
 8002726:	d203      	bcs.n	8002730 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1be      	bne.n	80026ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	429a      	cmp	r2, r3
 800273a:	d811      	bhi.n	8002760 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	2201      	movs	r2, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	43db      	mvns	r3, r3
 8002756:	6939      	ldr	r1, [r7, #16]
 8002758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800275c:	4013      	ands	r3, r2
 800275e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	333c      	adds	r3, #60	; 0x3c
 8002784:	3304      	adds	r3, #4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	f040 80a0 	bne.w	80028e4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d015      	beq.n	80027da <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a72      	ldr	r2, [pc, #456]	; (800297c <PCD_EP_OutXfrComplete_int+0x210>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	f240 80dd 	bls.w	8002972 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80d7 	beq.w	8002972 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d0:	461a      	mov	r2, r3
 80027d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027d6:	6093      	str	r3, [r2, #8]
 80027d8:	e0cb      	b.n	8002972 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d009      	beq.n	80027f8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f0:	461a      	mov	r2, r3
 80027f2:	2320      	movs	r3, #32
 80027f4:	6093      	str	r3, [r2, #8]
 80027f6:	e0bc      	b.n	8002972 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 80b7 	bne.w	8002972 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a5d      	ldr	r2, [pc, #372]	; (800297c <PCD_EP_OutXfrComplete_int+0x210>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d90f      	bls.n	800282c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002822:	461a      	mov	r2, r3
 8002824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002828:	6093      	str	r3, [r2, #8]
 800282a:	e0a2      	b.n	8002972 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800283e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	0159      	lsls	r1, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	440b      	add	r3, r1
 8002848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002852:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4403      	add	r3, r0
 8002862:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002866:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800287a:	6819      	ldr	r1, [r3, #0]
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4403      	add	r3, r0
 800288a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4419      	add	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4403      	add	r3, r0
 80028a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028a4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d114      	bne.n	80028d6 <PCD_EP_OutXfrComplete_int+0x16a>
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d108      	bne.n	80028d6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028ce:	461a      	mov	r2, r3
 80028d0:	2101      	movs	r1, #1
 80028d2:	f002 faff 	bl	8004ed4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f007 fedf 	bl	800a6a0 <HAL_PCD_DataOutStageCallback>
 80028e2:	e046      	b.n	8002972 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a26      	ldr	r2, [pc, #152]	; (8002980 <PCD_EP_OutXfrComplete_int+0x214>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d124      	bne.n	8002936 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002902:	461a      	mov	r2, r3
 8002904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002908:	6093      	str	r3, [r2, #8]
 800290a:	e032      	b.n	8002972 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002922:	461a      	mov	r2, r3
 8002924:	2320      	movs	r3, #32
 8002926:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f007 feb6 	bl	800a6a0 <HAL_PCD_DataOutStageCallback>
 8002934:	e01d      	b.n	8002972 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d114      	bne.n	8002966 <PCD_EP_OutXfrComplete_int+0x1fa>
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d108      	bne.n	8002966 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800295e:	461a      	mov	r2, r3
 8002960:	2100      	movs	r1, #0
 8002962:	f002 fab7 	bl	8004ed4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f007 fe97 	bl	800a6a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	4f54300a 	.word	0x4f54300a
 8002980:	4f54310a 	.word	0x4f54310a

08002984 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	333c      	adds	r3, #60	; 0x3c
 800299c:	3304      	adds	r3, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <PCD_EP_OutSetupPacket_int+0x88>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d90e      	bls.n	80029d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d0:	461a      	mov	r2, r3
 80029d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f007 fe4f 	bl	800a67c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <PCD_EP_OutSetupPacket_int+0x88>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d90c      	bls.n	8002a00 <PCD_EP_OutSetupPacket_int+0x7c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d108      	bne.n	8002a00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029f8:	461a      	mov	r2, r3
 80029fa:	2101      	movs	r1, #1
 80029fc:	f002 fa6a 	bl	8004ed4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	4f54300a 	.word	0x4f54300a

08002a10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a2e:	883b      	ldrh	r3, [r7, #0]
 8002a30:	0419      	lsls	r1, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a3c:	e028      	b.n	8002a90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	0c1b      	lsrs	r3, r3, #16
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	4413      	add	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e00d      	b.n	8002a6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	3340      	adds	r3, #64	; 0x40
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4413      	add	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d3ec      	bcc.n	8002a52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a78:	883b      	ldrh	r3, [r7, #0]
 8002a7a:	0418      	lsls	r0, r3, #16
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	4302      	orrs	r2, r0
 8002a88:	3340      	adds	r3, #64	; 0x40
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e264      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d075      	beq.n	8002be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af6:	4ba3      	ldr	r3, [pc, #652]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d00c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4ba0      	ldr	r3, [pc, #640]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d112      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4b9d      	ldr	r3, [pc, #628]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b99      	ldr	r3, [pc, #612]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05b      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d157      	bne.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e23f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x74>
 8002b3e:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a90      	ldr	r2, [pc, #576]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x98>
 8002b56:	4b8b      	ldr	r3, [pc, #556]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a8a      	ldr	r2, [pc, #552]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a87      	ldr	r2, [pc, #540]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b70:	4b84      	ldr	r3, [pc, #528]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a83      	ldr	r2, [pc, #524]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b81      	ldr	r3, [pc, #516]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a80      	ldr	r2, [pc, #512]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fb06 	bl	80011a0 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fb02 	bl	80011a0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e204      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe faf2 	bl	80011a0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe faee 	bl	80011a0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1f0      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d063      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d11c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1c4      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	4b56      	ldr	r3, [pc, #344]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4952      	ldr	r1, [pc, #328]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	e03a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c48:	4b4f      	ldr	r3, [pc, #316]	; (8002d88 <HAL_RCC_OscConfig+0x2b0>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe faa7 	bl	80011a0 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7fe faa3 	bl	80011a0 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1a5      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b43      	ldr	r3, [pc, #268]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4940      	ldr	r1, [pc, #256]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <HAL_RCC_OscConfig+0x2b0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fa86 	bl	80011a0 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe fa82 	bl	80011a0 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e184      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d030      	beq.n	8002d24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_RCC_OscConfig+0x2b4>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fa66 	bl	80011a0 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fa62 	bl	80011a0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e164      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x200>
 8002cf6:	e015      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_OscConfig+0x2b4>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fa4f 	bl	80011a0 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe fa4b 	bl	80011a0 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e14d      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80a0 	beq.w	8002e72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10f      	bne.n	8002d62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_OscConfig+0x2b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d121      	bne.n	8002db2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <HAL_RCC_OscConfig+0x2b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <HAL_RCC_OscConfig+0x2b8>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fa11 	bl	80011a0 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	e011      	b.n	8002da6 <HAL_RCC_OscConfig+0x2ce>
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	42470000 	.word	0x42470000
 8002d8c:	42470e80 	.word	0x42470e80
 8002d90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d94:	f7fe fa04 	bl	80011a0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e106      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b85      	ldr	r3, [pc, #532]	; (8002fbc <HAL_RCC_OscConfig+0x4e4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2f0>
 8002dba:	4b81      	ldr	r3, [pc, #516]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a80      	ldr	r2, [pc, #512]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc6:	e01c      	b.n	8002e02 <HAL_RCC_OscConfig+0x32a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d10c      	bne.n	8002dea <HAL_RCC_OscConfig+0x312>
 8002dd0:	4b7b      	ldr	r3, [pc, #492]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a7a      	ldr	r2, [pc, #488]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
 8002ddc:	4b78      	ldr	r3, [pc, #480]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a77      	ldr	r2, [pc, #476]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	e00b      	b.n	8002e02 <HAL_RCC_OscConfig+0x32a>
 8002dea:	4b75      	ldr	r3, [pc, #468]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a74      	ldr	r2, [pc, #464]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	4b72      	ldr	r3, [pc, #456]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a71      	ldr	r2, [pc, #452]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d015      	beq.n	8002e36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f9c9 	bl	80011a0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fe f9c5 	bl	80011a0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0c5      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e28:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ee      	beq.n	8002e12 <HAL_RCC_OscConfig+0x33a>
 8002e34:	e014      	b.n	8002e60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e36:	f7fe f9b3 	bl	80011a0 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fe f9af 	bl	80011a0 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0af      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	4b5a      	ldr	r3, [pc, #360]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ee      	bne.n	8002e3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d105      	bne.n	8002e72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e66:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a55      	ldr	r2, [pc, #340]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 809b 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d05c      	beq.n	8002f42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d141      	bne.n	8002f14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_RCC_OscConfig+0x4ec>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fe f983 	bl	80011a0 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe f97f 	bl	80011a0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e081      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb0:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	019b      	lsls	r3, r3, #6
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	085b      	lsrs	r3, r3, #1
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	041b      	lsls	r3, r3, #16
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	061b      	lsls	r3, r3, #24
 8002ee0:	4937      	ldr	r1, [pc, #220]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <HAL_RCC_OscConfig+0x4ec>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe f958 	bl	80011a0 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe f954 	bl	80011a0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e056      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x41c>
 8002f12:	e04e      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCC_OscConfig+0x4ec>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe f941 	bl	80011a0 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fe f93d 	bl	80011a0 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e03f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f0      	bne.n	8002f22 <HAL_RCC_OscConfig+0x44a>
 8002f40:	e037      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e032      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_RCC_OscConfig+0x4e8>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d028      	beq.n	8002fae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d121      	bne.n	8002fae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d11a      	bne.n	8002fae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f7e:	4013      	ands	r3, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d111      	bne.n	8002fae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	3b01      	subs	r3, #1
 8002f98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	42470060 	.word	0x42470060

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0cc      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d90c      	bls.n	8003004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b65      	ldr	r3, [pc, #404]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	494d      	ldr	r1, [pc, #308]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e067      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4934      	ldr	r1, [pc, #208]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe f872 	bl	80011a0 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe f86e 	bl	80011a0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e032      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4916      	ldr	r1, [pc, #88]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	490e      	ldr	r1, [pc, #56]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314e:	f000 f821 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	490a      	ldr	r1, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fe9a 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	0800c324 	.word	0x0800c324
 800318c:	20000080 	.word	0x20000080
 8003190:	20000084 	.word	0x20000084

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	b5b0      	push	{r4, r5, r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800319a:	2100      	movs	r1, #0
 800319c:	6079      	str	r1, [r7, #4]
 800319e:	2100      	movs	r1, #0
 80031a0:	60f9      	str	r1, [r7, #12]
 80031a2:	2100      	movs	r1, #0
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031a6:	2100      	movs	r1, #0
 80031a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031aa:	4952      	ldr	r1, [pc, #328]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80031ac:	6889      	ldr	r1, [r1, #8]
 80031ae:	f001 010c 	and.w	r1, r1, #12
 80031b2:	2908      	cmp	r1, #8
 80031b4:	d00d      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80031b6:	2908      	cmp	r1, #8
 80031b8:	f200 8094 	bhi.w	80032e4 <HAL_RCC_GetSysClockFreq+0x150>
 80031bc:	2900      	cmp	r1, #0
 80031be:	d002      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x32>
 80031c0:	2904      	cmp	r1, #4
 80031c2:	d003      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x38>
 80031c4:	e08e      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c6:	4b4c      	ldr	r3, [pc, #304]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80031c8:	60bb      	str	r3, [r7, #8]
       break;
 80031ca:	e08e      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031cc:	4b4b      	ldr	r3, [pc, #300]	; (80032fc <HAL_RCC_GetSysClockFreq+0x168>)
 80031ce:	60bb      	str	r3, [r7, #8]
      break;
 80031d0:	e08b      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d2:	4948      	ldr	r1, [pc, #288]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80031d4:	6849      	ldr	r1, [r1, #4]
 80031d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80031da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031dc:	4945      	ldr	r1, [pc, #276]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80031de:	6849      	ldr	r1, [r1, #4]
 80031e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d024      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e8:	4942      	ldr	r1, [pc, #264]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80031ea:	6849      	ldr	r1, [r1, #4]
 80031ec:	0989      	lsrs	r1, r1, #6
 80031ee:	4608      	mov	r0, r1
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80031f8:	f04f 0500 	mov.w	r5, #0
 80031fc:	ea00 0204 	and.w	r2, r0, r4
 8003200:	ea01 0305 	and.w	r3, r1, r5
 8003204:	493d      	ldr	r1, [pc, #244]	; (80032fc <HAL_RCC_GetSysClockFreq+0x168>)
 8003206:	fb01 f003 	mul.w	r0, r1, r3
 800320a:	2100      	movs	r1, #0
 800320c:	fb01 f102 	mul.w	r1, r1, r2
 8003210:	1844      	adds	r4, r0, r1
 8003212:	493a      	ldr	r1, [pc, #232]	; (80032fc <HAL_RCC_GetSysClockFreq+0x168>)
 8003214:	fba2 0101 	umull	r0, r1, r2, r1
 8003218:	1863      	adds	r3, r4, r1
 800321a:	4619      	mov	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	461a      	mov	r2, r3
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	f7fd f82c 	bl	8000280 <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4613      	mov	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e04a      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003232:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	461a      	mov	r2, r3
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	ea02 0400 	and.w	r4, r2, r0
 800324a:	ea03 0501 	and.w	r5, r3, r1
 800324e:	4620      	mov	r0, r4
 8003250:	4629      	mov	r1, r5
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	014b      	lsls	r3, r1, #5
 800325c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003260:	0142      	lsls	r2, r0, #5
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	1b00      	subs	r0, r0, r4
 8003268:	eb61 0105 	sbc.w	r1, r1, r5
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	018b      	lsls	r3, r1, #6
 8003276:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800327a:	0182      	lsls	r2, r0, #6
 800327c:	1a12      	subs	r2, r2, r0
 800327e:	eb63 0301 	sbc.w	r3, r3, r1
 8003282:	f04f 0000 	mov.w	r0, #0
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	00d9      	lsls	r1, r3, #3
 800328c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003290:	00d0      	lsls	r0, r2, #3
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	1912      	adds	r2, r2, r4
 8003298:	eb45 0303 	adc.w	r3, r5, r3
 800329c:	f04f 0000 	mov.w	r0, #0
 80032a0:	f04f 0100 	mov.w	r1, #0
 80032a4:	0299      	lsls	r1, r3, #10
 80032a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032aa:	0290      	lsls	r0, r2, #10
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	f7fc ffe0 	bl	8000280 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4613      	mov	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	3301      	adds	r3, #1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	60bb      	str	r3, [r7, #8]
      break;
 80032e2:	e002      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80032e6:	60bb      	str	r3, [r7, #8]
      break;
 80032e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ea:	68bb      	ldr	r3, [r7, #8]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bdb0      	pop	{r4, r5, r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	00b71b00 	.word	0x00b71b00

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000080 	.word	0x20000080

08003318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0b5b      	lsrs	r3, r3, #13
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	; (800333c <HAL_RCC_GetPCLK2Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	0800c334 	.word	0x0800c334

08003340 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	220f      	movs	r2, #15
 800334e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_GetClockConfig+0x5c>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0203 	and.w	r2, r3, #3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <HAL_RCC_GetClockConfig+0x5c>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_RCC_GetClockConfig+0x5c>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_GetClockConfig+0x5c>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	08db      	lsrs	r3, r3, #3
 800337a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_RCC_GetClockConfig+0x60>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0207 	and.w	r2, r3, #7
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	601a      	str	r2, [r3, #0]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40023c00 	.word	0x40023c00

080033a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e041      	b.n	800343a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f839 	bl	8003442 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f000 f9d8 	bl	8003798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d001      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e04e      	b.n	800350e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a23      	ldr	r2, [pc, #140]	; (800351c <HAL_TIM_Base_Start_IT+0xc4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d022      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349a:	d01d      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <HAL_TIM_Base_Start_IT+0xc8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d018      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <HAL_TIM_Base_Start_IT+0xcc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_TIM_Base_Start_IT+0xd0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_TIM_Base_Start_IT+0xd4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d009      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_TIM_Base_Start_IT+0xd8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_TIM_Base_Start_IT+0xdc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d111      	bne.n	80034fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d010      	beq.n	800350c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fa:	e007      	b.n	800350c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40010000 	.word	0x40010000
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800
 8003528:	40000c00 	.word	0x40000c00
 800352c:	40010400 	.word	0x40010400
 8003530:	40014000 	.word	0x40014000
 8003534:	40001800 	.word	0x40001800

08003538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0202 	mvn.w	r2, #2
 8003564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8ee 	bl	800375c <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8e0 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8f1 	bl	8003770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d122      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d11b      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0204 	mvn.w	r2, #4
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8c4 	bl	800375c <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8b6 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8c7 	bl	8003770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d122      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d11b      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0208 	mvn.w	r2, #8
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2204      	movs	r2, #4
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f89a 	bl	800375c <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f88c 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f89d 	bl	8003770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b10      	cmp	r3, #16
 8003648:	d122      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	d11b      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0210 	mvn.w	r2, #16
 8003660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2208      	movs	r2, #8
 8003666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f870 	bl	800375c <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f862 	bl	8003748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f873 	bl	8003770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0201 	mvn.w	r2, #1
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fbb2 	bl	8000e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f902 	bl	80038ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b40      	cmp	r3, #64	; 0x40
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	d107      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f838 	bl	8003784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b20      	cmp	r3, #32
 8003720:	d10e      	bne.n	8003740 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b20      	cmp	r3, #32
 800372e:	d107      	bne.n	8003740 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0220 	mvn.w	r2, #32
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8cc 	bl	80038d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a40      	ldr	r2, [pc, #256]	; (80038ac <TIM_Base_SetConfig+0x114>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d00f      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3d      	ldr	r2, [pc, #244]	; (80038b0 <TIM_Base_SetConfig+0x118>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00b      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a3c      	ldr	r2, [pc, #240]	; (80038b4 <TIM_Base_SetConfig+0x11c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a3b      	ldr	r2, [pc, #236]	; (80038b8 <TIM_Base_SetConfig+0x120>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a3a      	ldr	r2, [pc, #232]	; (80038bc <TIM_Base_SetConfig+0x124>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d108      	bne.n	80037ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <TIM_Base_SetConfig+0x114>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02b      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f8:	d027      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a2c      	ldr	r2, [pc, #176]	; (80038b0 <TIM_Base_SetConfig+0x118>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d023      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <TIM_Base_SetConfig+0x11c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01f      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <TIM_Base_SetConfig+0x120>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01b      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a29      	ldr	r2, [pc, #164]	; (80038bc <TIM_Base_SetConfig+0x124>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d017      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a28      	ldr	r2, [pc, #160]	; (80038c0 <TIM_Base_SetConfig+0x128>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <TIM_Base_SetConfig+0x12c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00f      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a26      	ldr	r2, [pc, #152]	; (80038c8 <TIM_Base_SetConfig+0x130>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00b      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a25      	ldr	r2, [pc, #148]	; (80038cc <TIM_Base_SetConfig+0x134>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a24      	ldr	r2, [pc, #144]	; (80038d0 <TIM_Base_SetConfig+0x138>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d003      	beq.n	800384a <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a23      	ldr	r2, [pc, #140]	; (80038d4 <TIM_Base_SetConfig+0x13c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d108      	bne.n	800385c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <TIM_Base_SetConfig+0x114>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_Base_SetConfig+0xf8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a0c      	ldr	r2, [pc, #48]	; (80038bc <TIM_Base_SetConfig+0x124>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d103      	bne.n	8003898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	615a      	str	r2, [r3, #20]
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40010000 	.word	0x40010000
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40000800 	.word	0x40000800
 80038b8:	40000c00 	.word	0x40000c00
 80038bc:	40010400 	.word	0x40010400
 80038c0:	40014000 	.word	0x40014000
 80038c4:	40014400 	.word	0x40014400
 80038c8:	40014800 	.word	0x40014800
 80038cc:	40001800 	.word	0x40001800
 80038d0:	40001c00 	.word	0x40001c00
 80038d4:	40002000 	.word	0x40002000

080038d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003900:	b084      	sub	sp, #16
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	f107 001c 	add.w	r0, r7, #28
 800390e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	2b01      	cmp	r3, #1
 8003916:	d122      	bne.n	800395e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800392c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d105      	bne.n	8003952 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f001 fb1c 	bl	8004f90 <USB_CoreReset>
 8003958:	4603      	mov	r3, r0
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	e01a      	b.n	8003994 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f001 fb10 	bl	8004f90 <USB_CoreReset>
 8003970:	4603      	mov	r3, r0
 8003972:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
 8003986:	e005      	b.n	8003994 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10b      	bne.n	80039b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f043 0206 	orr.w	r2, r3, #6
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039be:	b004      	add	sp, #16
 80039c0:	4770      	bx	lr
	...

080039c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d165      	bne.n	8003aa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4a41      	ldr	r2, [pc, #260]	; (8003ae0 <USB_SetTurnaroundTime+0x11c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d906      	bls.n	80039ee <USB_SetTurnaroundTime+0x2a>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4a40      	ldr	r2, [pc, #256]	; (8003ae4 <USB_SetTurnaroundTime+0x120>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d202      	bcs.n	80039ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80039e8:	230f      	movs	r3, #15
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	e062      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4a3c      	ldr	r2, [pc, #240]	; (8003ae4 <USB_SetTurnaroundTime+0x120>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d306      	bcc.n	8003a04 <USB_SetTurnaroundTime+0x40>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4a3b      	ldr	r2, [pc, #236]	; (8003ae8 <USB_SetTurnaroundTime+0x124>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d202      	bcs.n	8003a04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80039fe:	230e      	movs	r3, #14
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e057      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4a38      	ldr	r2, [pc, #224]	; (8003ae8 <USB_SetTurnaroundTime+0x124>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d306      	bcc.n	8003a1a <USB_SetTurnaroundTime+0x56>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4a37      	ldr	r2, [pc, #220]	; (8003aec <USB_SetTurnaroundTime+0x128>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d202      	bcs.n	8003a1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a14:	230d      	movs	r3, #13
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e04c      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4a33      	ldr	r2, [pc, #204]	; (8003aec <USB_SetTurnaroundTime+0x128>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d306      	bcc.n	8003a30 <USB_SetTurnaroundTime+0x6c>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4a32      	ldr	r2, [pc, #200]	; (8003af0 <USB_SetTurnaroundTime+0x12c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d802      	bhi.n	8003a30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a2a:	230c      	movs	r3, #12
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e041      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4a2f      	ldr	r2, [pc, #188]	; (8003af0 <USB_SetTurnaroundTime+0x12c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d906      	bls.n	8003a46 <USB_SetTurnaroundTime+0x82>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4a2e      	ldr	r2, [pc, #184]	; (8003af4 <USB_SetTurnaroundTime+0x130>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d802      	bhi.n	8003a46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a40:	230b      	movs	r3, #11
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e036      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4a2a      	ldr	r2, [pc, #168]	; (8003af4 <USB_SetTurnaroundTime+0x130>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d906      	bls.n	8003a5c <USB_SetTurnaroundTime+0x98>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4a29      	ldr	r2, [pc, #164]	; (8003af8 <USB_SetTurnaroundTime+0x134>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d802      	bhi.n	8003a5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003a56:	230a      	movs	r3, #10
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e02b      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4a26      	ldr	r2, [pc, #152]	; (8003af8 <USB_SetTurnaroundTime+0x134>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d906      	bls.n	8003a72 <USB_SetTurnaroundTime+0xae>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4a25      	ldr	r2, [pc, #148]	; (8003afc <USB_SetTurnaroundTime+0x138>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d202      	bcs.n	8003a72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a6c:	2309      	movs	r3, #9
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e020      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4a21      	ldr	r2, [pc, #132]	; (8003afc <USB_SetTurnaroundTime+0x138>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d306      	bcc.n	8003a88 <USB_SetTurnaroundTime+0xc4>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4a20      	ldr	r2, [pc, #128]	; (8003b00 <USB_SetTurnaroundTime+0x13c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d802      	bhi.n	8003a88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003a82:	2308      	movs	r3, #8
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e015      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <USB_SetTurnaroundTime+0x13c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d906      	bls.n	8003a9e <USB_SetTurnaroundTime+0xda>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <USB_SetTurnaroundTime+0x140>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d202      	bcs.n	8003a9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a98:	2307      	movs	r3, #7
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e00a      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a9e:	2306      	movs	r3, #6
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e007      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003aaa:	2309      	movs	r3, #9
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	e001      	b.n	8003ab4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ab0:	2309      	movs	r3, #9
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	029b      	lsls	r3, r3, #10
 8003ac8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	00d8acbf 	.word	0x00d8acbf
 8003ae4:	00e4e1c0 	.word	0x00e4e1c0
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	01067380 	.word	0x01067380
 8003af0:	011a499f 	.word	0x011a499f
 8003af4:	01312cff 	.word	0x01312cff
 8003af8:	014ca43f 	.word	0x014ca43f
 8003afc:	016e3600 	.word	0x016e3600
 8003b00:	01a6ab1f 	.word	0x01a6ab1f
 8003b04:	01e84800 	.word	0x01e84800

08003b08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f043 0201 	orr.w	r2, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d115      	bne.n	8003b9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f7fd fb1c 	bl	80011b8 <HAL_Delay>
      ms++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3301      	adds	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f001 f972 	bl	8004e70 <USB_GetMode>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d01e      	beq.n	8003bd0 <USB_SetCurrentMode+0x84>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b31      	cmp	r3, #49	; 0x31
 8003b96:	d9f0      	bls.n	8003b7a <USB_SetCurrentMode+0x2e>
 8003b98:	e01a      	b.n	8003bd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d115      	bne.n	8003bcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bac:	2001      	movs	r0, #1
 8003bae:	f7fd fb03 	bl	80011b8 <HAL_Delay>
      ms++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f001 f959 	bl	8004e70 <USB_GetMode>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <USB_SetCurrentMode+0x84>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b31      	cmp	r3, #49	; 0x31
 8003bc8:	d9f0      	bls.n	8003bac <USB_SetCurrentMode+0x60>
 8003bca:	e001      	b.n	8003bd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e005      	b.n	8003bdc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b32      	cmp	r3, #50	; 0x32
 8003bd4:	d101      	bne.n	8003bda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003be4:	b084      	sub	sp, #16
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	e009      	b.n	8003c18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3340      	adds	r3, #64	; 0x40
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3301      	adds	r3, #1
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0e      	cmp	r3, #14
 8003c1c:	d9f2      	bls.n	8003c04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d11c      	bne.n	8003c5e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c32:	f043 0302 	orr.w	r3, r3, #2
 8003c36:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8003c5c:	e00b      	b.n	8003c76 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2300      	movs	r3, #0
 8003c80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c88:	4619      	mov	r1, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c90:	461a      	mov	r2, r3
 8003c92:	680b      	ldr	r3, [r1, #0]
 8003c94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10c      	bne.n	8003cb6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f945 	bl	8003f34 <USB_SetDevSpeed>
 8003caa:	e008      	b.n	8003cbe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cac:	2101      	movs	r1, #1
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f940 	bl	8003f34 <USB_SetDevSpeed>
 8003cb4:	e003      	b.n	8003cbe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f93b 	bl	8003f34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cbe:	2110      	movs	r1, #16
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f8f3 	bl	8003eac <USB_FlushTxFifo>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f90f 	bl	8003ef4 <USB_FlushRxFifo>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2300      	movs	r3, #0
 8003cea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2300      	movs	r3, #0
 8003d02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	e043      	b.n	8003d92 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d20:	d118      	bne.n	8003d54 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d34:	461a      	mov	r2, r3
 8003d36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	e013      	b.n	8003d66 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e008      	b.n	8003d66 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d60:	461a      	mov	r2, r3
 8003d62:	2300      	movs	r3, #0
 8003d64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d72:	461a      	mov	r2, r3
 8003d74:	2300      	movs	r3, #0
 8003d76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	461a      	mov	r2, r3
 8003d86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d3b7      	bcc.n	8003d0a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e043      	b.n	8003e28 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db6:	d118      	bne.n	8003dea <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e013      	b.n	8003dfc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de0:	461a      	mov	r2, r3
 8003de2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	e008      	b.n	8003dfc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	461a      	mov	r2, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3301      	adds	r3, #1
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3b7      	bcc.n	8003da0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f043 0210 	orr.w	r2, r3, #16
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <USB_DevInit+0x2c4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f043 0208 	orr.w	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ea4:	b004      	add	sp, #16
 8003ea6:	4770      	bx	lr
 8003ea8:	803c3800 	.word	0x803c3800

08003eac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	019b      	lsls	r3, r3, #6
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <USB_FlushTxFifo+0x44>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e006      	b.n	8003ee4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d0f1      	beq.n	8003ec6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	00030d40 	.word	0x00030d40

08003ef4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2210      	movs	r2, #16
 8003f04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <USB_FlushRxFifo+0x3c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e006      	b.n	8003f24 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d0f1      	beq.n	8003f06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	00030d40 	.word	0x00030d40

08003f34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b087      	sub	sp, #28
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0306 	and.w	r3, r3, #6
 8003f7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
 8003f8a:	e00a      	b.n	8003fa2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d002      	beq.n	8003f98 <USB_GetDevSpeed+0x32>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b06      	cmp	r3, #6
 8003f96:	d102      	bne.n	8003f9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	75fb      	strb	r3, [r7, #23]
 8003f9c:	e001      	b.n	8003fa2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f9e:	230f      	movs	r3, #15
 8003fa0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d13a      	bne.n	8004042 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	2101      	movs	r1, #1
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d155      	bne.n	80040b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	78db      	ldrb	r3, [r3, #3]
 800401e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004020:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	059b      	lsls	r3, r3, #22
 8004026:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004028:	4313      	orrs	r3, r2
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e036      	b.n	80040b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	2101      	movs	r1, #1
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004060:	4313      	orrs	r3, r2
 8004062:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d11a      	bne.n	80040b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	78db      	ldrb	r3, [r3, #3]
 8004094:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004096:	430b      	orrs	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	0151      	lsls	r1, r2, #5
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	440a      	add	r2, r1
 80040a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d161      	bne.n	80041a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f2:	d11f      	bne.n	8004134 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004112:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004132:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	b29b      	uxth	r3, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004154:	4013      	ands	r3, r2
 8004156:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	2101      	movs	r1, #1
 800416a:	fa01 f303 	lsl.w	r3, r1, r3
 800416e:	b29b      	uxth	r3, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004178:	4013      	ands	r3, r2
 800417a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	0159      	lsls	r1, r3, #5
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	440b      	add	r3, r1
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	4619      	mov	r1, r3
 8004198:	4b35      	ldr	r3, [pc, #212]	; (8004270 <USB_DeactivateEndpoint+0x1b0>)
 800419a:	4013      	ands	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
 800419e:	e060      	b.n	8004262 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041b6:	d11f      	bne.n	80041f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	2101      	movs	r1, #1
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	43db      	mvns	r3, r3
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004218:	4013      	ands	r3, r2
 800421a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	2101      	movs	r1, #1
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	041b      	lsls	r3, r3, #16
 8004234:	43db      	mvns	r3, r3
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800423c:	4013      	ands	r3, r2
 800423e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	0159      	lsls	r1, r3, #5
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	440b      	add	r3, r1
 8004256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425a:	4619      	mov	r1, r3
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <USB_DeactivateEndpoint+0x1b4>)
 800425e:	4013      	ands	r3, r2
 8004260:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	ec337800 	.word	0xec337800
 8004274:	eff37800 	.word	0xeff37800

08004278 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	2b01      	cmp	r3, #1
 8004296:	f040 815c 	bne.w	8004552 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d132      	bne.n	8004308 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004300:	0cdb      	lsrs	r3, r3, #19
 8004302:	04db      	lsls	r3, r3, #19
 8004304:	6113      	str	r3, [r2, #16]
 8004306:	e074      	b.n	80043f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	0151      	lsls	r1, r2, #5
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	440a      	add	r2, r1
 800431e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004322:	0cdb      	lsrs	r3, r3, #19
 8004324:	04db      	lsls	r3, r3, #19
 8004326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	440a      	add	r2, r1
 800433e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004342:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004346:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800434a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	6959      	ldr	r1, [r3, #20]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	440b      	add	r3, r1
 8004364:	1e59      	subs	r1, r3, #1
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	fbb1 f3f3 	udiv	r3, r1, r3
 800436e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004370:	4b9d      	ldr	r3, [pc, #628]	; (80045e8 <USB_EPStartXfer+0x370>)
 8004372:	400b      	ands	r3, r1
 8004374:	69b9      	ldr	r1, [r7, #24]
 8004376:	0148      	lsls	r0, r1, #5
 8004378:	69f9      	ldr	r1, [r7, #28]
 800437a:	4401      	add	r1, r0
 800437c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439a:	69b9      	ldr	r1, [r7, #24]
 800439c:	0148      	lsls	r0, r1, #5
 800439e:	69f9      	ldr	r1, [r7, #28]
 80043a0:	4401      	add	r1, r0
 80043a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043a6:	4313      	orrs	r3, r2
 80043a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	78db      	ldrb	r3, [r3, #3]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d11f      	bne.n	80043f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	0151      	lsls	r1, r2, #5
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	440a      	add	r2, r1
 80043c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	0151      	lsls	r1, r2, #5
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	440a      	add	r2, r1
 80043e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d14b      	bne.n	8004490 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440c:	461a      	mov	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	78db      	ldrb	r3, [r3, #3]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d128      	bne.n	800446e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d110      	bne.n	800444e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	0151      	lsls	r1, r2, #5
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	440a      	add	r2, r1
 8004442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004446:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e00f      	b.n	800446e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	440a      	add	r2, r1
 8004464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	0151      	lsls	r1, r2, #5
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	440a      	add	r2, r1
 8004484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004488:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e12f      	b.n	80046f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	78db      	ldrb	r3, [r3, #3]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d015      	beq.n	80044e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8117 	beq.w	80046f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	69f9      	ldr	r1, [r7, #28]
 80044da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044de:	4313      	orrs	r3, r2
 80044e0:	634b      	str	r3, [r1, #52]	; 0x34
 80044e2:	e105      	b.n	80046f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d110      	bne.n	8004516 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	0151      	lsls	r1, r2, #5
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	440a      	add	r2, r1
 800450a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	e00f      	b.n	8004536 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004534:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	68d9      	ldr	r1, [r3, #12]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	b298      	uxth	r0, r3
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	4603      	mov	r3, r0
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fa2b 	bl	80049a6 <USB_WritePacket>
 8004550:	e0ce      	b.n	80046f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	0151      	lsls	r1, r2, #5
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	440a      	add	r2, r1
 8004568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800456c:	0cdb      	lsrs	r3, r3, #19
 800456e:	04db      	lsls	r3, r3, #19
 8004570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004590:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004594:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d126      	bne.n	80045ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	0148      	lsls	r0, r1, #5
 80045b8:	69f9      	ldr	r1, [r7, #28]
 80045ba:	4401      	add	r1, r0
 80045bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045c0:	4313      	orrs	r3, r2
 80045c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045e2:	6113      	str	r3, [r2, #16]
 80045e4:	e036      	b.n	8004654 <USB_EPStartXfer+0x3dc>
 80045e6:	bf00      	nop
 80045e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	695a      	ldr	r2, [r3, #20]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4413      	add	r3, r2
 80045f6:	1e5a      	subs	r2, r3, #1
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	8afb      	ldrh	r3, [r7, #22]
 8004612:	04d9      	lsls	r1, r3, #19
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <USB_EPStartXfer+0x484>)
 8004616:	400b      	ands	r3, r1
 8004618:	69b9      	ldr	r1, [r7, #24]
 800461a:	0148      	lsls	r0, r1, #5
 800461c:	69f9      	ldr	r1, [r7, #28]
 800461e:	4401      	add	r1, r0
 8004620:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	8af9      	ldrh	r1, [r7, #22]
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004644:	69b9      	ldr	r1, [r7, #24]
 8004646:	0148      	lsls	r0, r1, #5
 8004648:	69f9      	ldr	r1, [r7, #28]
 800464a:	4401      	add	r1, r0
 800464c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004650:	4313      	orrs	r3, r2
 8004652:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d10d      	bne.n	8004676 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	68d9      	ldr	r1, [r3, #12]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004672:	460a      	mov	r2, r1
 8004674:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	78db      	ldrb	r3, [r3, #3]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d128      	bne.n	80046d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d110      	bne.n	80046b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e00f      	b.n	80046d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	0151      	lsls	r1, r2, #5
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	440a      	add	r2, r1
 80046c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	1ff80000 	.word	0x1ff80000

08004700 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 80cd 	bne.w	80048bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d132      	bne.n	8004790 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800474c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800476c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	0151      	lsls	r1, r2, #5
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	440a      	add	r2, r1
 8004784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004788:	0cdb      	lsrs	r3, r3, #19
 800478a:	04db      	lsls	r3, r3, #19
 800478c:	6113      	str	r3, [r2, #16]
 800478e:	e04e      	b.n	800482e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047aa:	0cdb      	lsrs	r3, r3, #19
 80047ac:	04db      	lsls	r3, r3, #19
 80047ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d903      	bls.n	80047e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481e:	6939      	ldr	r1, [r7, #16]
 8004820:	0148      	lsls	r0, r1, #5
 8004822:	6979      	ldr	r1, [r7, #20]
 8004824:	4401      	add	r1, r0
 8004826:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800482a:	4313      	orrs	r3, r2
 800482c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d11e      	bne.n	8004872 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	e092      	b.n	8004998 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004890:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d07e      	beq.n	8004998 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	2101      	movs	r1, #1
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	6979      	ldr	r1, [r7, #20]
 80048b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b6:	4313      	orrs	r3, r2
 80048b8:	634b      	str	r3, [r1, #52]	; 0x34
 80048ba:	e06d      	b.n	8004998 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d6:	0cdb      	lsrs	r3, r3, #19
 80048d8:	04db      	lsls	r3, r3, #19
 80048da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800492a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800492e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004946:	6939      	ldr	r1, [r7, #16]
 8004948:	0148      	lsls	r0, r1, #5
 800494a:	6979      	ldr	r1, [r7, #20]
 800494c:	4401      	add	r1, r0
 800494e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004952:	4313      	orrs	r3, r2
 8004954:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10d      	bne.n	8004978 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	68d9      	ldr	r1, [r3, #12]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	460a      	mov	r2, r1
 8004976:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	440a      	add	r2, r1
 800498e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004996:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b089      	sub	sp, #36	; 0x24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	4611      	mov	r1, r2
 80049b2:	461a      	mov	r2, r3
 80049b4:	460b      	mov	r3, r1
 80049b6:	71fb      	strb	r3, [r7, #7]
 80049b8:	4613      	mov	r3, r2
 80049ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d123      	bne.n	8004a14 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049cc:	88bb      	ldrh	r3, [r7, #4]
 80049ce:	3303      	adds	r3, #3
 80049d0:	089b      	lsrs	r3, r3, #2
 80049d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	61bb      	str	r3, [r7, #24]
 80049d8:	e018      	b.n	8004a0c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	031a      	lsls	r2, r3, #12
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e6:	461a      	mov	r2, r3
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3301      	adds	r3, #1
 80049f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	3301      	adds	r3, #1
 80049f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	3301      	adds	r3, #1
 80049fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d3e2      	bcc.n	80049da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3724      	adds	r7, #36	; 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b08b      	sub	sp, #44	; 0x2c
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	623b      	str	r3, [r7, #32]
 8004a4c:	e014      	b.n	8004a78 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	3301      	adds	r3, #1
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	3301      	adds	r3, #1
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	3301      	adds	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	3301      	adds	r3, #1
 8004a76:	623b      	str	r3, [r7, #32]
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d3e6      	bcc.n	8004a4e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a80:	8bfb      	ldrh	r3, [r7, #30]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01e      	beq.n	8004ac4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a90:	461a      	mov	r2, r3
 8004a92:	f107 0310 	add.w	r3, r7, #16
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	701a      	strb	r2, [r3, #0]
      i++;
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ab8:	8bfb      	ldrh	r3, [r7, #30]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004abe:	8bfb      	ldrh	r3, [r7, #30]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1ea      	bne.n	8004a9a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	372c      	adds	r7, #44	; 0x2c
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d12c      	bne.n	8004b48 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	db12      	blt.n	8004b26 <USB_EPSetStall+0x54>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00f      	beq.n	8004b26 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	0151      	lsls	r1, r2, #5
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	440a      	add	r2, r1
 8004b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b24:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e02b      	b.n	8004ba0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	db12      	blt.n	8004b80 <USB_EPSetStall+0xae>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00f      	beq.n	8004b80 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b7e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d128      	bne.n	8004c1c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004be8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	78db      	ldrb	r3, [r3, #3]
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d003      	beq.n	8004bfa <USB_EPClearStall+0x4c>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	78db      	ldrb	r3, [r3, #3]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d138      	bne.n	8004c6c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e027      	b.n	8004c6c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	78db      	ldrb	r3, [r3, #3]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d003      	beq.n	8004c4c <USB_EPClearStall+0x9e>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	78db      	ldrb	r3, [r3, #3]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d10f      	bne.n	8004c6c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	0151      	lsls	r1, r2, #5
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	440a      	add	r2, r1
 8004c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c98:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c9c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ce0:	f023 0303 	bic.w	r3, r3, #3
 8004ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf4:	f023 0302 	bic.w	r3, r3, #2
 8004cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d36:	f043 0302 	orr.w	r3, r3, #2
 8004d3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d62:	68fb      	ldr	r3, [r7, #12]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4013      	ands	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	0c1b      	lsrs	r3, r3, #16
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	b29b      	uxth	r3, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	4013      	ands	r3, r2
 8004e04:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e06:	68bb      	ldr	r3, [r7, #8]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e36:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	01db      	lsls	r3, r3, #7
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e62:	68bb      	ldr	r3, [r7, #8]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004eaa:	f023 0307 	bic.w	r3, r3, #7
 8004eae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	460b      	mov	r3, r1
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	333c      	adds	r3, #60	; 0x3c
 8004eea:	3304      	adds	r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <USB_EP0_OutStart+0xb8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d90a      	bls.n	8004f0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f08:	d101      	bne.n	8004f0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e037      	b.n	8004f7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	2300      	movs	r3, #0
 8004f18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3c:	f043 0318 	orr.w	r3, r3, #24
 8004f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004f54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004f56:	7afb      	ldrb	r3, [r7, #11]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10f      	bne.n	8004f7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004f7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	4f54300a 	.word	0x4f54300a

08004f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <USB_CoreReset+0x60>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e01a      	b.n	8004fe2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	daf3      	bge.n	8004f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f043 0201 	orr.w	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <USB_CoreReset+0x60>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e006      	b.n	8004fe2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d0f1      	beq.n	8004fc4 <USB_CoreReset+0x34>

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	00030d40 	.word	0x00030d40

08004ff4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005000:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005004:	f005 fdb6 	bl	800ab74 <USBD_static_malloc>
 8005008:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005018:	2302      	movs	r3, #2
 800501a:	e066      	b.n	80050ea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	7c1b      	ldrb	r3, [r3, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d119      	bne.n	8005060 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800502c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005030:	2202      	movs	r2, #2
 8005032:	2181      	movs	r1, #129	; 0x81
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f005 fc7a 	bl	800a92e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005044:	2202      	movs	r2, #2
 8005046:	2101      	movs	r1, #1
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f005 fc70 	bl	800a92e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2210      	movs	r2, #16
 800505a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800505e:	e016      	b.n	800508e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005060:	2340      	movs	r3, #64	; 0x40
 8005062:	2202      	movs	r2, #2
 8005064:	2181      	movs	r1, #129	; 0x81
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f005 fc61 	bl	800a92e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005072:	2340      	movs	r3, #64	; 0x40
 8005074:	2202      	movs	r2, #2
 8005076:	2101      	movs	r1, #1
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f005 fc58 	bl	800a92e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2210      	movs	r2, #16
 800508a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800508e:	2308      	movs	r3, #8
 8005090:	2203      	movs	r2, #3
 8005092:	2182      	movs	r1, #130	; 0x82
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f005 fc4a 	bl	800a92e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7c1b      	ldrb	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d109      	bne.n	80050d8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ce:	2101      	movs	r1, #1
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f005 fd1b 	bl	800ab0c <USBD_LL_PrepareReceive>
 80050d6:	e007      	b.n	80050e8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050de:	2340      	movs	r3, #64	; 0x40
 80050e0:	2101      	movs	r1, #1
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f005 fd12 	bl	800ab0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80050fe:	2181      	movs	r1, #129	; 0x81
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f005 fc3a 	bl	800a97a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800510c:	2101      	movs	r1, #1
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f005 fc33 	bl	800a97a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800511c:	2182      	movs	r1, #130	; 0x82
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f005 fc2b 	bl	800a97a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00e      	beq.n	800515c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800514e:	4618      	mov	r0, r3
 8005150:	f005 fd1e 	bl	800ab90 <USBD_static_free>
    pdev->pClassData = NULL;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005178:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800518c:	2303      	movs	r3, #3
 800518e:	e0af      	b.n	80052f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005198:	2b00      	cmp	r3, #0
 800519a:	d03f      	beq.n	800521c <USBD_CDC_Setup+0xb4>
 800519c:	2b20      	cmp	r3, #32
 800519e:	f040 809f 	bne.w	80052e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	88db      	ldrh	r3, [r3, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d02e      	beq.n	8005208 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b25b      	sxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	da16      	bge.n	80051e2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80051c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	88d2      	ldrh	r2, [r2, #6]
 80051c6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	88db      	ldrh	r3, [r3, #6]
 80051cc:	2b07      	cmp	r3, #7
 80051ce:	bf28      	it	cs
 80051d0:	2307      	movcs	r3, #7
 80051d2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	89fa      	ldrh	r2, [r7, #14]
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f001 fb19 	bl	8006812 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80051e0:	e085      	b.n	80052ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	785a      	ldrb	r2, [r3, #1]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	88db      	ldrh	r3, [r3, #6]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80051f8:	6939      	ldr	r1, [r7, #16]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	88db      	ldrh	r3, [r3, #6]
 80051fe:	461a      	mov	r2, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 fb32 	bl	800686a <USBD_CtlPrepareRx>
      break;
 8005206:	e072      	b.n	80052ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	7850      	ldrb	r0, [r2, #1]
 8005214:	2200      	movs	r2, #0
 8005216:	6839      	ldr	r1, [r7, #0]
 8005218:	4798      	blx	r3
      break;
 800521a:	e068      	b.n	80052ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b0b      	cmp	r3, #11
 8005222:	d852      	bhi.n	80052ca <USBD_CDC_Setup+0x162>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <USBD_CDC_Setup+0xc4>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	0800525d 	.word	0x0800525d
 8005230:	080052d9 	.word	0x080052d9
 8005234:	080052cb 	.word	0x080052cb
 8005238:	080052cb 	.word	0x080052cb
 800523c:	080052cb 	.word	0x080052cb
 8005240:	080052cb 	.word	0x080052cb
 8005244:	080052cb 	.word	0x080052cb
 8005248:	080052cb 	.word	0x080052cb
 800524c:	080052cb 	.word	0x080052cb
 8005250:	080052cb 	.word	0x080052cb
 8005254:	08005287 	.word	0x08005287
 8005258:	080052b1 	.word	0x080052b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b03      	cmp	r3, #3
 8005266:	d107      	bne.n	8005278 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005268:	f107 030a 	add.w	r3, r7, #10
 800526c:	2202      	movs	r2, #2
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f001 face 	bl	8006812 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005276:	e032      	b.n	80052de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 fa58 	bl	8006730 <USBD_CtlError>
            ret = USBD_FAIL;
 8005280:	2303      	movs	r3, #3
 8005282:	75fb      	strb	r3, [r7, #23]
          break;
 8005284:	e02b      	b.n	80052de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b03      	cmp	r3, #3
 8005290:	d107      	bne.n	80052a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005292:	f107 030d 	add.w	r3, r7, #13
 8005296:	2201      	movs	r2, #1
 8005298:	4619      	mov	r1, r3
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f001 fab9 	bl	8006812 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052a0:	e01d      	b.n	80052de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 fa43 	bl	8006730 <USBD_CtlError>
            ret = USBD_FAIL;
 80052aa:	2303      	movs	r3, #3
 80052ac:	75fb      	strb	r3, [r7, #23]
          break;
 80052ae:	e016      	b.n	80052de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d00f      	beq.n	80052dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 fa36 	bl	8006730 <USBD_CtlError>
            ret = USBD_FAIL;
 80052c4:	2303      	movs	r3, #3
 80052c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052c8:	e008      	b.n	80052dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 fa2f 	bl	8006730 <USBD_CtlError>
          ret = USBD_FAIL;
 80052d2:	2303      	movs	r3, #3
 80052d4:	75fb      	strb	r3, [r7, #23]
          break;
 80052d6:	e002      	b.n	80052de <USBD_CDC_Setup+0x176>
          break;
 80052d8:	bf00      	nop
 80052da:	e008      	b.n	80052ee <USBD_CDC_Setup+0x186>
          break;
 80052dc:	bf00      	nop
      }
      break;
 80052de:	e006      	b.n	80052ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80052e0:	6839      	ldr	r1, [r7, #0]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 fa24 	bl	8006730 <USBD_CtlError>
      ret = USBD_FAIL;
 80052e8:	2303      	movs	r3, #3
 80052ea:	75fb      	strb	r3, [r7, #23]
      break;
 80052ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800530a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005316:	2303      	movs	r3, #3
 8005318:	e04f      	b.n	80053ba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005320:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005322:	78fa      	ldrb	r2, [r7, #3]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3318      	adds	r3, #24
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d029      	beq.n	800538c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	3318      	adds	r3, #24
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	78f9      	ldrb	r1, [r7, #3]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	460b      	mov	r3, r1
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	1a5b      	subs	r3, r3, r1
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4403      	add	r3, r0
 8005358:	3344      	adds	r3, #68	; 0x44
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005360:	fb03 f301 	mul.w	r3, r3, r1
 8005364:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005366:	2b00      	cmp	r3, #0
 8005368:	d110      	bne.n	800538c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3318      	adds	r3, #24
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800537e:	78f9      	ldrb	r1, [r7, #3]
 8005380:	2300      	movs	r3, #0
 8005382:	2200      	movs	r2, #0
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f005 fba0 	bl	800aaca <USBD_LL_Transmit>
 800538a:	e015      	b.n	80053b8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e015      	b.n	8005410 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f005 fbb0 	bl	800ab4e <USBD_LL_GetRxDataSize>
 80053ee:	4602      	mov	r2, r0
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800540a:	4611      	mov	r1, r2
 800540c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005426:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800542e:	2303      	movs	r3, #3
 8005430:	e01b      	b.n	800546a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d015      	beq.n	8005468 <USBD_CDC_EP0_RxReady+0x50>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005442:	2bff      	cmp	r3, #255	; 0xff
 8005444:	d010      	beq.n	8005468 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005454:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800545c:	b292      	uxth	r2, r2
 800545e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	22ff      	movs	r2, #255	; 0xff
 8005464:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2243      	movs	r2, #67	; 0x43
 8005480:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005482:	4b03      	ldr	r3, [pc, #12]	; (8005490 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000114 	.word	0x20000114

08005494 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2243      	movs	r2, #67	; 0x43
 80054a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80054a2:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	200000d0 	.word	0x200000d0

080054b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2243      	movs	r2, #67	; 0x43
 80054c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80054c2:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000158 	.word	0x20000158

080054d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	220a      	movs	r2, #10
 80054e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80054e2:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	2000008c 	.word	0x2000008c

080054f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005504:	2303      	movs	r3, #3
 8005506:	e004      	b.n	8005512 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005530:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005538:	2303      	movs	r3, #3
 800553a:	e008      	b.n	800554e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800556a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005572:	2303      	movs	r3, #3
 8005574:	e004      	b.n	8005580 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800559a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e01a      	b.n	80055e4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d114      	bne.n	80055e2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80055d6:	2181      	movs	r1, #129	; 0x81
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f005 fa76 	bl	800aaca <USBD_LL_Transmit>

    ret = USBD_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005606:	2303      	movs	r3, #3
 8005608:	e016      	b.n	8005638 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	7c1b      	ldrb	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800561c:	2101      	movs	r1, #1
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f005 fa74 	bl	800ab0c <USBD_LL_PrepareReceive>
 8005624:	e007      	b.n	8005636 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800562c:	2340      	movs	r3, #64	; 0x40
 800562e:	2101      	movs	r1, #1
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f005 fa6b 	bl	800ab0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	4613      	mov	r3, r2
 800564c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005654:	2303      	movs	r3, #3
 8005656:	e01f      	b.n	8005698 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	79fa      	ldrb	r2, [r7, #7]
 800568a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f005 f8e7 	bl	800a860 <USBD_LL_Init>
 8005692:	4603      	mov	r3, r0
 8005694:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e016      	b.n	80056e6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	f107 020e 	add.w	r2, r7, #14
 80056d8:	4610      	mov	r0, r2
 80056da:	4798      	blx	r3
 80056dc:	4602      	mov	r2, r0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f005 f8fe 	bl	800a8f8 <USBD_LL_Start>
 80056fc:	4603      	mov	r3, r0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005728:	2303      	movs	r3, #3
 800572a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	4611      	mov	r1, r2
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
 8005746:	4603      	mov	r3, r0
 8005748:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	4611      	mov	r1, r2
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
  }

  return USBD_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 ff90 	bl	80066bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d01a      	beq.n	80057f6 <USBD_LL_SetupStage+0x72>
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d822      	bhi.n	800580a <USBD_LL_SetupStage+0x86>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <USBD_LL_SetupStage+0x4a>
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d00a      	beq.n	80057e2 <USBD_LL_SetupStage+0x5e>
 80057cc:	e01d      	b.n	800580a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa62 	bl	8005ca0 <USBD_StdDevReq>
 80057dc:	4603      	mov	r3, r0
 80057de:	73fb      	strb	r3, [r7, #15]
      break;
 80057e0:	e020      	b.n	8005824 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fac6 	bl	8005d7c <USBD_StdItfReq>
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]
      break;
 80057f4:	e016      	b.n	8005824 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fb05 	bl	8005e0e <USBD_StdEPReq>
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
      break;
 8005808:	e00c      	b.n	8005824 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005810:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005814:	b2db      	uxtb	r3, r3
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f005 f8cd 	bl	800a9b8 <USBD_LL_StallEP>
 800581e:	4603      	mov	r3, r0
 8005820:	73fb      	strb	r3, [r7, #15]
      break;
 8005822:	bf00      	nop
  }

  return ret;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	460b      	mov	r3, r1
 8005838:	607a      	str	r2, [r7, #4]
 800583a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d138      	bne.n	80058b4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005848:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005850:	2b03      	cmp	r3, #3
 8005852:	d14a      	bne.n	80058ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	429a      	cmp	r2, r3
 800585e:	d913      	bls.n	8005888 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	1ad2      	subs	r2, r2, r3
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	4293      	cmp	r3, r2
 8005878:	bf28      	it	cs
 800587a:	4613      	movcs	r3, r2
 800587c:	461a      	mov	r2, r3
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f001 f80f 	bl	80068a4 <USBD_CtlContinueRx>
 8005886:	e030      	b.n	80058ea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b03      	cmp	r3, #3
 8005892:	d10b      	bne.n	80058ac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f001 f80a 	bl	80068c6 <USBD_CtlSendStatus>
 80058b2:	e01a      	b.n	80058ea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d114      	bne.n	80058ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00e      	beq.n	80058ea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	7afa      	ldrb	r2, [r7, #11]
 80058d6:	4611      	mov	r1, r2
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	4798      	blx	r3
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
 80058e8:	e000      	b.n	80058ec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	460b      	mov	r3, r1
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005902:	7afb      	ldrb	r3, [r7, #11]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d16b      	bne.n	80059e0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3314      	adds	r3, #20
 800590c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005914:	2b02      	cmp	r3, #2
 8005916:	d156      	bne.n	80059c6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	429a      	cmp	r2, r3
 8005922:	d914      	bls.n	800594e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	1ad2      	subs	r2, r2, r3
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	461a      	mov	r2, r3
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 ff84 	bl	8006848 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005940:	2300      	movs	r3, #0
 8005942:	2200      	movs	r2, #0
 8005944:	2100      	movs	r1, #0
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f005 f8e0 	bl	800ab0c <USBD_LL_PrepareReceive>
 800594c:	e03b      	b.n	80059c6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	429a      	cmp	r2, r3
 8005958:	d11c      	bne.n	8005994 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005962:	429a      	cmp	r2, r3
 8005964:	d316      	bcc.n	8005994 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005970:	429a      	cmp	r2, r3
 8005972:	d20f      	bcs.n	8005994 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005974:	2200      	movs	r2, #0
 8005976:	2100      	movs	r1, #0
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 ff65 	bl	8006848 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005986:	2300      	movs	r3, #0
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f005 f8bd 	bl	800ab0c <USBD_LL_PrepareReceive>
 8005992:	e018      	b.n	80059c6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b03      	cmp	r3, #3
 800599e:	d10b      	bne.n	80059b8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059b8:	2180      	movs	r1, #128	; 0x80
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f004 fffc 	bl	800a9b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 ff93 	bl	80068ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d122      	bne.n	8005a16 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff fe98 	bl	8005706 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80059de:	e01a      	b.n	8005a16 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d114      	bne.n	8005a16 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00e      	beq.n	8005a16 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	7afa      	ldrb	r2, [r7, #11]
 8005a02:	4611      	mov	r1, r2
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	4798      	blx	r3
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
 8005a14:	e000      	b.n	8005a18 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e02f      	b.n	8005ab4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6852      	ldr	r2, [r2, #4]
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	4611      	mov	r1, r2
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a7e:	2340      	movs	r3, #64	; 0x40
 8005a80:	2200      	movs	r2, #0
 8005a82:	2100      	movs	r1, #0
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f004 ff52 	bl	800a92e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2240      	movs	r2, #64	; 0x40
 8005a96:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a9a:	2340      	movs	r3, #64	; 0x40
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2180      	movs	r1, #128	; 0x80
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f004 ff44 	bl	800a92e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d106      	bne.n	8005b2a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e012      	b.n	8005b74 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d10b      	bne.n	8005b72 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e014      	b.n	8005bc0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d10d      	bne.n	8005bbe <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	78fa      	ldrb	r2, [r7, #3]
 8005bb8:	4611      	mov	r1, r2
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e014      	b.n	8005c0c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d10d      	bne.n	8005c0a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	78fa      	ldrb	r2, [r7, #3]
 8005c04:	4611      	mov	r1, r2
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d009      	beq.n	8005c58 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6852      	ldr	r2, [r2, #4]
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	4611      	mov	r1, r2
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
  }

  return USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b087      	sub	sp, #28
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	3301      	adds	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c80:	8a3b      	ldrh	r3, [r7, #16]
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	b21a      	sxth	r2, r3
 8005c86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	b21b      	sxth	r3, r3
 8005c8e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c90:	89fb      	ldrh	r3, [r7, #14]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cb6:	2b40      	cmp	r3, #64	; 0x40
 8005cb8:	d005      	beq.n	8005cc6 <USBD_StdDevReq+0x26>
 8005cba:	2b40      	cmp	r3, #64	; 0x40
 8005cbc:	d853      	bhi.n	8005d66 <USBD_StdDevReq+0xc6>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <USBD_StdDevReq+0x3a>
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d14f      	bne.n	8005d66 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4798      	blx	r3
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd8:	e04a      	b.n	8005d70 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	2b09      	cmp	r3, #9
 8005ce0:	d83b      	bhi.n	8005d5a <USBD_StdDevReq+0xba>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <USBD_StdDevReq+0x48>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d3d 	.word	0x08005d3d
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005d5b 	.word	0x08005d5b
 8005cf4:	08005d47 	.word	0x08005d47
 8005cf8:	08005d5b 	.word	0x08005d5b
 8005cfc:	08005d1b 	.word	0x08005d1b
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d5b 	.word	0x08005d5b
 8005d08:	08005d33 	.word	0x08005d33
 8005d0c:	08005d25 	.word	0x08005d25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f9de 	bl	80060d4 <USBD_GetDescriptor>
          break;
 8005d18:	e024      	b.n	8005d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb43 	bl	80063a8 <USBD_SetAddress>
          break;
 8005d22:	e01f      	b.n	8005d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fb82 	bl	8006430 <USBD_SetConfig>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]
          break;
 8005d30:	e018      	b.n	8005d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fc21 	bl	800657c <USBD_GetConfig>
          break;
 8005d3a:	e013      	b.n	8005d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fc52 	bl	80065e8 <USBD_GetStatus>
          break;
 8005d44:	e00e      	b.n	8005d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fc81 	bl	8006650 <USBD_SetFeature>
          break;
 8005d4e:	e009      	b.n	8005d64 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fc90 	bl	8006678 <USBD_ClrFeature>
          break;
 8005d58:	e004      	b.n	8005d64 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fce7 	bl	8006730 <USBD_CtlError>
          break;
 8005d62:	bf00      	nop
      }
      break;
 8005d64:	e004      	b.n	8005d70 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fce1 	bl	8006730 <USBD_CtlError>
      break;
 8005d6e:	bf00      	nop
  }

  return ret;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop

08005d7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	d005      	beq.n	8005da2 <USBD_StdItfReq+0x26>
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d82f      	bhi.n	8005dfa <USBD_StdItfReq+0x7e>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <USBD_StdItfReq+0x26>
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d12b      	bne.n	8005dfa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d81d      	bhi.n	8005dec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	889b      	ldrh	r3, [r3, #4]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d813      	bhi.n	8005de2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	88db      	ldrh	r3, [r3, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d110      	bne.n	8005df6 <USBD_StdItfReq+0x7a>
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10d      	bne.n	8005df6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fd73 	bl	80068c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005de0:	e009      	b.n	8005df6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fca3 	bl	8006730 <USBD_CtlError>
          break;
 8005dea:	e004      	b.n	8005df6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fc9e 	bl	8006730 <USBD_CtlError>
          break;
 8005df4:	e000      	b.n	8005df8 <USBD_StdItfReq+0x7c>
          break;
 8005df6:	bf00      	nop
      }
      break;
 8005df8:	e004      	b.n	8005e04 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fc97 	bl	8006730 <USBD_CtlError>
      break;
 8005e02:	bf00      	nop
  }

  return ret;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	889b      	ldrh	r3, [r3, #4]
 8005e20:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d007      	beq.n	8005e3e <USBD_StdEPReq+0x30>
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	f200 8145 	bhi.w	80060be <USBD_StdEPReq+0x2b0>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00c      	beq.n	8005e52 <USBD_StdEPReq+0x44>
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	f040 8140 	bne.w	80060be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	4798      	blx	r3
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e50:	e13a      	b.n	80060c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d007      	beq.n	8005e6a <USBD_StdEPReq+0x5c>
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	f300 8129 	bgt.w	80060b2 <USBD_StdEPReq+0x2a4>
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d07f      	beq.n	8005f64 <USBD_StdEPReq+0x156>
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d03c      	beq.n	8005ee2 <USBD_StdEPReq+0xd4>
 8005e68:	e123      	b.n	80060b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d002      	beq.n	8005e7c <USBD_StdEPReq+0x6e>
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d016      	beq.n	8005ea8 <USBD_StdEPReq+0x9a>
 8005e7a:	e02c      	b.n	8005ed6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <USBD_StdEPReq+0x90>
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	2b80      	cmp	r3, #128	; 0x80
 8005e86:	d00a      	beq.n	8005e9e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f004 fd93 	bl	800a9b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e92:	2180      	movs	r1, #128	; 0x80
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f004 fd8f 	bl	800a9b8 <USBD_LL_StallEP>
 8005e9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e9c:	e020      	b.n	8005ee0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fc45 	bl	8006730 <USBD_CtlError>
              break;
 8005ea6:	e01b      	b.n	8005ee0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	885b      	ldrh	r3, [r3, #2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10e      	bne.n	8005ece <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005eb0:	7bbb      	ldrb	r3, [r7, #14]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <USBD_StdEPReq+0xc0>
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d008      	beq.n	8005ece <USBD_StdEPReq+0xc0>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	88db      	ldrh	r3, [r3, #6]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ec4:	7bbb      	ldrb	r3, [r7, #14]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f004 fd75 	bl	800a9b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fcf9 	bl	80068c6 <USBD_CtlSendStatus>

              break;
 8005ed4:	e004      	b.n	8005ee0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fc29 	bl	8006730 <USBD_CtlError>
              break;
 8005ede:	bf00      	nop
          }
          break;
 8005ee0:	e0ec      	b.n	80060bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d002      	beq.n	8005ef4 <USBD_StdEPReq+0xe6>
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d016      	beq.n	8005f20 <USBD_StdEPReq+0x112>
 8005ef2:	e030      	b.n	8005f56 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ef4:	7bbb      	ldrb	r3, [r7, #14]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00d      	beq.n	8005f16 <USBD_StdEPReq+0x108>
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d00a      	beq.n	8005f16 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f004 fd57 	bl	800a9b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f0a:	2180      	movs	r1, #128	; 0x80
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f004 fd53 	bl	800a9b8 <USBD_LL_StallEP>
 8005f12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f14:	e025      	b.n	8005f62 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fc09 	bl	8006730 <USBD_CtlError>
              break;
 8005f1e:	e020      	b.n	8005f62 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	885b      	ldrh	r3, [r3, #2]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11b      	bne.n	8005f60 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f28:	7bbb      	ldrb	r3, [r7, #14]
 8005f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d004      	beq.n	8005f3c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f004 fd5d 	bl	800a9f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fcc2 	bl	80068c6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005f54:	e004      	b.n	8005f60 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fbe9 	bl	8006730 <USBD_CtlError>
              break;
 8005f5e:	e000      	b.n	8005f62 <USBD_StdEPReq+0x154>
              break;
 8005f60:	bf00      	nop
          }
          break;
 8005f62:	e0ab      	b.n	80060bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d002      	beq.n	8005f76 <USBD_StdEPReq+0x168>
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d032      	beq.n	8005fda <USBD_StdEPReq+0x1cc>
 8005f74:	e097      	b.n	80060a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d007      	beq.n	8005f8c <USBD_StdEPReq+0x17e>
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d004      	beq.n	8005f8c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fbd3 	bl	8006730 <USBD_CtlError>
                break;
 8005f8a:	e091      	b.n	80060b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da0b      	bge.n	8005fac <USBD_StdEPReq+0x19e>
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	3310      	adds	r3, #16
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3304      	adds	r3, #4
 8005faa:	e00b      	b.n	8005fc4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
 8005fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fc1d 	bl	8006812 <USBD_CtlSendData>
              break;
 8005fd8:	e06a      	b.n	80060b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005fda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	da11      	bge.n	8006006 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	f003 020f 	and.w	r2, r3, #15
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3324      	adds	r3, #36	; 0x24
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d117      	bne.n	800602c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fb96 	bl	8006730 <USBD_CtlError>
                  break;
 8006004:	e054      	b.n	80060b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	f003 020f 	and.w	r2, r3, #15
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fb83 	bl	8006730 <USBD_CtlError>
                  break;
 800602a:	e041      	b.n	80060b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800602c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006030:	2b00      	cmp	r3, #0
 8006032:	da0b      	bge.n	800604c <USBD_StdEPReq+0x23e>
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	3310      	adds	r3, #16
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	4413      	add	r3, r2
 8006048:	3304      	adds	r3, #4
 800604a:	e00b      	b.n	8006064 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	3304      	adds	r3, #4
 8006064:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <USBD_StdEPReq+0x264>
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	2b80      	cmp	r3, #128	; 0x80
 8006070:	d103      	bne.n	800607a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e00e      	b.n	8006098 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f004 fcd8 	bl	800aa34 <USBD_LL_IsStallEP>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e002      	b.n	8006098 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2202      	movs	r2, #2
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fbb7 	bl	8006812 <USBD_CtlSendData>
              break;
 80060a4:	e004      	b.n	80060b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fb41 	bl	8006730 <USBD_CtlError>
              break;
 80060ae:	bf00      	nop
          }
          break;
 80060b0:	e004      	b.n	80060bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80060b2:	6839      	ldr	r1, [r7, #0]
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fb3b 	bl	8006730 <USBD_CtlError>
          break;
 80060ba:	bf00      	nop
      }
      break;
 80060bc:	e004      	b.n	80060c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fb35 	bl	8006730 <USBD_CtlError>
      break;
 80060c6:	bf00      	nop
  }

  return ret;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	885b      	ldrh	r3, [r3, #2]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	2b06      	cmp	r3, #6
 80060f6:	f200 8128 	bhi.w	800634a <USBD_GetDescriptor+0x276>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <USBD_GetDescriptor+0x2c>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	0800611d 	.word	0x0800611d
 8006104:	08006135 	.word	0x08006135
 8006108:	08006175 	.word	0x08006175
 800610c:	0800634b 	.word	0x0800634b
 8006110:	0800634b 	.word	0x0800634b
 8006114:	080062eb 	.word	0x080062eb
 8006118:	08006317 	.word	0x08006317
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	7c12      	ldrb	r2, [r2, #16]
 8006128:	f107 0108 	add.w	r1, r7, #8
 800612c:	4610      	mov	r0, r2
 800612e:	4798      	blx	r3
 8006130:	60f8      	str	r0, [r7, #12]
      break;
 8006132:	e112      	b.n	800635a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	7c1b      	ldrb	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10d      	bne.n	8006158 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006144:	f107 0208 	add.w	r2, r7, #8
 8006148:	4610      	mov	r0, r2
 800614a:	4798      	blx	r3
 800614c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	2202      	movs	r2, #2
 8006154:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006156:	e100      	b.n	800635a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	f107 0208 	add.w	r2, r7, #8
 8006164:	4610      	mov	r0, r2
 8006166:	4798      	blx	r3
 8006168:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3301      	adds	r3, #1
 800616e:	2202      	movs	r2, #2
 8006170:	701a      	strb	r2, [r3, #0]
      break;
 8006172:	e0f2      	b.n	800635a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	885b      	ldrh	r3, [r3, #2]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b05      	cmp	r3, #5
 800617c:	f200 80ac 	bhi.w	80062d8 <USBD_GetDescriptor+0x204>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <USBD_GetDescriptor+0xb4>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061a1 	.word	0x080061a1
 800618c:	080061d5 	.word	0x080061d5
 8006190:	08006209 	.word	0x08006209
 8006194:	0800623d 	.word	0x0800623d
 8006198:	08006271 	.word	0x08006271
 800619c:	080062a5 	.word	0x080062a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	7c12      	ldrb	r2, [r2, #16]
 80061b8:	f107 0108 	add.w	r1, r7, #8
 80061bc:	4610      	mov	r0, r2
 80061be:	4798      	blx	r3
 80061c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061c2:	e091      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fab2 	bl	8006730 <USBD_CtlError>
            err++;
 80061cc:	7afb      	ldrb	r3, [r7, #11]
 80061ce:	3301      	adds	r3, #1
 80061d0:	72fb      	strb	r3, [r7, #11]
          break;
 80061d2:	e089      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	7c12      	ldrb	r2, [r2, #16]
 80061ec:	f107 0108 	add.w	r1, r7, #8
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
 80061f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061f6:	e077      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa98 	bl	8006730 <USBD_CtlError>
            err++;
 8006200:	7afb      	ldrb	r3, [r7, #11]
 8006202:	3301      	adds	r3, #1
 8006204:	72fb      	strb	r3, [r7, #11]
          break;
 8006206:	e06f      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	7c12      	ldrb	r2, [r2, #16]
 8006220:	f107 0108 	add.w	r1, r7, #8
 8006224:	4610      	mov	r0, r2
 8006226:	4798      	blx	r3
 8006228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800622a:	e05d      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa7e 	bl	8006730 <USBD_CtlError>
            err++;
 8006234:	7afb      	ldrb	r3, [r7, #11]
 8006236:	3301      	adds	r3, #1
 8006238:	72fb      	strb	r3, [r7, #11]
          break;
 800623a:	e055      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00b      	beq.n	8006260 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	7c12      	ldrb	r2, [r2, #16]
 8006254:	f107 0108 	add.w	r1, r7, #8
 8006258:	4610      	mov	r0, r2
 800625a:	4798      	blx	r3
 800625c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800625e:	e043      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa64 	bl	8006730 <USBD_CtlError>
            err++;
 8006268:	7afb      	ldrb	r3, [r7, #11]
 800626a:	3301      	adds	r3, #1
 800626c:	72fb      	strb	r3, [r7, #11]
          break;
 800626e:	e03b      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	7c12      	ldrb	r2, [r2, #16]
 8006288:	f107 0108 	add.w	r1, r7, #8
 800628c:	4610      	mov	r0, r2
 800628e:	4798      	blx	r3
 8006290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006292:	e029      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa4a 	bl	8006730 <USBD_CtlError>
            err++;
 800629c:	7afb      	ldrb	r3, [r7, #11]
 800629e:	3301      	adds	r3, #1
 80062a0:	72fb      	strb	r3, [r7, #11]
          break;
 80062a2:	e021      	b.n	80062e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	7c12      	ldrb	r2, [r2, #16]
 80062bc:	f107 0108 	add.w	r1, r7, #8
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
 80062c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062c6:	e00f      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa30 	bl	8006730 <USBD_CtlError>
            err++;
 80062d0:	7afb      	ldrb	r3, [r7, #11]
 80062d2:	3301      	adds	r3, #1
 80062d4:	72fb      	strb	r3, [r7, #11]
          break;
 80062d6:	e007      	b.n	80062e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa28 	bl	8006730 <USBD_CtlError>
          err++;
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	3301      	adds	r3, #1
 80062e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80062e6:	bf00      	nop
      }
      break;
 80062e8:	e037      	b.n	800635a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	7c1b      	ldrb	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fa:	f107 0208 	add.w	r2, r7, #8
 80062fe:	4610      	mov	r0, r2
 8006300:	4798      	blx	r3
 8006302:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006304:	e029      	b.n	800635a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fa11 	bl	8006730 <USBD_CtlError>
        err++;
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	3301      	adds	r3, #1
 8006312:	72fb      	strb	r3, [r7, #11]
      break;
 8006314:	e021      	b.n	800635a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	7c1b      	ldrb	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	f107 0208 	add.w	r2, r7, #8
 800632a:	4610      	mov	r0, r2
 800632c:	4798      	blx	r3
 800632e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	2207      	movs	r2, #7
 8006336:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006338:	e00f      	b.n	800635a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f9f7 	bl	8006730 <USBD_CtlError>
        err++;
 8006342:	7afb      	ldrb	r3, [r7, #11]
 8006344:	3301      	adds	r3, #1
 8006346:	72fb      	strb	r3, [r7, #11]
      break;
 8006348:	e007      	b.n	800635a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f9ef 	bl	8006730 <USBD_CtlError>
      err++;
 8006352:	7afb      	ldrb	r3, [r7, #11]
 8006354:	3301      	adds	r3, #1
 8006356:	72fb      	strb	r3, [r7, #11]
      break;
 8006358:	bf00      	nop
  }

  if (err != 0U)
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d11e      	bne.n	800639e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	88db      	ldrh	r3, [r3, #6]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d016      	beq.n	8006396 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006368:	893b      	ldrh	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00e      	beq.n	800638c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	88da      	ldrh	r2, [r3, #6]
 8006372:	893b      	ldrh	r3, [r7, #8]
 8006374:	4293      	cmp	r3, r2
 8006376:	bf28      	it	cs
 8006378:	4613      	movcs	r3, r2
 800637a:	b29b      	uxth	r3, r3
 800637c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800637e:	893b      	ldrh	r3, [r7, #8]
 8006380:	461a      	mov	r2, r3
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fa44 	bl	8006812 <USBD_CtlSendData>
 800638a:	e009      	b.n	80063a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9ce 	bl	8006730 <USBD_CtlError>
 8006394:	e004      	b.n	80063a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa95 	bl	80068c6 <USBD_CtlSendStatus>
 800639c:	e000      	b.n	80063a0 <USBD_GetDescriptor+0x2cc>
    return;
 800639e:	bf00      	nop
  }
}
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop

080063a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	889b      	ldrh	r3, [r3, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d131      	bne.n	800641e <USBD_SetAddress+0x76>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	88db      	ldrh	r3, [r3, #6]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d12d      	bne.n	800641e <USBD_SetAddress+0x76>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	885b      	ldrh	r3, [r3, #2]
 80063c6:	2b7f      	cmp	r3, #127	; 0x7f
 80063c8:	d829      	bhi.n	800641e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	885b      	ldrh	r3, [r3, #2]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d104      	bne.n	80063ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f9a3 	bl	8006730 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ea:	e01d      	b.n	8006428 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	7bfa      	ldrb	r2, [r7, #15]
 80063f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	4619      	mov	r1, r3
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f004 fb47 	bl	800aa8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa61 	bl	80068c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d004      	beq.n	8006414 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006412:	e009      	b.n	8006428 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641c:	e004      	b.n	8006428 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f985 	bl	8006730 <USBD_CtlError>
  }
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	885b      	ldrh	r3, [r3, #2]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	4b4c      	ldr	r3, [pc, #304]	; (8006578 <USBD_SetConfig+0x148>)
 8006446:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006448:	4b4b      	ldr	r3, [pc, #300]	; (8006578 <USBD_SetConfig+0x148>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d905      	bls.n	800645c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f96c 	bl	8006730 <USBD_CtlError>
    return USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	e088      	b.n	800656e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d002      	beq.n	800646e <USBD_SetConfig+0x3e>
 8006468:	2b03      	cmp	r3, #3
 800646a:	d025      	beq.n	80064b8 <USBD_SetConfig+0x88>
 800646c:	e071      	b.n	8006552 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800646e:	4b42      	ldr	r3, [pc, #264]	; (8006578 <USBD_SetConfig+0x148>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01c      	beq.n	80064b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006476:	4b40      	ldr	r3, [pc, #256]	; (8006578 <USBD_SetConfig+0x148>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006480:	4b3d      	ldr	r3, [pc, #244]	; (8006578 <USBD_SetConfig+0x148>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff f948 	bl	800571c <USBD_SetClassConfig>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f949 	bl	8006730 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800649e:	e065      	b.n	800656c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fa10 	bl	80068c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2203      	movs	r2, #3
 80064aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064ae:	e05d      	b.n	800656c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fa08 	bl	80068c6 <USBD_CtlSendStatus>
      break;
 80064b6:	e059      	b.n	800656c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80064b8:	4b2f      	ldr	r3, [pc, #188]	; (8006578 <USBD_SetConfig+0x148>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d112      	bne.n	80064e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80064c8:	4b2b      	ldr	r3, [pc, #172]	; (8006578 <USBD_SetConfig+0x148>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064d2:	4b29      	ldr	r3, [pc, #164]	; (8006578 <USBD_SetConfig+0x148>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff f93b 	bl	8005754 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9f1 	bl	80068c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064e4:	e042      	b.n	800656c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <USBD_SetConfig+0x148>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d02a      	beq.n	800654a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff f929 	bl	8005754 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006502:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <USBD_SetConfig+0x148>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800650c:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <USBD_SetConfig+0x148>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff f902 	bl	800571c <USBD_SetClassConfig>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00f      	beq.n	8006542 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f903 	bl	8006730 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff f90e 	bl	8005754 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006540:	e014      	b.n	800656c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f9bf 	bl	80068c6 <USBD_CtlSendStatus>
      break;
 8006548:	e010      	b.n	800656c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f9bb 	bl	80068c6 <USBD_CtlSendStatus>
      break;
 8006550:	e00c      	b.n	800656c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8eb 	bl	8006730 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800655a:	4b07      	ldr	r3, [pc, #28]	; (8006578 <USBD_SetConfig+0x148>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff f8f7 	bl	8005754 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006566:	2303      	movs	r3, #3
 8006568:	73fb      	strb	r3, [r7, #15]
      break;
 800656a:	bf00      	nop
  }

  return ret;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000298 	.word	0x20000298

0800657c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	88db      	ldrh	r3, [r3, #6]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d004      	beq.n	8006598 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f8cd 	bl	8006730 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006596:	e023      	b.n	80065e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	dc02      	bgt.n	80065aa <USBD_GetConfig+0x2e>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dc03      	bgt.n	80065b0 <USBD_GetConfig+0x34>
 80065a8:	e015      	b.n	80065d6 <USBD_GetConfig+0x5a>
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d00b      	beq.n	80065c6 <USBD_GetConfig+0x4a>
 80065ae:	e012      	b.n	80065d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3308      	adds	r3, #8
 80065ba:	2201      	movs	r2, #1
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f927 	bl	8006812 <USBD_CtlSendData>
        break;
 80065c4:	e00c      	b.n	80065e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
 80065ca:	2201      	movs	r2, #1
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f91f 	bl	8006812 <USBD_CtlSendData>
        break;
 80065d4:	e004      	b.n	80065e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f8a9 	bl	8006730 <USBD_CtlError>
        break;
 80065de:	bf00      	nop
}
 80065e0:	bf00      	nop
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d81e      	bhi.n	800663e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	88db      	ldrh	r3, [r3, #6]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d004      	beq.n	8006612 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f890 	bl	8006730 <USBD_CtlError>
        break;
 8006610:	e01a      	b.n	8006648 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f043 0202 	orr.w	r2, r3, #2
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	330c      	adds	r3, #12
 8006632:	2202      	movs	r2, #2
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f8eb 	bl	8006812 <USBD_CtlSendData>
      break;
 800663c:	e004      	b.n	8006648 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f875 	bl	8006730 <USBD_CtlError>
      break;
 8006646:	bf00      	nop
  }
}
 8006648:	bf00      	nop
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	885b      	ldrh	r3, [r3, #2]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d106      	bne.n	8006670 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f92b 	bl	80068c6 <USBD_CtlSendStatus>
  }
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006688:	b2db      	uxtb	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	2b02      	cmp	r3, #2
 800668e:	d80b      	bhi.n	80066a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	885b      	ldrh	r3, [r3, #2]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d10c      	bne.n	80066b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f910 	bl	80068c6 <USBD_CtlSendStatus>
      }
      break;
 80066a6:	e004      	b.n	80066b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f840 	bl	8006730 <USBD_CtlError>
      break;
 80066b0:	e000      	b.n	80066b4 <USBD_ClrFeature+0x3c>
      break;
 80066b2:	bf00      	nop
  }
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3301      	adds	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fabb 	bl	8005c62 <SWAPBYTE>
 80066ec:	4603      	mov	r3, r0
 80066ee:	461a      	mov	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3301      	adds	r3, #1
 80066f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff faae 	bl	8005c62 <SWAPBYTE>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff faa1 	bl	8005c62 <SWAPBYTE>
 8006720:	4603      	mov	r3, r0
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	80da      	strh	r2, [r3, #6]
}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800673a:	2180      	movs	r1, #128	; 0x80
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f004 f93b 	bl	800a9b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006742:	2100      	movs	r1, #0
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f004 f937 	bl	800a9b8 <USBD_LL_StallEP>
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d036      	beq.n	80067d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800676c:	6938      	ldr	r0, [r7, #16]
 800676e:	f000 f836 	bl	80067de <USBD_GetLen>
 8006772:	4603      	mov	r3, r0
 8006774:	3301      	adds	r3, #1
 8006776:	b29b      	uxth	r3, r3
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	4413      	add	r3, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	7812      	ldrb	r2, [r2, #0]
 800678a:	701a      	strb	r2, [r3, #0]
  idx++;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	3301      	adds	r3, #1
 8006790:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	4413      	add	r3, r2
 8006798:	2203      	movs	r2, #3
 800679a:	701a      	strb	r2, [r3, #0]
  idx++;
 800679c:	7dfb      	ldrb	r3, [r7, #23]
 800679e:	3301      	adds	r3, #1
 80067a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80067a2:	e013      	b.n	80067cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	4413      	add	r3, r2
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	7812      	ldrb	r2, [r2, #0]
 80067ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	3301      	adds	r3, #1
 80067b4:	613b      	str	r3, [r7, #16]
    idx++;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	3301      	adds	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4413      	add	r3, r2
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
    idx++;
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	3301      	adds	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e7      	bne.n	80067a4 <USBD_GetString+0x52>
 80067d4:	e000      	b.n	80067d8 <USBD_GetString+0x86>
    return;
 80067d6:	bf00      	nop
  }
}
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80067ee:	e005      	b.n	80067fc <USBD_GetLen+0x1e>
  {
    len++;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	3301      	adds	r3, #1
 80067f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	3301      	adds	r3, #1
 80067fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f5      	bne.n	80067f0 <USBD_GetLen+0x12>
  }

  return len;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2202      	movs	r2, #2
 8006822:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	2100      	movs	r1, #0
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f004 f946 	bl	800aaca <USBD_LL_Transmit>

  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	2100      	movs	r1, #0
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f004 f935 	bl	800aaca <USBD_LL_Transmit>

  return USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2203      	movs	r2, #3
 800687a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	2100      	movs	r1, #0
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f004 f939 	bl	800ab0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	2100      	movs	r1, #0
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f004 f928 	bl	800ab0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b082      	sub	sp, #8
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2204      	movs	r2, #4
 80068d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068d6:	2300      	movs	r3, #0
 80068d8:	2200      	movs	r2, #0
 80068da:	2100      	movs	r1, #0
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f004 f8f4 	bl	800aaca <USBD_LL_Transmit>

  return USBD_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2205      	movs	r2, #5
 80068f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068fc:	2300      	movs	r3, #0
 80068fe:	2200      	movs	r2, #0
 8006900:	2100      	movs	r1, #0
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f004 f902 	bl	800ab0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <__NVIC_SetPriority>:
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006924:	2b00      	cmp	r3, #0
 8006926:	db0a      	blt.n	800693e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	490c      	ldr	r1, [pc, #48]	; (8006960 <__NVIC_SetPriority+0x4c>)
 800692e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006932:	0112      	lsls	r2, r2, #4
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	440b      	add	r3, r1
 8006938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800693c:	e00a      	b.n	8006954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	b2da      	uxtb	r2, r3
 8006942:	4908      	ldr	r1, [pc, #32]	; (8006964 <__NVIC_SetPriority+0x50>)
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	3b04      	subs	r3, #4
 800694c:	0112      	lsls	r2, r2, #4
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	440b      	add	r3, r1
 8006952:	761a      	strb	r2, [r3, #24]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	e000e100 	.word	0xe000e100
 8006964:	e000ed00 	.word	0xe000ed00

08006968 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <SysTick_Handler+0x1c>)
 800696e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006970:	f002 fa9a 	bl	8008ea8 <xTaskGetSchedulerState>
 8006974:	4603      	mov	r3, r0
 8006976:	2b01      	cmp	r3, #1
 8006978:	d001      	beq.n	800697e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800697a:	f003 f97d 	bl	8009c78 <xPortSysTickHandler>
  }
}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	e000e010 	.word	0xe000e010

08006988 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800698c:	2100      	movs	r1, #0
 800698e:	f06f 0004 	mvn.w	r0, #4
 8006992:	f7ff ffbf 	bl	8006914 <__NVIC_SetPriority>
#endif
}
 8006996:	bf00      	nop
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a2:	f3ef 8305 	mrs	r3, IPSR
 80069a6:	603b      	str	r3, [r7, #0]
  return(result);
 80069a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80069ae:	f06f 0305 	mvn.w	r3, #5
 80069b2:	607b      	str	r3, [r7, #4]
 80069b4:	e00c      	b.n	80069d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <osKernelInitialize+0x44>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d105      	bne.n	80069ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069be:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <osKernelInitialize+0x44>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	e002      	b.n	80069d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80069ca:	f04f 33ff 	mov.w	r3, #4294967295
 80069ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069d0:	687b      	ldr	r3, [r7, #4]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	2000029c 	.word	0x2000029c

080069e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ea:	f3ef 8305 	mrs	r3, IPSR
 80069ee:	603b      	str	r3, [r7, #0]
  return(result);
 80069f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80069f6:	f06f 0305 	mvn.w	r3, #5
 80069fa:	607b      	str	r3, [r7, #4]
 80069fc:	e010      	b.n	8006a20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069fe:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <osKernelStart+0x48>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d109      	bne.n	8006a1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a06:	f7ff ffbf 	bl	8006988 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a0a:	4b08      	ldr	r3, [pc, #32]	; (8006a2c <osKernelStart+0x48>)
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a10:	f001 fdee 	bl	80085f0 <vTaskStartScheduler>
      stat = osOK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	e002      	b.n	8006a20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a20:	687b      	ldr	r3, [r7, #4]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	2000029c 	.word	0x2000029c

08006a30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08e      	sub	sp, #56	; 0x38
 8006a34:	af04      	add	r7, sp, #16
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a40:	f3ef 8305 	mrs	r3, IPSR
 8006a44:	617b      	str	r3, [r7, #20]
  return(result);
 8006a46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d17e      	bne.n	8006b4a <osThreadNew+0x11a>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d07b      	beq.n	8006b4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a52:	2380      	movs	r3, #128	; 0x80
 8006a54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a56:	2318      	movs	r3, #24
 8006a58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d045      	beq.n	8006af6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <osThreadNew+0x48>
        name = attr->name;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d008      	beq.n	8006a9e <osThreadNew+0x6e>
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b38      	cmp	r3, #56	; 0x38
 8006a90:	d805      	bhi.n	8006a9e <osThreadNew+0x6e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <osThreadNew+0x72>
        return (NULL);
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e054      	b.n	8006b4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	089b      	lsrs	r3, r3, #2
 8006ab0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <osThreadNew+0xa8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2bbb      	cmp	r3, #187	; 0xbb
 8006ac0:	d90a      	bls.n	8006ad8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d006      	beq.n	8006ad8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <osThreadNew+0xa8>
        mem = 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e010      	b.n	8006afa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10c      	bne.n	8006afa <osThreadNew+0xca>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <osThreadNew+0xca>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <osThreadNew+0xca>
          mem = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e001      	b.n	8006afa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d110      	bne.n	8006b22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b08:	9202      	str	r2, [sp, #8]
 8006b0a:	9301      	str	r3, [sp, #4]
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	6a3a      	ldr	r2, [r7, #32]
 8006b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f001 fb7e 	bl	8008218 <xTaskCreateStatic>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	e013      	b.n	8006b4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d110      	bne.n	8006b4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	f107 0310 	add.w	r3, r7, #16
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 fbc9 	bl	80082d2 <xTaskCreate>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d001      	beq.n	8006b4a <osThreadNew+0x11a>
            hTask = NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b4a:	693b      	ldr	r3, [r7, #16]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3728      	adds	r7, #40	; 0x28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b5c:	f3ef 8305 	mrs	r3, IPSR
 8006b60:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <osDelay+0x1c>
    stat = osErrorISR;
 8006b68:	f06f 0305 	mvn.w	r3, #5
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e007      	b.n	8006b80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 fd04 	bl	8008588 <vTaskDelay>
    }
  }

  return (stat);
 8006b80:	68fb      	ldr	r3, [r7, #12]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b08a      	sub	sp, #40	; 0x28
 8006b8e:	af02      	add	r7, sp, #8
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b9a:	f3ef 8305 	mrs	r3, IPSR
 8006b9e:	613b      	str	r3, [r7, #16]
  return(result);
 8006ba0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d175      	bne.n	8006c92 <osSemaphoreNew+0x108>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d072      	beq.n	8006c92 <osSemaphoreNew+0x108>
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d86e      	bhi.n	8006c92 <osSemaphoreNew+0x108>
    mem = -1;
 8006bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d015      	beq.n	8006bec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d006      	beq.n	8006bd6 <osSemaphoreNew+0x4c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	2b4f      	cmp	r3, #79	; 0x4f
 8006bce:	d902      	bls.n	8006bd6 <osSemaphoreNew+0x4c>
        mem = 1;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	e00c      	b.n	8006bf0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d108      	bne.n	8006bf0 <osSemaphoreNew+0x66>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <osSemaphoreNew+0x66>
          mem = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e001      	b.n	8006bf0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d04c      	beq.n	8006c92 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d128      	bne.n	8006c50 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d10a      	bne.n	8006c1a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2203      	movs	r2, #3
 8006c0a:	9200      	str	r2, [sp, #0]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2100      	movs	r1, #0
 8006c10:	2001      	movs	r0, #1
 8006c12:	f000 fb5b 	bl	80072cc <xQueueGenericCreateStatic>
 8006c16:	61f8      	str	r0, [r7, #28]
 8006c18:	e005      	b.n	8006c26 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	2001      	movs	r0, #1
 8006c20:	f000 fbcc 	bl	80073bc <xQueueGenericCreate>
 8006c24:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d022      	beq.n	8006c72 <osSemaphoreNew+0xe8>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01f      	beq.n	8006c72 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c32:	2300      	movs	r3, #0
 8006c34:	2200      	movs	r2, #0
 8006c36:	2100      	movs	r1, #0
 8006c38:	69f8      	ldr	r0, [r7, #28]
 8006c3a:	f000 fc87 	bl	800754c <xQueueGenericSend>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d016      	beq.n	8006c72 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006c44:	69f8      	ldr	r0, [r7, #28]
 8006c46:	f001 f913 	bl	8007e70 <vQueueDelete>
            hSemaphore = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	e010      	b.n	8006c72 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d108      	bne.n	8006c68 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fc09 	bl	8007476 <xQueueCreateCountingSemaphoreStatic>
 8006c64:	61f8      	str	r0, [r7, #28]
 8006c66:	e004      	b.n	8006c72 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fc3a 	bl	80074e4 <xQueueCreateCountingSemaphore>
 8006c70:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00c      	beq.n	8006c92 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	e001      	b.n	8006c8a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	69f8      	ldr	r0, [r7, #28]
 8006c8e:	f001 fa3b 	bl	8008108 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006c92:	69fb      	ldr	r3, [r7, #28]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006cb4:	f06f 0303 	mvn.w	r3, #3
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	e039      	b.n	8006d30 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cbc:	f3ef 8305 	mrs	r3, IPSR
 8006cc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d022      	beq.n	8006d0e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006cce:	f06f 0303 	mvn.w	r3, #3
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	e02c      	b.n	8006d30 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006cda:	f107 0308 	add.w	r3, r7, #8
 8006cde:	461a      	mov	r2, r3
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	6938      	ldr	r0, [r7, #16]
 8006ce4:	f001 f844 	bl	8007d70 <xQueueReceiveFromISR>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d003      	beq.n	8006cf6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006cee:	f06f 0302 	mvn.w	r3, #2
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	e01c      	b.n	8006d30 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d019      	beq.n	8006d30 <osSemaphoreAcquire+0x94>
 8006cfc:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <osSemaphoreAcquire+0xa0>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	e010      	b.n	8006d30 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6938      	ldr	r0, [r7, #16]
 8006d12:	f000 ff21 	bl	8007b58 <xQueueSemaphoreTake>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d009      	beq.n	8006d30 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006d22:	f06f 0301 	mvn.w	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e002      	b.n	8006d30 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006d2a:	f06f 0302 	mvn.w	r3, #2
 8006d2e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006d30:	697b      	ldr	r3, [r7, #20]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006d56:	f06f 0303 	mvn.w	r3, #3
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e02c      	b.n	8006db8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d5e:	f3ef 8305 	mrs	r3, IPSR
 8006d62:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d64:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01a      	beq.n	8006da0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006d6e:	f107 0308 	add.w	r3, r7, #8
 8006d72:	4619      	mov	r1, r3
 8006d74:	6938      	ldr	r0, [r7, #16]
 8006d76:	f000 fd82 	bl	800787e <xQueueGiveFromISR>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d003      	beq.n	8006d88 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006d80:	f06f 0302 	mvn.w	r3, #2
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	e017      	b.n	8006db8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d014      	beq.n	8006db8 <osSemaphoreRelease+0x78>
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <osSemaphoreRelease+0x84>)
 8006d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	e00b      	b.n	8006db8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006da0:	2300      	movs	r3, #0
 8006da2:	2200      	movs	r2, #0
 8006da4:	2100      	movs	r1, #0
 8006da6:	6938      	ldr	r0, [r7, #16]
 8006da8:	f000 fbd0 	bl	800754c <xQueueGenericSend>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d002      	beq.n	8006db8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006db2:	f06f 0302 	mvn.w	r3, #2
 8006db6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006db8:	697b      	ldr	r3, [r7, #20]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd8:	f3ef 8305 	mrs	r3, IPSR
 8006ddc:	613b      	str	r3, [r7, #16]
  return(result);
 8006dde:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d15f      	bne.n	8006ea4 <osMessageQueueNew+0xdc>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d05c      	beq.n	8006ea4 <osMessageQueueNew+0xdc>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d059      	beq.n	8006ea4 <osMessageQueueNew+0xdc>
    mem = -1;
 8006df0:	f04f 33ff 	mov.w	r3, #4294967295
 8006df4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d029      	beq.n	8006e50 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d012      	beq.n	8006e2a <osMessageQueueNew+0x62>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	2b4f      	cmp	r3, #79	; 0x4f
 8006e0a:	d90e      	bls.n	8006e2a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695a      	ldr	r2, [r3, #20]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	fb01 f303 	mul.w	r3, r1, r3
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d302      	bcc.n	8006e2a <osMessageQueueNew+0x62>
        mem = 1;
 8006e24:	2301      	movs	r3, #1
 8006e26:	61bb      	str	r3, [r7, #24]
 8006e28:	e014      	b.n	8006e54 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d110      	bne.n	8006e54 <osMessageQueueNew+0x8c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10c      	bne.n	8006e54 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d108      	bne.n	8006e54 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <osMessageQueueNew+0x8c>
          mem = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	e001      	b.n	8006e54 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d10b      	bne.n	8006e72 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2100      	movs	r1, #0
 8006e64:	9100      	str	r1, [sp, #0]
 8006e66:	68b9      	ldr	r1, [r7, #8]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 fa2f 	bl	80072cc <xQueueGenericCreateStatic>
 8006e6e:	61f8      	str	r0, [r7, #28]
 8006e70:	e008      	b.n	8006e84 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e78:	2200      	movs	r2, #0
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fa9d 	bl	80073bc <xQueueGenericCreate>
 8006e82:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00c      	beq.n	8006ea4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e001      	b.n	8006e9c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006e9c:	6979      	ldr	r1, [r7, #20]
 8006e9e:	69f8      	ldr	r0, [r7, #28]
 8006ea0:	f001 f932 	bl	8008108 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006ea4:	69fb      	ldr	r3, [r7, #28]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b088      	sub	sp, #32
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ec8:	f3ef 8305 	mrs	r3, IPSR
 8006ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8006ece:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d028      	beq.n	8006f26 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <osMessageQueuePut+0x36>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <osMessageQueuePut+0x36>
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006ee6:	f06f 0303 	mvn.w	r3, #3
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	e038      	b.n	8006f60 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ef2:	f107 0210 	add.w	r2, r7, #16
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	68b9      	ldr	r1, [r7, #8]
 8006efa:	69b8      	ldr	r0, [r7, #24]
 8006efc:	f000 fc24 	bl	8007748 <xQueueGenericSendFromISR>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d003      	beq.n	8006f0e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006f06:	f06f 0302 	mvn.w	r3, #2
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	e028      	b.n	8006f60 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d025      	beq.n	8006f60 <osMessageQueuePut+0xb0>
 8006f14:	4b15      	ldr	r3, [pc, #84]	; (8006f6c <osMessageQueuePut+0xbc>)
 8006f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	e01c      	b.n	8006f60 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <osMessageQueuePut+0x82>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d103      	bne.n	8006f3a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006f32:	f06f 0303 	mvn.w	r3, #3
 8006f36:	61fb      	str	r3, [r7, #28]
 8006f38:	e012      	b.n	8006f60 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	69b8      	ldr	r0, [r7, #24]
 8006f42:	f000 fb03 	bl	800754c <xQueueGenericSend>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d009      	beq.n	8006f60 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006f52:	f06f 0301 	mvn.w	r3, #1
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e002      	b.n	8006f60 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006f5a:	f06f 0302 	mvn.w	r3, #2
 8006f5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006f60:	69fb      	ldr	r3, [r7, #28]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3720      	adds	r7, #32
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	e000ed04 	.word	0xe000ed04

08006f70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f86:	f3ef 8305 	mrs	r3, IPSR
 8006f8a:	617b      	str	r3, [r7, #20]
  return(result);
 8006f8c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d028      	beq.n	8006fe4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <osMessageQueueGet+0x34>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <osMessageQueueGet+0x34>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d003      	beq.n	8006fac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006fa4:	f06f 0303 	mvn.w	r3, #3
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	e037      	b.n	800701c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006fb0:	f107 0310 	add.w	r3, r7, #16
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	69b8      	ldr	r0, [r7, #24]
 8006fba:	f000 fed9 	bl	8007d70 <xQueueReceiveFromISR>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d003      	beq.n	8006fcc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006fc4:	f06f 0302 	mvn.w	r3, #2
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	e027      	b.n	800701c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d024      	beq.n	800701c <osMessageQueueGet+0xac>
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <osMessageQueueGet+0xb8>)
 8006fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	e01b      	b.n	800701c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <osMessageQueueGet+0x80>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006ff0:	f06f 0303 	mvn.w	r3, #3
 8006ff4:	61fb      	str	r3, [r7, #28]
 8006ff6:	e011      	b.n	800701c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	69b8      	ldr	r0, [r7, #24]
 8006ffe:	f000 fccb 	bl	8007998 <xQueueReceive>
 8007002:	4603      	mov	r3, r0
 8007004:	2b01      	cmp	r3, #1
 8007006:	d009      	beq.n	800701c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800700e:	f06f 0301 	mvn.w	r3, #1
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	e002      	b.n	800701c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007016:	f06f 0302 	mvn.w	r3, #2
 800701a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800701c:	69fb      	ldr	r3, [r7, #28]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3720      	adds	r7, #32
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	e000ed04 	.word	0xe000ed04

0800702c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4a07      	ldr	r2, [pc, #28]	; (8007058 <vApplicationGetIdleTaskMemory+0x2c>)
 800703c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4a06      	ldr	r2, [pc, #24]	; (800705c <vApplicationGetIdleTaskMemory+0x30>)
 8007042:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2280      	movs	r2, #128	; 0x80
 8007048:	601a      	str	r2, [r3, #0]
}
 800704a:	bf00      	nop
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	200002a0 	.word	0x200002a0
 800705c:	2000035c 	.word	0x2000035c

08007060 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4a07      	ldr	r2, [pc, #28]	; (800708c <vApplicationGetTimerTaskMemory+0x2c>)
 8007070:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4a06      	ldr	r2, [pc, #24]	; (8007090 <vApplicationGetTimerTaskMemory+0x30>)
 8007076:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800707e:	601a      	str	r2, [r3, #0]
}
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	2000055c 	.word	0x2000055c
 8007090:	20000618 	.word	0x20000618

08007094 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f103 0208 	add.w	r2, r3, #8
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f04f 32ff 	mov.w	r2, #4294967295
 80070ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f103 0208 	add.w	r2, r3, #8
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f103 0208 	add.w	r2, r3, #8
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714c:	d103      	bne.n	8007156 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e00c      	b.n	8007170 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3308      	adds	r3, #8
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e002      	b.n	8007164 <vListInsert+0x2e>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	d2f6      	bcs.n	800715e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	601a      	str	r2, [r3, #0]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6892      	ldr	r2, [r2, #8]
 80071be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6852      	ldr	r2, [r2, #4]
 80071c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d103      	bne.n	80071dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	1e5a      	subs	r2, r3, #1
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007226:	f002 fc95 	bl	8009b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007236:	fb01 f303 	mul.w	r3, r1, r3
 800723a:	441a      	add	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	3b01      	subs	r3, #1
 8007258:	68f9      	ldr	r1, [r7, #12]
 800725a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	441a      	add	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	22ff      	movs	r2, #255	; 0xff
 800726a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	22ff      	movs	r2, #255	; 0xff
 8007272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d114      	bne.n	80072a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d01a      	beq.n	80072ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3310      	adds	r3, #16
 8007288:	4618      	mov	r0, r3
 800728a:	f001 fc4b 	bl	8008b24 <xTaskRemoveFromEventList>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d012      	beq.n	80072ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007294:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <xQueueGenericReset+0xcc>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	e009      	b.n	80072ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3310      	adds	r3, #16
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fef2 	bl	8007094 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3324      	adds	r3, #36	; 0x24
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff feed 	bl	8007094 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072ba:	f002 fc7b 	bl	8009bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072be:	2301      	movs	r3, #1
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08e      	sub	sp, #56	; 0x38
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <xQueueGenericCreateStatic+0x52>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <xQueueGenericCreateStatic+0x56>
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <xQueueGenericCreateStatic+0x58>
 8007322:	2300      	movs	r3, #0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	623b      	str	r3, [r7, #32]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d102      	bne.n	800734a <xQueueGenericCreateStatic+0x7e>
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <xQueueGenericCreateStatic+0x82>
 800734a:	2301      	movs	r3, #1
 800734c:	e000      	b.n	8007350 <xQueueGenericCreateStatic+0x84>
 800734e:	2300      	movs	r3, #0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	61fb      	str	r3, [r7, #28]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800736a:	2350      	movs	r3, #80	; 0x50
 800736c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b50      	cmp	r3, #80	; 0x50
 8007372:	d00a      	beq.n	800738a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	61bb      	str	r3, [r7, #24]
}
 8007386:	bf00      	nop
 8007388:	e7fe      	b.n	8007388 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800738a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00d      	beq.n	80073b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800739e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	4613      	mov	r3, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	68b9      	ldr	r1, [r7, #8]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f83f 	bl	8007430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3730      	adds	r7, #48	; 0x30
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	613b      	str	r3, [r7, #16]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
 80073ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	3350      	adds	r3, #80	; 0x50
 80073f4:	4618      	mov	r0, r3
 80073f6:	f002 fccf 	bl	8009d98 <pvPortMalloc>
 80073fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d011      	beq.n	8007426 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	3350      	adds	r3, #80	; 0x50
 800740a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007414:	79fa      	ldrb	r2, [r7, #7]
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	4613      	mov	r3, r2
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f805 	bl	8007430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007426:	69bb      	ldr	r3, [r7, #24]
	}
 8007428:	4618      	mov	r0, r3
 800742a:	3720      	adds	r7, #32
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e002      	b.n	8007452 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800745e:	2101      	movs	r1, #1
 8007460:	69b8      	ldr	r0, [r7, #24]
 8007462:	f7ff fecb 	bl	80071fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007476:	b580      	push	{r7, lr}
 8007478:	b08a      	sub	sp, #40	; 0x28
 800747a:	af02      	add	r7, sp, #8
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	61bb      	str	r3, [r7, #24]
}
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d90a      	bls.n	80074bc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	617b      	str	r3, [r7, #20]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80074bc:	2302      	movs	r3, #2
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	2100      	movs	r1, #0
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f7ff ff00 	bl	80072cc <xQueueGenericCreateStatic>
 80074cc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80074da:	69fb      	ldr	r3, [r7, #28]
	}
 80074dc:	4618      	mov	r0, r3
 80074de:	3720      	adds	r7, #32
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	613b      	str	r3, [r7, #16]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d90a      	bls.n	8007528 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	60fb      	str	r3, [r7, #12]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007528:	2202      	movs	r2, #2
 800752a:	2100      	movs	r1, #0
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff ff45 	bl	80073bc <xQueueGenericCreate>
 8007532:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007540:	697b      	ldr	r3, [r7, #20]
	}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08e      	sub	sp, #56	; 0x38
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800755a:	2300      	movs	r3, #0
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xQueueGenericSend+0x32>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <xQueueGenericSend+0x40>
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <xQueueGenericSend+0x44>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <xQueueGenericSend+0x46>
 8007590:	2300      	movs	r3, #0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <xQueueGenericSend+0x60>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d103      	bne.n	80075ba <xQueueGenericSend+0x6e>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <xQueueGenericSend+0x72>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <xQueueGenericSend+0x74>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <xQueueGenericSend+0x8e>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	623b      	str	r3, [r7, #32]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075da:	f001 fc65 	bl	8008ea8 <xTaskGetSchedulerState>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d102      	bne.n	80075ea <xQueueGenericSend+0x9e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <xQueueGenericSend+0xa2>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <xQueueGenericSend+0xa4>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <xQueueGenericSend+0xbe>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	61fb      	str	r3, [r7, #28]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800760a:	f002 faa3 	bl	8009b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <xQueueGenericSend+0xd4>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d129      	bne.n	8007674 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007626:	f000 fc5e 	bl	8007ee6 <prvCopyDataToQueue>
 800762a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d010      	beq.n	8007656 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	3324      	adds	r3, #36	; 0x24
 8007638:	4618      	mov	r0, r3
 800763a:	f001 fa73 	bl	8008b24 <xTaskRemoveFromEventList>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d013      	beq.n	800766c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007644:	4b3f      	ldr	r3, [pc, #252]	; (8007744 <xQueueGenericSend+0x1f8>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	e00a      	b.n	800766c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d007      	beq.n	800766c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800765c:	4b39      	ldr	r3, [pc, #228]	; (8007744 <xQueueGenericSend+0x1f8>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800766c:	f002 faa2 	bl	8009bb4 <vPortExitCritical>
				return pdPASS;
 8007670:	2301      	movs	r3, #1
 8007672:	e063      	b.n	800773c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800767a:	f002 fa9b 	bl	8009bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800767e:	2300      	movs	r3, #0
 8007680:	e05c      	b.n	800773c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	2b00      	cmp	r3, #0
 8007686:	d106      	bne.n	8007696 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007688:	f107 0314 	add.w	r3, r7, #20
 800768c:	4618      	mov	r0, r3
 800768e:	f001 faad 	bl	8008bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007692:	2301      	movs	r3, #1
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007696:	f002 fa8d 	bl	8009bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800769a:	f001 f819 	bl	80086d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800769e:	f002 fa59 	bl	8009b54 <vPortEnterCritical>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d103      	bne.n	80076b8 <xQueueGenericSend+0x16c>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076be:	b25b      	sxtb	r3, r3
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d103      	bne.n	80076ce <xQueueGenericSend+0x182>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076ce:	f002 fa71 	bl	8009bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076d2:	1d3a      	adds	r2, r7, #4
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	4611      	mov	r1, r2
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fa9c 	bl	8008c18 <xTaskCheckForTimeOut>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d124      	bne.n	8007730 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076e8:	f000 fcf5 	bl	80080d6 <prvIsQueueFull>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d018      	beq.n	8007724 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	3310      	adds	r3, #16
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4611      	mov	r1, r2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 f9c2 	bl	8008a84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007702:	f000 fc80 	bl	8008006 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007706:	f000 fff1 	bl	80086ec <xTaskResumeAll>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	f47f af7c 	bne.w	800760a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007712:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <xQueueGenericSend+0x1f8>)
 8007714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	e772      	b.n	800760a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007726:	f000 fc6e 	bl	8008006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800772a:	f000 ffdf 	bl	80086ec <xTaskResumeAll>
 800772e:	e76c      	b.n	800760a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007732:	f000 fc68 	bl	8008006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007736:	f000 ffd9 	bl	80086ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800773a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800773c:	4618      	mov	r0, r3
 800773e:	3738      	adds	r7, #56	; 0x38
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b090      	sub	sp, #64	; 0x40
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d103      	bne.n	8007784 <xQueueGenericSendFromISR+0x3c>
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <xQueueGenericSendFromISR+0x40>
 8007784:	2301      	movs	r3, #1
 8007786:	e000      	b.n	800778a <xQueueGenericSendFromISR+0x42>
 8007788:	2300      	movs	r3, #0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d103      	bne.n	80077b2 <xQueueGenericSendFromISR+0x6a>
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <xQueueGenericSendFromISR+0x6e>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <xQueueGenericSendFromISR+0x70>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	623b      	str	r3, [r7, #32]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077d2:	f002 faa1 	bl	8009d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077d6:	f3ef 8211 	mrs	r2, BASEPRI
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	61fa      	str	r2, [r7, #28]
 80077ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d302      	bcc.n	8007804 <xQueueGenericSendFromISR+0xbc>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d12f      	bne.n	8007864 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800780a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800781a:	f000 fb64 	bl	8007ee6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800781e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	d112      	bne.n	800784e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	2b00      	cmp	r3, #0
 800782e:	d016      	beq.n	800785e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	3324      	adds	r3, #36	; 0x24
 8007834:	4618      	mov	r0, r3
 8007836:	f001 f975 	bl	8008b24 <xTaskRemoveFromEventList>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00e      	beq.n	800785e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	e007      	b.n	800785e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800784e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007852:	3301      	adds	r3, #1
 8007854:	b2db      	uxtb	r3, r3
 8007856:	b25a      	sxtb	r2, r3
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800785e:	2301      	movs	r3, #1
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007862:	e001      	b.n	8007868 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007864:	2300      	movs	r3, #0
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007872:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007876:	4618      	mov	r0, r3
 8007878:	3740      	adds	r7, #64	; 0x40
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b08e      	sub	sp, #56	; 0x38
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	623b      	str	r3, [r7, #32]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	61fb      	str	r3, [r7, #28]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <xQueueGiveFromISR+0x58>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <xQueueGiveFromISR+0x5c>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <xQueueGiveFromISR+0x5e>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	61bb      	str	r3, [r7, #24]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078f6:	f002 fa0f 	bl	8009d18 <vPortValidateInterruptPriority>
	__asm volatile
 80078fa:	f3ef 8211 	mrs	r2, BASEPRI
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	617a      	str	r2, [r7, #20]
 8007910:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007912:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007914:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007922:	429a      	cmp	r2, r3
 8007924:	d22b      	bcs.n	800797e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800792c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007938:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d112      	bne.n	8007968 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b00      	cmp	r3, #0
 8007948:	d016      	beq.n	8007978 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	3324      	adds	r3, #36	; 0x24
 800794e:	4618      	mov	r0, r3
 8007950:	f001 f8e8 	bl	8008b24 <xTaskRemoveFromEventList>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00e      	beq.n	8007978 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2201      	movs	r2, #1
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	e007      	b.n	8007978 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800796c:	3301      	adds	r3, #1
 800796e:	b2db      	uxtb	r3, r3
 8007970:	b25a      	sxtb	r2, r3
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007978:	2301      	movs	r3, #1
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
 800797c:	e001      	b.n	8007982 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800797e:	2300      	movs	r3, #0
 8007980:	637b      	str	r3, [r7, #52]	; 0x34
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f383 8811 	msr	BASEPRI, r3
}
 800798c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007990:	4618      	mov	r0, r3
 8007992:	3738      	adds	r7, #56	; 0x38
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08c      	sub	sp, #48	; 0x30
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <xQueueReceive+0x30>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	623b      	str	r3, [r7, #32]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d103      	bne.n	80079d6 <xQueueReceive+0x3e>
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <xQueueReceive+0x42>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <xQueueReceive+0x44>
 80079da:	2300      	movs	r3, #0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xQueueReceive+0x5e>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	61fb      	str	r3, [r7, #28]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079f6:	f001 fa57 	bl	8008ea8 <xTaskGetSchedulerState>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <xQueueReceive+0x6e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <xQueueReceive+0x72>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <xQueueReceive+0x74>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <xQueueReceive+0x8e>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	61bb      	str	r3, [r7, #24]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a26:	f002 f895 	bl	8009b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01f      	beq.n	8007a76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a3a:	f000 fabe 	bl	8007fba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	1e5a      	subs	r2, r3, #1
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00f      	beq.n	8007a6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	3310      	adds	r3, #16
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 f866 	bl	8008b24 <xTaskRemoveFromEventList>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a5e:	4b3d      	ldr	r3, [pc, #244]	; (8007b54 <xQueueReceive+0x1bc>)
 8007a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a6e:	f002 f8a1 	bl	8009bb4 <vPortExitCritical>
				return pdPASS;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e069      	b.n	8007b4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d103      	bne.n	8007a84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a7c:	f002 f89a 	bl	8009bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a80:	2300      	movs	r3, #0
 8007a82:	e062      	b.n	8007b4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d106      	bne.n	8007a98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a8a:	f107 0310 	add.w	r3, r7, #16
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f001 f8ac 	bl	8008bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a94:	2301      	movs	r3, #1
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a98:	f002 f88c 	bl	8009bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a9c:	f000 fe18 	bl	80086d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007aa0:	f002 f858 	bl	8009b54 <vPortEnterCritical>
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aaa:	b25b      	sxtb	r3, r3
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d103      	bne.n	8007aba <xQueueReceive+0x122>
 8007ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ac0:	b25b      	sxtb	r3, r3
 8007ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac6:	d103      	bne.n	8007ad0 <xQueueReceive+0x138>
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ad0:	f002 f870 	bl	8009bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ad4:	1d3a      	adds	r2, r7, #4
 8007ad6:	f107 0310 	add.w	r3, r7, #16
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f001 f89b 	bl	8008c18 <xTaskCheckForTimeOut>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d123      	bne.n	8007b30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aea:	f000 fade 	bl	80080aa <prvIsQueueEmpty>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d017      	beq.n	8007b24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	3324      	adds	r3, #36	; 0x24
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	4611      	mov	r1, r2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 ffc1 	bl	8008a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b04:	f000 fa7f 	bl	8008006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b08:	f000 fdf0 	bl	80086ec <xTaskResumeAll>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d189      	bne.n	8007a26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <xQueueReceive+0x1bc>)
 8007b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	e780      	b.n	8007a26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b26:	f000 fa6e 	bl	8008006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b2a:	f000 fddf 	bl	80086ec <xTaskResumeAll>
 8007b2e:	e77a      	b.n	8007a26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b32:	f000 fa68 	bl	8008006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b36:	f000 fdd9 	bl	80086ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b3c:	f000 fab5 	bl	80080aa <prvIsQueueEmpty>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f43f af6f 	beq.w	8007a26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3730      	adds	r7, #48	; 0x30
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	e000ed04 	.word	0xe000ed04

08007b58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08e      	sub	sp, #56	; 0x38
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b62:	2300      	movs	r3, #0
 8007b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	623b      	str	r3, [r7, #32]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	61fb      	str	r3, [r7, #28]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ba8:	f001 f97e 	bl	8008ea8 <xTaskGetSchedulerState>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d102      	bne.n	8007bb8 <xQueueSemaphoreTake+0x60>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <xQueueSemaphoreTake+0x64>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <xQueueSemaphoreTake+0x66>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	61bb      	str	r3, [r7, #24]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bd8:	f001 ffbc 	bl	8009b54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d024      	beq.n	8007c32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	1e5a      	subs	r2, r3, #1
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d104      	bne.n	8007c02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007bf8:	f001 facc 	bl	8009194 <pvTaskIncrementMutexHeldCount>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00f      	beq.n	8007c2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	3310      	adds	r3, #16
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 ff88 	bl	8008b24 <xTaskRemoveFromEventList>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c1a:	4b54      	ldr	r3, [pc, #336]	; (8007d6c <xQueueSemaphoreTake+0x214>)
 8007c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c2a:	f001 ffc3 	bl	8009bb4 <vPortExitCritical>
				return pdPASS;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e097      	b.n	8007d62 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d111      	bne.n	8007c5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	617b      	str	r3, [r7, #20]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c54:	f001 ffae 	bl	8009bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e082      	b.n	8007d62 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c62:	f107 030c 	add.w	r3, r7, #12
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 ffc0 	bl	8008bec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c70:	f001 ffa0 	bl	8009bb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c74:	f000 fd2c 	bl	80086d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c78:	f001 ff6c 	bl	8009b54 <vPortEnterCritical>
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c82:	b25b      	sxtb	r3, r3
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d103      	bne.n	8007c92 <xQueueSemaphoreTake+0x13a>
 8007c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c98:	b25b      	sxtb	r3, r3
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d103      	bne.n	8007ca8 <xQueueSemaphoreTake+0x150>
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ca8:	f001 ff84 	bl	8009bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cac:	463a      	mov	r2, r7
 8007cae:	f107 030c 	add.w	r3, r7, #12
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 ffaf 	bl	8008c18 <xTaskCheckForTimeOut>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d132      	bne.n	8007d26 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cc2:	f000 f9f2 	bl	80080aa <prvIsQueueEmpty>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d026      	beq.n	8007d1a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d109      	bne.n	8007ce8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007cd4:	f001 ff3e 	bl	8009b54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 f901 	bl	8008ee4 <xTaskPriorityInherit>
 8007ce2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007ce4:	f001 ff66 	bl	8009bb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	3324      	adds	r3, #36	; 0x24
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fec7 	bl	8008a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cf8:	f000 f985 	bl	8008006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cfc:	f000 fcf6 	bl	80086ec <xTaskResumeAll>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f47f af68 	bne.w	8007bd8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007d08:	4b18      	ldr	r3, [pc, #96]	; (8007d6c <xQueueSemaphoreTake+0x214>)
 8007d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	e75e      	b.n	8007bd8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d1c:	f000 f973 	bl	8008006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d20:	f000 fce4 	bl	80086ec <xTaskResumeAll>
 8007d24:	e758      	b.n	8007bd8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d28:	f000 f96d 	bl	8008006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d2c:	f000 fcde 	bl	80086ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d32:	f000 f9ba 	bl	80080aa <prvIsQueueEmpty>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f43f af4d 	beq.w	8007bd8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00d      	beq.n	8007d60 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007d44:	f001 ff06 	bl	8009b54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d4a:	f000 f8b4 	bl	8007eb6 <prvGetDisinheritPriorityAfterTimeout>
 8007d4e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 f99a 	bl	8009090 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d5c:	f001 ff2a 	bl	8009bb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3738      	adds	r7, #56	; 0x38
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	e000ed04 	.word	0xe000ed04

08007d70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08e      	sub	sp, #56	; 0x38
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	623b      	str	r3, [r7, #32]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d103      	bne.n	8007daa <xQueueReceiveFromISR+0x3a>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <xQueueReceiveFromISR+0x3e>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <xQueueReceiveFromISR+0x40>
 8007dae:	2300      	movs	r3, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	61fb      	str	r3, [r7, #28]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007dca:	f001 ffa5 	bl	8009d18 <vPortValidateInterruptPriority>
	__asm volatile
 8007dce:	f3ef 8211 	mrs	r2, BASEPRI
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	61ba      	str	r2, [r7, #24]
 8007de4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007de6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007de8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d02f      	beq.n	8007e56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e04:	f000 f8d9 	bl	8007fba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	1e5a      	subs	r2, r3, #1
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d112      	bne.n	8007e40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d016      	beq.n	8007e50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	3310      	adds	r3, #16
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fe7c 	bl	8008b24 <xTaskRemoveFromEventList>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00e      	beq.n	8007e50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	e007      	b.n	8007e50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e44:	3301      	adds	r3, #1
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	b25a      	sxtb	r2, r3
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007e50:	2301      	movs	r3, #1
 8007e52:	637b      	str	r3, [r7, #52]	; 0x34
 8007e54:	e001      	b.n	8007e5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f383 8811 	msr	BASEPRI, r3
}
 8007e64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3738      	adds	r7, #56	; 0x38
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <vQueueDelete+0x28>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	60bb      	str	r3, [r7, #8]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 f95f 	bl	800815c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f002 f841 	bl	8009f30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b085      	sub	sp, #20
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d006      	beq.n	8007ed4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	e001      	b.n	8007ed8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
	}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b086      	sub	sp, #24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d14d      	bne.n	8007fa8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f84f 	bl	8008fb4 <xTaskPriorityDisinherit>
 8007f16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	609a      	str	r2, [r3, #8]
 8007f1e:	e043      	b.n	8007fa8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d119      	bne.n	8007f5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6858      	ldr	r0, [r3, #4]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68b9      	ldr	r1, [r7, #8]
 8007f32:	f002 ff98 	bl	800ae66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	441a      	add	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d32b      	bcc.n	8007fa8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	605a      	str	r2, [r3, #4]
 8007f58:	e026      	b.n	8007fa8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68d8      	ldr	r0, [r3, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	461a      	mov	r2, r3
 8007f64:	68b9      	ldr	r1, [r7, #8]
 8007f66:	f002 ff7e 	bl	800ae66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	425b      	negs	r3, r3
 8007f74:	441a      	add	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d207      	bcs.n	8007f96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	689a      	ldr	r2, [r3, #8]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	425b      	negs	r3, r3
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d105      	bne.n	8007fa8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007fb0:	697b      	ldr	r3, [r7, #20]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d018      	beq.n	8007ffe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd4:	441a      	add	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d303      	bcc.n	8007fee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68d9      	ldr	r1, [r3, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6838      	ldr	r0, [r7, #0]
 8007ffa:	f002 ff34 	bl	800ae66 <memcpy>
	}
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800800e:	f001 fda1 	bl	8009b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008018:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800801a:	e011      	b.n	8008040 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b00      	cmp	r3, #0
 8008022:	d012      	beq.n	800804a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3324      	adds	r3, #36	; 0x24
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fd7b 	bl	8008b24 <xTaskRemoveFromEventList>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008034:	f000 fe52 	bl	8008cdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	3b01      	subs	r3, #1
 800803c:	b2db      	uxtb	r3, r3
 800803e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008044:	2b00      	cmp	r3, #0
 8008046:	dce9      	bgt.n	800801c <prvUnlockQueue+0x16>
 8008048:	e000      	b.n	800804c <prvUnlockQueue+0x46>
					break;
 800804a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	22ff      	movs	r2, #255	; 0xff
 8008050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008054:	f001 fdae 	bl	8009bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008058:	f001 fd7c 	bl	8009b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008062:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008064:	e011      	b.n	800808a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d012      	beq.n	8008094 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3310      	adds	r3, #16
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fd56 	bl	8008b24 <xTaskRemoveFromEventList>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800807e:	f000 fe2d 	bl	8008cdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	3b01      	subs	r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800808a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800808e:	2b00      	cmp	r3, #0
 8008090:	dce9      	bgt.n	8008066 <prvUnlockQueue+0x60>
 8008092:	e000      	b.n	8008096 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008094:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	22ff      	movs	r2, #255	; 0xff
 800809a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800809e:	f001 fd89 	bl	8009bb4 <vPortExitCritical>
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080b2:	f001 fd4f 	bl	8009b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080be:	2301      	movs	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	e001      	b.n	80080c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080c8:	f001 fd74 	bl	8009bb4 <vPortExitCritical>

	return xReturn;
 80080cc:	68fb      	ldr	r3, [r7, #12]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080de:	f001 fd39 	bl	8009b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d102      	bne.n	80080f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080ee:	2301      	movs	r3, #1
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	e001      	b.n	80080f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080f8:	f001 fd5c 	bl	8009bb4 <vPortExitCritical>

	return xReturn;
 80080fc:	68fb      	ldr	r3, [r7, #12]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	e014      	b.n	8008142 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008118:	4a0f      	ldr	r2, [pc, #60]	; (8008158 <vQueueAddToRegistry+0x50>)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008124:	490c      	ldr	r1, [pc, #48]	; (8008158 <vQueueAddToRegistry+0x50>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800812e:	4a0a      	ldr	r2, [pc, #40]	; (8008158 <vQueueAddToRegistry+0x50>)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	4413      	add	r3, r2
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800813a:	e006      	b.n	800814a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b07      	cmp	r3, #7
 8008146:	d9e7      	bls.n	8008118 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	20004f2c 	.word	0x20004f2c

0800815c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e016      	b.n	8008198 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800816a:	4a10      	ldr	r2, [pc, #64]	; (80081ac <vQueueUnregisterQueue+0x50>)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	4413      	add	r3, r2
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	429a      	cmp	r2, r3
 8008178:	d10b      	bne.n	8008192 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800817a:	4a0c      	ldr	r2, [pc, #48]	; (80081ac <vQueueUnregisterQueue+0x50>)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2100      	movs	r1, #0
 8008180:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008184:	4a09      	ldr	r2, [pc, #36]	; (80081ac <vQueueUnregisterQueue+0x50>)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	4413      	add	r3, r2
 800818c:	2200      	movs	r2, #0
 800818e:	605a      	str	r2, [r3, #4]
				break;
 8008190:	e006      	b.n	80081a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b07      	cmp	r3, #7
 800819c:	d9e5      	bls.n	800816a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	20004f2c 	.word	0x20004f2c

080081b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081c0:	f001 fcc8 	bl	8009b54 <vPortEnterCritical>
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081ca:	b25b      	sxtb	r3, r3
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d0:	d103      	bne.n	80081da <vQueueWaitForMessageRestricted+0x2a>
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e0:	b25b      	sxtb	r3, r3
 80081e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e6:	d103      	bne.n	80081f0 <vQueueWaitForMessageRestricted+0x40>
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081f0:	f001 fce0 	bl	8009bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d106      	bne.n	800820a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	3324      	adds	r3, #36	; 0x24
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fc61 	bl	8008acc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800820a:	6978      	ldr	r0, [r7, #20]
 800820c:	f7ff fefb 	bl	8008006 <prvUnlockQueue>
	}
 8008210:	bf00      	nop
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08e      	sub	sp, #56	; 0x38
 800821c:	af04      	add	r7, sp, #16
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xTaskCreateStatic+0x2a>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	623b      	str	r3, [r7, #32]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <xTaskCreateStatic+0x46>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	61fb      	str	r3, [r7, #28]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800825e:	23bc      	movs	r3, #188	; 0xbc
 8008260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2bbc      	cmp	r3, #188	; 0xbc
 8008266:	d00a      	beq.n	800827e <xTaskCreateStatic+0x66>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	61bb      	str	r3, [r7, #24]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800827e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	2b00      	cmp	r3, #0
 8008284:	d01e      	beq.n	80082c4 <xTaskCreateStatic+0xac>
 8008286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01b      	beq.n	80082c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008294:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	2202      	movs	r2, #2
 800829a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800829e:	2300      	movs	r3, #0
 80082a0:	9303      	str	r3, [sp, #12]
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	9302      	str	r3, [sp, #8]
 80082a6:	f107 0314 	add.w	r3, r7, #20
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 f850 	bl	800835c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082be:	f000 f8f3 	bl	80084a8 <prvAddNewTaskToReadyList>
 80082c2:	e001      	b.n	80082c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082c8:	697b      	ldr	r3, [r7, #20]
	}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3728      	adds	r7, #40	; 0x28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b08c      	sub	sp, #48	; 0x30
 80082d6:	af04      	add	r7, sp, #16
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	4613      	mov	r3, r2
 80082e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 fd56 	bl	8009d98 <pvPortMalloc>
 80082ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00e      	beq.n	8008312 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082f4:	20bc      	movs	r0, #188	; 0xbc
 80082f6:	f001 fd4f 	bl	8009d98 <pvPortMalloc>
 80082fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	631a      	str	r2, [r3, #48]	; 0x30
 8008308:	e005      	b.n	8008316 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	f001 fe10 	bl	8009f30 <vPortFree>
 8008310:	e001      	b.n	8008316 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d017      	beq.n	800834c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008324:	88fa      	ldrh	r2, [r7, #6]
 8008326:	2300      	movs	r3, #0
 8008328:	9303      	str	r3, [sp, #12]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	9302      	str	r3, [sp, #8]
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	68b9      	ldr	r1, [r7, #8]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 f80e 	bl	800835c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008340:	69f8      	ldr	r0, [r7, #28]
 8008342:	f000 f8b1 	bl	80084a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008346:	2301      	movs	r3, #1
 8008348:	61bb      	str	r3, [r7, #24]
 800834a:	e002      	b.n	8008352 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800834c:	f04f 33ff 	mov.w	r3, #4294967295
 8008350:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008352:	69bb      	ldr	r3, [r7, #24]
	}
 8008354:	4618      	mov	r0, r3
 8008356:	3720      	adds	r7, #32
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	461a      	mov	r2, r3
 8008374:	21a5      	movs	r1, #165	; 0xa5
 8008376:	f002 fd84 	bl	800ae82 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008384:	3b01      	subs	r3, #1
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	f023 0307 	bic.w	r3, r3, #7
 8008392:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	617b      	str	r3, [r7, #20]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d01f      	beq.n	80083fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083ba:	2300      	movs	r3, #0
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	e012      	b.n	80083e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	7819      	ldrb	r1, [r3, #0]
 80083c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	3334      	adds	r3, #52	; 0x34
 80083d0:	460a      	mov	r2, r1
 80083d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d006      	beq.n	80083ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	3301      	adds	r3, #1
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	2b0f      	cmp	r3, #15
 80083ea:	d9e9      	bls.n	80083c0 <prvInitialiseNewTask+0x64>
 80083ec:	e000      	b.n	80083f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80083ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083f8:	e003      	b.n	8008402 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	2b37      	cmp	r3, #55	; 0x37
 8008406:	d901      	bls.n	800840c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008408:	2337      	movs	r3, #55	; 0x37
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008410:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008416:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	2200      	movs	r2, #0
 800841c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	3304      	adds	r3, #4
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fe56 	bl	80070d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	3318      	adds	r3, #24
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fe51 	bl	80070d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008436:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008446:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	2200      	movs	r2, #0
 8008454:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	3354      	adds	r3, #84	; 0x54
 800845c:	2260      	movs	r2, #96	; 0x60
 800845e:	2100      	movs	r1, #0
 8008460:	4618      	mov	r0, r3
 8008462:	f002 fd0e 	bl	800ae82 <memset>
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	4a0c      	ldr	r2, [pc, #48]	; (800849c <prvInitialiseNewTask+0x140>)
 800846a:	659a      	str	r2, [r3, #88]	; 0x58
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	4a0c      	ldr	r2, [pc, #48]	; (80084a0 <prvInitialiseNewTask+0x144>)
 8008470:	65da      	str	r2, [r3, #92]	; 0x5c
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	4a0b      	ldr	r2, [pc, #44]	; (80084a4 <prvInitialiseNewTask+0x148>)
 8008476:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	68f9      	ldr	r1, [r7, #12]
 800847c:	69b8      	ldr	r0, [r7, #24]
 800847e:	f001 fa3f 	bl	8009900 <pxPortInitialiseStack>
 8008482:	4602      	mov	r2, r0
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008492:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008494:	bf00      	nop
 8008496:	3720      	adds	r7, #32
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	0800c35c 	.word	0x0800c35c
 80084a0:	0800c37c 	.word	0x0800c37c
 80084a4:	0800c33c 	.word	0x0800c33c

080084a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084b0:	f001 fb50 	bl	8009b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084b4:	4b2d      	ldr	r3, [pc, #180]	; (800856c <prvAddNewTaskToReadyList+0xc4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3301      	adds	r3, #1
 80084ba:	4a2c      	ldr	r2, [pc, #176]	; (800856c <prvAddNewTaskToReadyList+0xc4>)
 80084bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084be:	4b2c      	ldr	r3, [pc, #176]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084c6:	4a2a      	ldr	r2, [pc, #168]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084cc:	4b27      	ldr	r3, [pc, #156]	; (800856c <prvAddNewTaskToReadyList+0xc4>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d110      	bne.n	80084f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084d4:	f000 fc26 	bl	8008d24 <prvInitialiseTaskLists>
 80084d8:	e00d      	b.n	80084f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084da:	4b26      	ldr	r3, [pc, #152]	; (8008574 <prvAddNewTaskToReadyList+0xcc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d109      	bne.n	80084f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084e2:	4b23      	ldr	r3, [pc, #140]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d802      	bhi.n	80084f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084f0:	4a1f      	ldr	r2, [pc, #124]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084f6:	4b20      	ldr	r3, [pc, #128]	; (8008578 <prvAddNewTaskToReadyList+0xd0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3301      	adds	r3, #1
 80084fc:	4a1e      	ldr	r2, [pc, #120]	; (8008578 <prvAddNewTaskToReadyList+0xd0>)
 80084fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008500:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <prvAddNewTaskToReadyList+0xd0>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	4b1b      	ldr	r3, [pc, #108]	; (800857c <prvAddNewTaskToReadyList+0xd4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d903      	bls.n	800851c <prvAddNewTaskToReadyList+0x74>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	4a18      	ldr	r2, [pc, #96]	; (800857c <prvAddNewTaskToReadyList+0xd4>)
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4a15      	ldr	r2, [pc, #84]	; (8008580 <prvAddNewTaskToReadyList+0xd8>)
 800852a:	441a      	add	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3304      	adds	r3, #4
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f7fe fddb 	bl	80070ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008538:	f001 fb3c 	bl	8009bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800853c:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <prvAddNewTaskToReadyList+0xcc>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00e      	beq.n	8008562 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008544:	4b0a      	ldr	r3, [pc, #40]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	429a      	cmp	r2, r3
 8008550:	d207      	bcs.n	8008562 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <prvAddNewTaskToReadyList+0xdc>)
 8008554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000eec 	.word	0x20000eec
 8008570:	20000a18 	.word	0x20000a18
 8008574:	20000ef8 	.word	0x20000ef8
 8008578:	20000f08 	.word	0x20000f08
 800857c:	20000ef4 	.word	0x20000ef4
 8008580:	20000a1c 	.word	0x20000a1c
 8008584:	e000ed04 	.word	0xe000ed04

08008588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d017      	beq.n	80085ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <vTaskDelay+0x60>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <vTaskDelay+0x30>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	60bb      	str	r3, [r7, #8]
}
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80085b8:	f000 f88a 	bl	80086d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085bc:	2100      	movs	r1, #0
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fdfc 	bl	80091bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085c4:	f000 f892 	bl	80086ec <xTaskResumeAll>
 80085c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d107      	bne.n	80085e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80085d0:	4b06      	ldr	r3, [pc, #24]	; (80085ec <vTaskDelay+0x64>)
 80085d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085e0:	bf00      	nop
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	20000f14 	.word	0x20000f14
 80085ec:	e000ed04 	.word	0xe000ed04

080085f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08a      	sub	sp, #40	; 0x28
 80085f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085fe:	463a      	mov	r2, r7
 8008600:	1d39      	adds	r1, r7, #4
 8008602:	f107 0308 	add.w	r3, r7, #8
 8008606:	4618      	mov	r0, r3
 8008608:	f7fe fd10 	bl	800702c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	9202      	str	r2, [sp, #8]
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	2300      	movs	r3, #0
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	2300      	movs	r3, #0
 800861c:	460a      	mov	r2, r1
 800861e:	4924      	ldr	r1, [pc, #144]	; (80086b0 <vTaskStartScheduler+0xc0>)
 8008620:	4824      	ldr	r0, [pc, #144]	; (80086b4 <vTaskStartScheduler+0xc4>)
 8008622:	f7ff fdf9 	bl	8008218 <xTaskCreateStatic>
 8008626:	4603      	mov	r3, r0
 8008628:	4a23      	ldr	r2, [pc, #140]	; (80086b8 <vTaskStartScheduler+0xc8>)
 800862a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800862c:	4b22      	ldr	r3, [pc, #136]	; (80086b8 <vTaskStartScheduler+0xc8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008634:	2301      	movs	r3, #1
 8008636:	617b      	str	r3, [r7, #20]
 8008638:	e001      	b.n	800863e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800863a:	2300      	movs	r3, #0
 800863c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d102      	bne.n	800864a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008644:	f000 fe0e 	bl	8009264 <xTimerCreateTimerTask>
 8008648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d11b      	bne.n	8008688 <vTaskStartScheduler+0x98>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	613b      	str	r3, [r7, #16]
}
 8008662:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008664:	4b15      	ldr	r3, [pc, #84]	; (80086bc <vTaskStartScheduler+0xcc>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3354      	adds	r3, #84	; 0x54
 800866a:	4a15      	ldr	r2, [pc, #84]	; (80086c0 <vTaskStartScheduler+0xd0>)
 800866c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800866e:	4b15      	ldr	r3, [pc, #84]	; (80086c4 <vTaskStartScheduler+0xd4>)
 8008670:	f04f 32ff 	mov.w	r2, #4294967295
 8008674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <vTaskStartScheduler+0xd8>)
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800867c:	4b13      	ldr	r3, [pc, #76]	; (80086cc <vTaskStartScheduler+0xdc>)
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008682:	f001 f9c5 	bl	8009a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008686:	e00e      	b.n	80086a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868e:	d10a      	bne.n	80086a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	60fb      	str	r3, [r7, #12]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <vTaskStartScheduler+0xb4>
}
 80086a6:	bf00      	nop
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	0800c17c 	.word	0x0800c17c
 80086b4:	08008cf5 	.word	0x08008cf5
 80086b8:	20000f10 	.word	0x20000f10
 80086bc:	20000a18 	.word	0x20000a18
 80086c0:	2000020c 	.word	0x2000020c
 80086c4:	20000f0c 	.word	0x20000f0c
 80086c8:	20000ef8 	.word	0x20000ef8
 80086cc:	20000ef0 	.word	0x20000ef0

080086d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80086d4:	4b04      	ldr	r3, [pc, #16]	; (80086e8 <vTaskSuspendAll+0x18>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	4a03      	ldr	r2, [pc, #12]	; (80086e8 <vTaskSuspendAll+0x18>)
 80086dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086de:	bf00      	nop
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	20000f14 	.word	0x20000f14

080086ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086fa:	4b42      	ldr	r3, [pc, #264]	; (8008804 <xTaskResumeAll+0x118>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10a      	bne.n	8008718 <xTaskResumeAll+0x2c>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	603b      	str	r3, [r7, #0]
}
 8008714:	bf00      	nop
 8008716:	e7fe      	b.n	8008716 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008718:	f001 fa1c 	bl	8009b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800871c:	4b39      	ldr	r3, [pc, #228]	; (8008804 <xTaskResumeAll+0x118>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3b01      	subs	r3, #1
 8008722:	4a38      	ldr	r2, [pc, #224]	; (8008804 <xTaskResumeAll+0x118>)
 8008724:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008726:	4b37      	ldr	r3, [pc, #220]	; (8008804 <xTaskResumeAll+0x118>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d162      	bne.n	80087f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800872e:	4b36      	ldr	r3, [pc, #216]	; (8008808 <xTaskResumeAll+0x11c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d05e      	beq.n	80087f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008736:	e02f      	b.n	8008798 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008738:	4b34      	ldr	r3, [pc, #208]	; (800880c <xTaskResumeAll+0x120>)
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3318      	adds	r3, #24
 8008744:	4618      	mov	r0, r3
 8008746:	f7fe fd2f 	bl	80071a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3304      	adds	r3, #4
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fd2a 	bl	80071a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008758:	4b2d      	ldr	r3, [pc, #180]	; (8008810 <xTaskResumeAll+0x124>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d903      	bls.n	8008768 <xTaskResumeAll+0x7c>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	4a2a      	ldr	r2, [pc, #168]	; (8008810 <xTaskResumeAll+0x124>)
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4a27      	ldr	r2, [pc, #156]	; (8008814 <xTaskResumeAll+0x128>)
 8008776:	441a      	add	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3304      	adds	r3, #4
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f7fe fcb5 	bl	80070ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008788:	4b23      	ldr	r3, [pc, #140]	; (8008818 <xTaskResumeAll+0x12c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	429a      	cmp	r2, r3
 8008790:	d302      	bcc.n	8008798 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008792:	4b22      	ldr	r3, [pc, #136]	; (800881c <xTaskResumeAll+0x130>)
 8008794:	2201      	movs	r2, #1
 8008796:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008798:	4b1c      	ldr	r3, [pc, #112]	; (800880c <xTaskResumeAll+0x120>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1cb      	bne.n	8008738 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087a6:	f000 fb5f 	bl	8008e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087aa:	4b1d      	ldr	r3, [pc, #116]	; (8008820 <xTaskResumeAll+0x134>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d010      	beq.n	80087d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087b6:	f000 f847 	bl	8008848 <xTaskIncrementTick>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80087c0:	4b16      	ldr	r3, [pc, #88]	; (800881c <xTaskResumeAll+0x130>)
 80087c2:	2201      	movs	r2, #1
 80087c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1f1      	bne.n	80087b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80087d2:	4b13      	ldr	r3, [pc, #76]	; (8008820 <xTaskResumeAll+0x134>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087d8:	4b10      	ldr	r3, [pc, #64]	; (800881c <xTaskResumeAll+0x130>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087e4:	4b0f      	ldr	r3, [pc, #60]	; (8008824 <xTaskResumeAll+0x138>)
 80087e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087f4:	f001 f9de 	bl	8009bb4 <vPortExitCritical>

	return xAlreadyYielded;
 80087f8:	68bb      	ldr	r3, [r7, #8]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000f14 	.word	0x20000f14
 8008808:	20000eec 	.word	0x20000eec
 800880c:	20000eac 	.word	0x20000eac
 8008810:	20000ef4 	.word	0x20000ef4
 8008814:	20000a1c 	.word	0x20000a1c
 8008818:	20000a18 	.word	0x20000a18
 800881c:	20000f00 	.word	0x20000f00
 8008820:	20000efc 	.word	0x20000efc
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800882e:	4b05      	ldr	r3, [pc, #20]	; (8008844 <xTaskGetTickCount+0x1c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008834:	687b      	ldr	r3, [r7, #4]
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	20000ef0 	.word	0x20000ef0

08008848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008852:	4b4f      	ldr	r3, [pc, #316]	; (8008990 <xTaskIncrementTick+0x148>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f040 808f 	bne.w	800897a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800885c:	4b4d      	ldr	r3, [pc, #308]	; (8008994 <xTaskIncrementTick+0x14c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3301      	adds	r3, #1
 8008862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008864:	4a4b      	ldr	r2, [pc, #300]	; (8008994 <xTaskIncrementTick+0x14c>)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d120      	bne.n	80088b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008870:	4b49      	ldr	r3, [pc, #292]	; (8008998 <xTaskIncrementTick+0x150>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <xTaskIncrementTick+0x48>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	603b      	str	r3, [r7, #0]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <xTaskIncrementTick+0x46>
 8008890:	4b41      	ldr	r3, [pc, #260]	; (8008998 <xTaskIncrementTick+0x150>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	4b41      	ldr	r3, [pc, #260]	; (800899c <xTaskIncrementTick+0x154>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a3f      	ldr	r2, [pc, #252]	; (8008998 <xTaskIncrementTick+0x150>)
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	4a3f      	ldr	r2, [pc, #252]	; (800899c <xTaskIncrementTick+0x154>)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	4b3e      	ldr	r3, [pc, #248]	; (80089a0 <xTaskIncrementTick+0x158>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	4a3d      	ldr	r2, [pc, #244]	; (80089a0 <xTaskIncrementTick+0x158>)
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	f000 fadb 	bl	8008e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088b2:	4b3c      	ldr	r3, [pc, #240]	; (80089a4 <xTaskIncrementTick+0x15c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d349      	bcc.n	8008950 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088bc:	4b36      	ldr	r3, [pc, #216]	; (8008998 <xTaskIncrementTick+0x150>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d104      	bne.n	80088d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c6:	4b37      	ldr	r3, [pc, #220]	; (80089a4 <xTaskIncrementTick+0x15c>)
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	601a      	str	r2, [r3, #0]
					break;
 80088ce:	e03f      	b.n	8008950 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d0:	4b31      	ldr	r3, [pc, #196]	; (8008998 <xTaskIncrementTick+0x150>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d203      	bcs.n	80088f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088e8:	4a2e      	ldr	r2, [pc, #184]	; (80089a4 <xTaskIncrementTick+0x15c>)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088ee:	e02f      	b.n	8008950 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	3304      	adds	r3, #4
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe fc57 	bl	80071a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d004      	beq.n	800890c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	3318      	adds	r3, #24
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fc4e 	bl	80071a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008910:	4b25      	ldr	r3, [pc, #148]	; (80089a8 <xTaskIncrementTick+0x160>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d903      	bls.n	8008920 <xTaskIncrementTick+0xd8>
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	4a22      	ldr	r2, [pc, #136]	; (80089a8 <xTaskIncrementTick+0x160>)
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4a1f      	ldr	r2, [pc, #124]	; (80089ac <xTaskIncrementTick+0x164>)
 800892e:	441a      	add	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	3304      	adds	r3, #4
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f7fe fbd9 	bl	80070ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008940:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <xTaskIncrementTick+0x168>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	429a      	cmp	r2, r3
 8008948:	d3b8      	bcc.n	80088bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800894a:	2301      	movs	r3, #1
 800894c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800894e:	e7b5      	b.n	80088bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008950:	4b17      	ldr	r3, [pc, #92]	; (80089b0 <xTaskIncrementTick+0x168>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	4915      	ldr	r1, [pc, #84]	; (80089ac <xTaskIncrementTick+0x164>)
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d901      	bls.n	800896c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008968:	2301      	movs	r3, #1
 800896a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800896c:	4b11      	ldr	r3, [pc, #68]	; (80089b4 <xTaskIncrementTick+0x16c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d007      	beq.n	8008984 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e004      	b.n	8008984 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800897a:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <xTaskIncrementTick+0x170>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3301      	adds	r3, #1
 8008980:	4a0d      	ldr	r2, [pc, #52]	; (80089b8 <xTaskIncrementTick+0x170>)
 8008982:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008984:	697b      	ldr	r3, [r7, #20]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20000f14 	.word	0x20000f14
 8008994:	20000ef0 	.word	0x20000ef0
 8008998:	20000ea4 	.word	0x20000ea4
 800899c:	20000ea8 	.word	0x20000ea8
 80089a0:	20000f04 	.word	0x20000f04
 80089a4:	20000f0c 	.word	0x20000f0c
 80089a8:	20000ef4 	.word	0x20000ef4
 80089ac:	20000a1c 	.word	0x20000a1c
 80089b0:	20000a18 	.word	0x20000a18
 80089b4:	20000f00 	.word	0x20000f00
 80089b8:	20000efc 	.word	0x20000efc

080089bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089c2:	4b2a      	ldr	r3, [pc, #168]	; (8008a6c <vTaskSwitchContext+0xb0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089ca:	4b29      	ldr	r3, [pc, #164]	; (8008a70 <vTaskSwitchContext+0xb4>)
 80089cc:	2201      	movs	r2, #1
 80089ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089d0:	e046      	b.n	8008a60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80089d2:	4b27      	ldr	r3, [pc, #156]	; (8008a70 <vTaskSwitchContext+0xb4>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d8:	4b26      	ldr	r3, [pc, #152]	; (8008a74 <vTaskSwitchContext+0xb8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	e010      	b.n	8008a02 <vTaskSwitchContext+0x46>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <vTaskSwitchContext+0x40>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	607b      	str	r3, [r7, #4]
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <vTaskSwitchContext+0x3e>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	491d      	ldr	r1, [pc, #116]	; (8008a78 <vTaskSwitchContext+0xbc>)
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	440b      	add	r3, r1
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0e4      	beq.n	80089e0 <vTaskSwitchContext+0x24>
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4a15      	ldr	r2, [pc, #84]	; (8008a78 <vTaskSwitchContext+0xbc>)
 8008a22:	4413      	add	r3, r2
 8008a24:	60bb      	str	r3, [r7, #8]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	605a      	str	r2, [r3, #4]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	3308      	adds	r3, #8
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d104      	bne.n	8008a46 <vTaskSwitchContext+0x8a>
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	605a      	str	r2, [r3, #4]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	4a0b      	ldr	r2, [pc, #44]	; (8008a7c <vTaskSwitchContext+0xc0>)
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	4a08      	ldr	r2, [pc, #32]	; (8008a74 <vTaskSwitchContext+0xb8>)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <vTaskSwitchContext+0xc0>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3354      	adds	r3, #84	; 0x54
 8008a5c:	4a08      	ldr	r2, [pc, #32]	; (8008a80 <vTaskSwitchContext+0xc4>)
 8008a5e:	6013      	str	r3, [r2, #0]
}
 8008a60:	bf00      	nop
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	20000f14 	.word	0x20000f14
 8008a70:	20000f00 	.word	0x20000f00
 8008a74:	20000ef4 	.word	0x20000ef4
 8008a78:	20000a1c 	.word	0x20000a1c
 8008a7c:	20000a18 	.word	0x20000a18
 8008a80:	2000020c 	.word	0x2000020c

08008a84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	60fb      	str	r3, [r7, #12]
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008aaa:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <vTaskPlaceOnEventList+0x44>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3318      	adds	r3, #24
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7fe fb3f 	bl	8007136 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ab8:	2101      	movs	r1, #1
 8008aba:	6838      	ldr	r0, [r7, #0]
 8008abc:	f000 fb7e 	bl	80091bc <prvAddCurrentTaskToDelayedList>
}
 8008ac0:	bf00      	nop
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	20000a18 	.word	0x20000a18

08008acc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	617b      	str	r3, [r7, #20]
}
 8008af0:	bf00      	nop
 8008af2:	e7fe      	b.n	8008af2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <vTaskPlaceOnEventListRestricted+0x54>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3318      	adds	r3, #24
 8008afa:	4619      	mov	r1, r3
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7fe faf6 	bl	80070ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b08:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	68b8      	ldr	r0, [r7, #8]
 8008b12:	f000 fb53 	bl	80091bc <prvAddCurrentTaskToDelayedList>
	}
 8008b16:	bf00      	nop
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20000a18 	.word	0x20000a18

08008b24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	60fb      	str	r3, [r7, #12]
}
 8008b4c:	bf00      	nop
 8008b4e:	e7fe      	b.n	8008b4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	3318      	adds	r3, #24
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe fb27 	bl	80071a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b5a:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <xTaskRemoveFromEventList+0xb0>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d11d      	bne.n	8008b9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	3304      	adds	r3, #4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe fb1e 	bl	80071a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b70:	4b19      	ldr	r3, [pc, #100]	; (8008bd8 <xTaskRemoveFromEventList+0xb4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d903      	bls.n	8008b80 <xTaskRemoveFromEventList+0x5c>
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	4a16      	ldr	r2, [pc, #88]	; (8008bd8 <xTaskRemoveFromEventList+0xb4>)
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4a13      	ldr	r2, [pc, #76]	; (8008bdc <xTaskRemoveFromEventList+0xb8>)
 8008b8e:	441a      	add	r2, r3
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	3304      	adds	r3, #4
 8008b94:	4619      	mov	r1, r3
 8008b96:	4610      	mov	r0, r2
 8008b98:	f7fe faa9 	bl	80070ee <vListInsertEnd>
 8008b9c:	e005      	b.n	8008baa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	3318      	adds	r3, #24
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	480e      	ldr	r0, [pc, #56]	; (8008be0 <xTaskRemoveFromEventList+0xbc>)
 8008ba6:	f7fe faa2 	bl	80070ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bae:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <xTaskRemoveFromEventList+0xc0>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d905      	bls.n	8008bc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <xTaskRemoveFromEventList+0xc4>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	e001      	b.n	8008bc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008bc8:	697b      	ldr	r3, [r7, #20]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000f14 	.word	0x20000f14
 8008bd8:	20000ef4 	.word	0x20000ef4
 8008bdc:	20000a1c 	.word	0x20000a1c
 8008be0:	20000eac 	.word	0x20000eac
 8008be4:	20000a18 	.word	0x20000a18
 8008be8:	20000f00 	.word	0x20000f00

08008bec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bf4:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <vTaskInternalSetTimeOutState+0x24>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bfc:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <vTaskInternalSetTimeOutState+0x28>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	605a      	str	r2, [r3, #4]
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	20000f04 	.word	0x20000f04
 8008c14:	20000ef0 	.word	0x20000ef0

08008c18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	613b      	str	r3, [r7, #16]
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10a      	bne.n	8008c5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	60fb      	str	r3, [r7, #12]
}
 8008c56:	bf00      	nop
 8008c58:	e7fe      	b.n	8008c58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008c5a:	f000 ff7b 	bl	8009b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c5e:	4b1d      	ldr	r3, [pc, #116]	; (8008cd4 <xTaskCheckForTimeOut+0xbc>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	d102      	bne.n	8008c7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61fb      	str	r3, [r7, #28]
 8008c7c:	e023      	b.n	8008cc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <xTaskCheckForTimeOut+0xc0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d007      	beq.n	8008c9a <xTaskCheckForTimeOut+0x82>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d302      	bcc.n	8008c9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c94:	2301      	movs	r3, #1
 8008c96:	61fb      	str	r3, [r7, #28]
 8008c98:	e015      	b.n	8008cc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d20b      	bcs.n	8008cbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	1ad2      	subs	r2, r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff ff9b 	bl	8008bec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]
 8008cba:	e004      	b.n	8008cc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cc6:	f000 ff75 	bl	8009bb4 <vPortExitCritical>

	return xReturn;
 8008cca:	69fb      	ldr	r3, [r7, #28]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3720      	adds	r7, #32
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000ef0 	.word	0x20000ef0
 8008cd8:	20000f04 	.word	0x20000f04

08008cdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ce0:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <vTaskMissedYield+0x14>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]
}
 8008ce6:	bf00      	nop
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20000f00 	.word	0x20000f00

08008cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cfc:	f000 f852 	bl	8008da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <prvIdleTask+0x28>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d9f9      	bls.n	8008cfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d08:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <prvIdleTask+0x2c>)
 8008d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d18:	e7f0      	b.n	8008cfc <prvIdleTask+0x8>
 8008d1a:	bf00      	nop
 8008d1c:	20000a1c 	.word	0x20000a1c
 8008d20:	e000ed04 	.word	0xe000ed04

08008d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	607b      	str	r3, [r7, #4]
 8008d2e:	e00c      	b.n	8008d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4a12      	ldr	r2, [pc, #72]	; (8008d84 <prvInitialiseTaskLists+0x60>)
 8008d3c:	4413      	add	r3, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe f9a8 	bl	8007094 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3301      	adds	r3, #1
 8008d48:	607b      	str	r3, [r7, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b37      	cmp	r3, #55	; 0x37
 8008d4e:	d9ef      	bls.n	8008d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d50:	480d      	ldr	r0, [pc, #52]	; (8008d88 <prvInitialiseTaskLists+0x64>)
 8008d52:	f7fe f99f 	bl	8007094 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d56:	480d      	ldr	r0, [pc, #52]	; (8008d8c <prvInitialiseTaskLists+0x68>)
 8008d58:	f7fe f99c 	bl	8007094 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d5c:	480c      	ldr	r0, [pc, #48]	; (8008d90 <prvInitialiseTaskLists+0x6c>)
 8008d5e:	f7fe f999 	bl	8007094 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d62:	480c      	ldr	r0, [pc, #48]	; (8008d94 <prvInitialiseTaskLists+0x70>)
 8008d64:	f7fe f996 	bl	8007094 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d68:	480b      	ldr	r0, [pc, #44]	; (8008d98 <prvInitialiseTaskLists+0x74>)
 8008d6a:	f7fe f993 	bl	8007094 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d6e:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <prvInitialiseTaskLists+0x78>)
 8008d70:	4a05      	ldr	r2, [pc, #20]	; (8008d88 <prvInitialiseTaskLists+0x64>)
 8008d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d74:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <prvInitialiseTaskLists+0x7c>)
 8008d76:	4a05      	ldr	r2, [pc, #20]	; (8008d8c <prvInitialiseTaskLists+0x68>)
 8008d78:	601a      	str	r2, [r3, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000a1c 	.word	0x20000a1c
 8008d88:	20000e7c 	.word	0x20000e7c
 8008d8c:	20000e90 	.word	0x20000e90
 8008d90:	20000eac 	.word	0x20000eac
 8008d94:	20000ec0 	.word	0x20000ec0
 8008d98:	20000ed8 	.word	0x20000ed8
 8008d9c:	20000ea4 	.word	0x20000ea4
 8008da0:	20000ea8 	.word	0x20000ea8

08008da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008daa:	e019      	b.n	8008de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dac:	f000 fed2 	bl	8009b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db0:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <prvCheckTasksWaitingTermination+0x50>)
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe f9f3 	bl	80071a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <prvCheckTasksWaitingTermination+0x54>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	4a0b      	ldr	r2, [pc, #44]	; (8008df8 <prvCheckTasksWaitingTermination+0x54>)
 8008dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008dcc:	4b0b      	ldr	r3, [pc, #44]	; (8008dfc <prvCheckTasksWaitingTermination+0x58>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <prvCheckTasksWaitingTermination+0x58>)
 8008dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008dd6:	f000 feed 	bl	8009bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f810 	bl	8008e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008de0:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <prvCheckTasksWaitingTermination+0x58>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e1      	bne.n	8008dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008de8:	bf00      	nop
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000ec0 	.word	0x20000ec0
 8008df8:	20000eec 	.word	0x20000eec
 8008dfc:	20000ed4 	.word	0x20000ed4

08008e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3354      	adds	r3, #84	; 0x54
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f002 f8c1 	bl	800af94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d108      	bne.n	8008e2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e20:	4618      	mov	r0, r3
 8008e22:	f001 f885 	bl	8009f30 <vPortFree>
				vPortFree( pxTCB );
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 f882 	bl	8009f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e2c:	e018      	b.n	8008e60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d103      	bne.n	8008e40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 f879 	bl	8009f30 <vPortFree>
	}
 8008e3e:	e00f      	b.n	8008e60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d00a      	beq.n	8008e60 <prvDeleteTCB+0x60>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	60fb      	str	r3, [r7, #12]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <prvDeleteTCB+0x5e>
	}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <prvResetNextTaskUnblockTime+0x38>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e78:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8008e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e80:	e008      	b.n	8008e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e82:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <prvResetNextTaskUnblockTime+0x38>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	4a04      	ldr	r2, [pc, #16]	; (8008ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8008e92:	6013      	str	r3, [r2, #0]
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	20000ea4 	.word	0x20000ea4
 8008ea4:	20000f0c 	.word	0x20000f0c

08008ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008eae:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <xTaskGetSchedulerState+0x34>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d102      	bne.n	8008ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	e008      	b.n	8008ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ebc:	4b08      	ldr	r3, [pc, #32]	; (8008ee0 <xTaskGetSchedulerState+0x38>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	607b      	str	r3, [r7, #4]
 8008ec8:	e001      	b.n	8008ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ece:	687b      	ldr	r3, [r7, #4]
	}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	20000ef8 	.word	0x20000ef8
 8008ee0:	20000f14 	.word	0x20000f14

08008ee4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d051      	beq.n	8008f9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efe:	4b2a      	ldr	r3, [pc, #168]	; (8008fa8 <xTaskPriorityInherit+0xc4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d241      	bcs.n	8008f8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	db06      	blt.n	8008f1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f10:	4b25      	ldr	r3, [pc, #148]	; (8008fa8 <xTaskPriorityInherit+0xc4>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	6959      	ldr	r1, [r3, #20]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4a1f      	ldr	r2, [pc, #124]	; (8008fac <xTaskPriorityInherit+0xc8>)
 8008f30:	4413      	add	r3, r2
 8008f32:	4299      	cmp	r1, r3
 8008f34:	d122      	bne.n	8008f7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fe f934 	bl	80071a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f40:	4b19      	ldr	r3, [pc, #100]	; (8008fa8 <xTaskPriorityInherit+0xc4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4e:	4b18      	ldr	r3, [pc, #96]	; (8008fb0 <xTaskPriorityInherit+0xcc>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d903      	bls.n	8008f5e <xTaskPriorityInherit+0x7a>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	4a15      	ldr	r2, [pc, #84]	; (8008fb0 <xTaskPriorityInherit+0xcc>)
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4a10      	ldr	r2, [pc, #64]	; (8008fac <xTaskPriorityInherit+0xc8>)
 8008f6c:	441a      	add	r2, r3
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f7fe f8ba 	bl	80070ee <vListInsertEnd>
 8008f7a:	e004      	b.n	8008f86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <xTaskPriorityInherit+0xc4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f86:	2301      	movs	r3, #1
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	e008      	b.n	8008f9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f90:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <xTaskPriorityInherit+0xc4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d201      	bcs.n	8008f9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
	}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20000a18 	.word	0x20000a18
 8008fac:	20000a1c 	.word	0x20000a1c
 8008fb0:	20000ef4 	.word	0x20000ef4

08008fb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d056      	beq.n	8009078 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008fca:	4b2e      	ldr	r3, [pc, #184]	; (8009084 <xTaskPriorityDisinherit+0xd0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d00a      	beq.n	8008fea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	60fb      	str	r3, [r7, #12]
}
 8008fe6:	bf00      	nop
 8008fe8:	e7fe      	b.n	8008fe8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10a      	bne.n	8009008 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	60bb      	str	r3, [r7, #8]
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800900c:	1e5a      	subs	r2, r3, #1
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800901a:	429a      	cmp	r2, r3
 800901c:	d02c      	beq.n	8009078 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009022:	2b00      	cmp	r3, #0
 8009024:	d128      	bne.n	8009078 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	3304      	adds	r3, #4
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe f8bc 	bl	80071a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009048:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <xTaskPriorityDisinherit+0xd4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	429a      	cmp	r2, r3
 800904e:	d903      	bls.n	8009058 <xTaskPriorityDisinherit+0xa4>
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	4a0c      	ldr	r2, [pc, #48]	; (8009088 <xTaskPriorityDisinherit+0xd4>)
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4a09      	ldr	r2, [pc, #36]	; (800908c <xTaskPriorityDisinherit+0xd8>)
 8009066:	441a      	add	r2, r3
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	3304      	adds	r3, #4
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f7fe f83d 	bl	80070ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009078:	697b      	ldr	r3, [r7, #20]
	}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20000a18 	.word	0x20000a18
 8009088:	20000ef4 	.word	0x20000ef4
 800908c:	20000a1c 	.word	0x20000a1c

08009090 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800909e:	2301      	movs	r3, #1
 80090a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d06a      	beq.n	800917e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60fb      	str	r3, [r7, #12]
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d902      	bls.n	80090d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	e002      	b.n	80090dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d04b      	beq.n	800917e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d146      	bne.n	800917e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80090f0:	4b25      	ldr	r3, [pc, #148]	; (8009188 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d10a      	bne.n	8009110 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	60bb      	str	r3, [r7, #8]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	db04      	blt.n	800912e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	6959      	ldr	r1, [r3, #20]
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4a13      	ldr	r2, [pc, #76]	; (800918c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800913e:	4413      	add	r3, r2
 8009140:	4299      	cmp	r1, r3
 8009142:	d11c      	bne.n	800917e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	3304      	adds	r3, #4
 8009148:	4618      	mov	r0, r3
 800914a:	f7fe f82d 	bl	80071a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009152:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d903      	bls.n	8009162 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	4a0c      	ldr	r2, [pc, #48]	; (8009190 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4a07      	ldr	r2, [pc, #28]	; (800918c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009170:	441a      	add	r2, r3
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	3304      	adds	r3, #4
 8009176:	4619      	mov	r1, r3
 8009178:	4610      	mov	r0, r2
 800917a:	f7fd ffb8 	bl	80070ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800917e:	bf00      	nop
 8009180:	3720      	adds	r7, #32
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000a18 	.word	0x20000a18
 800918c:	20000a1c 	.word	0x20000a1c
 8009190:	20000ef4 	.word	0x20000ef4

08009194 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009194:	b480      	push	{r7}
 8009196:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009198:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091a6:	3201      	adds	r2, #1
 80091a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80091aa:	4b03      	ldr	r3, [pc, #12]	; (80091b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80091ac:	681b      	ldr	r3, [r3, #0]
	}
 80091ae:	4618      	mov	r0, r3
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	20000a18 	.word	0x20000a18

080091bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091c6:	4b21      	ldr	r3, [pc, #132]	; (800924c <prvAddCurrentTaskToDelayedList+0x90>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091cc:	4b20      	ldr	r3, [pc, #128]	; (8009250 <prvAddCurrentTaskToDelayedList+0x94>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3304      	adds	r3, #4
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fd ffe8 	bl	80071a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091de:	d10a      	bne.n	80091f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d007      	beq.n	80091f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091e6:	4b1a      	ldr	r3, [pc, #104]	; (8009250 <prvAddCurrentTaskToDelayedList+0x94>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4619      	mov	r1, r3
 80091ee:	4819      	ldr	r0, [pc, #100]	; (8009254 <prvAddCurrentTaskToDelayedList+0x98>)
 80091f0:	f7fd ff7d 	bl	80070ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091f4:	e026      	b.n	8009244 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4413      	add	r3, r2
 80091fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091fe:	4b14      	ldr	r3, [pc, #80]	; (8009250 <prvAddCurrentTaskToDelayedList+0x94>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	429a      	cmp	r2, r3
 800920c:	d209      	bcs.n	8009222 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800920e:	4b12      	ldr	r3, [pc, #72]	; (8009258 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <prvAddCurrentTaskToDelayedList+0x94>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3304      	adds	r3, #4
 8009218:	4619      	mov	r1, r3
 800921a:	4610      	mov	r0, r2
 800921c:	f7fd ff8b 	bl	8007136 <vListInsert>
}
 8009220:	e010      	b.n	8009244 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009222:	4b0e      	ldr	r3, [pc, #56]	; (800925c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <prvAddCurrentTaskToDelayedList+0x94>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3304      	adds	r3, #4
 800922c:	4619      	mov	r1, r3
 800922e:	4610      	mov	r0, r2
 8009230:	f7fd ff81 	bl	8007136 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	429a      	cmp	r2, r3
 800923c:	d202      	bcs.n	8009244 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800923e:	4a08      	ldr	r2, [pc, #32]	; (8009260 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	6013      	str	r3, [r2, #0]
}
 8009244:	bf00      	nop
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000ef0 	.word	0x20000ef0
 8009250:	20000a18 	.word	0x20000a18
 8009254:	20000ed8 	.word	0x20000ed8
 8009258:	20000ea8 	.word	0x20000ea8
 800925c:	20000ea4 	.word	0x20000ea4
 8009260:	20000f0c 	.word	0x20000f0c

08009264 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08a      	sub	sp, #40	; 0x28
 8009268:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800926a:	2300      	movs	r3, #0
 800926c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800926e:	f000 fb07 	bl	8009880 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009272:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <xTimerCreateTimerTask+0x80>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d021      	beq.n	80092be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800927e:	2300      	movs	r3, #0
 8009280:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009282:	1d3a      	adds	r2, r7, #4
 8009284:	f107 0108 	add.w	r1, r7, #8
 8009288:	f107 030c 	add.w	r3, r7, #12
 800928c:	4618      	mov	r0, r3
 800928e:	f7fd fee7 	bl	8007060 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	9202      	str	r2, [sp, #8]
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	2302      	movs	r3, #2
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	2300      	movs	r3, #0
 80092a2:	460a      	mov	r2, r1
 80092a4:	4910      	ldr	r1, [pc, #64]	; (80092e8 <xTimerCreateTimerTask+0x84>)
 80092a6:	4811      	ldr	r0, [pc, #68]	; (80092ec <xTimerCreateTimerTask+0x88>)
 80092a8:	f7fe ffb6 	bl	8008218 <xTaskCreateStatic>
 80092ac:	4603      	mov	r3, r0
 80092ae:	4a10      	ldr	r2, [pc, #64]	; (80092f0 <xTimerCreateTimerTask+0x8c>)
 80092b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092b2:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <xTimerCreateTimerTask+0x8c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092ba:	2301      	movs	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10a      	bne.n	80092da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80092c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	613b      	str	r3, [r7, #16]
}
 80092d6:	bf00      	nop
 80092d8:	e7fe      	b.n	80092d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092da:	697b      	ldr	r3, [r7, #20]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20000f48 	.word	0x20000f48
 80092e8:	0800c184 	.word	0x0800c184
 80092ec:	08009429 	.word	0x08009429
 80092f0:	20000f4c 	.word	0x20000f4c

080092f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08a      	sub	sp, #40	; 0x28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009302:	2300      	movs	r3, #0
 8009304:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <xTimerGenericCommand+0x2e>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	623b      	str	r3, [r7, #32]
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009322:	4b1a      	ldr	r3, [pc, #104]	; (800938c <xTimerGenericCommand+0x98>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d02a      	beq.n	8009380 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2b05      	cmp	r3, #5
 800933a:	dc18      	bgt.n	800936e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800933c:	f7ff fdb4 	bl	8008ea8 <xTaskGetSchedulerState>
 8009340:	4603      	mov	r3, r0
 8009342:	2b02      	cmp	r3, #2
 8009344:	d109      	bne.n	800935a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009346:	4b11      	ldr	r3, [pc, #68]	; (800938c <xTimerGenericCommand+0x98>)
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	f107 0110 	add.w	r1, r7, #16
 800934e:	2300      	movs	r3, #0
 8009350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009352:	f7fe f8fb 	bl	800754c <xQueueGenericSend>
 8009356:	6278      	str	r0, [r7, #36]	; 0x24
 8009358:	e012      	b.n	8009380 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800935a:	4b0c      	ldr	r3, [pc, #48]	; (800938c <xTimerGenericCommand+0x98>)
 800935c:	6818      	ldr	r0, [r3, #0]
 800935e:	f107 0110 	add.w	r1, r7, #16
 8009362:	2300      	movs	r3, #0
 8009364:	2200      	movs	r2, #0
 8009366:	f7fe f8f1 	bl	800754c <xQueueGenericSend>
 800936a:	6278      	str	r0, [r7, #36]	; 0x24
 800936c:	e008      	b.n	8009380 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800936e:	4b07      	ldr	r3, [pc, #28]	; (800938c <xTimerGenericCommand+0x98>)
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	f107 0110 	add.w	r1, r7, #16
 8009376:	2300      	movs	r3, #0
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	f7fe f9e5 	bl	8007748 <xQueueGenericSendFromISR>
 800937e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009382:	4618      	mov	r0, r3
 8009384:	3728      	adds	r7, #40	; 0x28
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000f48 	.word	0x20000f48

08009390 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af02      	add	r7, sp, #8
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800939a:	4b22      	ldr	r3, [pc, #136]	; (8009424 <prvProcessExpiredTimer+0x94>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fd fefd 	bl	80071a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d022      	beq.n	8009402 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	18d1      	adds	r1, r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	6978      	ldr	r0, [r7, #20]
 80093ca:	f000 f8d1 	bl	8009570 <prvInsertTimerInActiveList>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01f      	beq.n	8009414 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093d4:	2300      	movs	r3, #0
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	2300      	movs	r3, #0
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	2100      	movs	r1, #0
 80093de:	6978      	ldr	r0, [r7, #20]
 80093e0:	f7ff ff88 	bl	80092f4 <xTimerGenericCommand>
 80093e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d113      	bne.n	8009414 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	60fb      	str	r3, [r7, #12]
}
 80093fe:	bf00      	nop
 8009400:	e7fe      	b.n	8009400 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009408:	f023 0301 	bic.w	r3, r3, #1
 800940c:	b2da      	uxtb	r2, r3
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	6978      	ldr	r0, [r7, #20]
 800941a:	4798      	blx	r3
}
 800941c:	bf00      	nop
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20000f40 	.word	0x20000f40

08009428 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009430:	f107 0308 	add.w	r3, r7, #8
 8009434:	4618      	mov	r0, r3
 8009436:	f000 f857 	bl	80094e8 <prvGetNextExpireTime>
 800943a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	4619      	mov	r1, r3
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 f803 	bl	800944c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009446:	f000 f8d5 	bl	80095f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800944a:	e7f1      	b.n	8009430 <prvTimerTask+0x8>

0800944c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009456:	f7ff f93b 	bl	80086d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800945a:	f107 0308 	add.w	r3, r7, #8
 800945e:	4618      	mov	r0, r3
 8009460:	f000 f866 	bl	8009530 <prvSampleTimeNow>
 8009464:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d130      	bne.n	80094ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10a      	bne.n	8009488 <prvProcessTimerOrBlockTask+0x3c>
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	429a      	cmp	r2, r3
 8009478:	d806      	bhi.n	8009488 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800947a:	f7ff f937 	bl	80086ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7ff ff85 	bl	8009390 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009486:	e024      	b.n	80094d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d008      	beq.n	80094a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <prvProcessTimerOrBlockTask+0x90>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <prvProcessTimerOrBlockTask+0x50>
 8009498:	2301      	movs	r3, #1
 800949a:	e000      	b.n	800949e <prvProcessTimerOrBlockTask+0x52>
 800949c:	2300      	movs	r3, #0
 800949e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094a0:	4b0f      	ldr	r3, [pc, #60]	; (80094e0 <prvProcessTimerOrBlockTask+0x94>)
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	4619      	mov	r1, r3
 80094ae:	f7fe fe7f 	bl	80081b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094b2:	f7ff f91b 	bl	80086ec <xTaskResumeAll>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094bc:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <prvProcessTimerOrBlockTask+0x98>)
 80094be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	f3bf 8f6f 	isb	sy
}
 80094cc:	e001      	b.n	80094d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094ce:	f7ff f90d 	bl	80086ec <xTaskResumeAll>
}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20000f44 	.word	0x20000f44
 80094e0:	20000f48 	.word	0x20000f48
 80094e4:	e000ed04 	.word	0xe000ed04

080094e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094f0:	4b0e      	ldr	r3, [pc, #56]	; (800952c <prvGetNextExpireTime+0x44>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <prvGetNextExpireTime+0x16>
 80094fa:	2201      	movs	r2, #1
 80094fc:	e000      	b.n	8009500 <prvGetNextExpireTime+0x18>
 80094fe:	2200      	movs	r2, #0
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d105      	bne.n	8009518 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <prvGetNextExpireTime+0x44>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	e001      	b.n	800951c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800951c:	68fb      	ldr	r3, [r7, #12]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20000f40 	.word	0x20000f40

08009530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009538:	f7ff f976 	bl	8008828 <xTaskGetTickCount>
 800953c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800953e:	4b0b      	ldr	r3, [pc, #44]	; (800956c <prvSampleTimeNow+0x3c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	429a      	cmp	r2, r3
 8009546:	d205      	bcs.n	8009554 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009548:	f000 f936 	bl	80097b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	e002      	b.n	800955a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800955a:	4a04      	ldr	r2, [pc, #16]	; (800956c <prvSampleTimeNow+0x3c>)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009560:	68fb      	ldr	r3, [r7, #12]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20000f50 	.word	0x20000f50

08009570 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800957e:	2300      	movs	r3, #0
 8009580:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	429a      	cmp	r2, r3
 8009594:	d812      	bhi.n	80095bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	1ad2      	subs	r2, r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d302      	bcc.n	80095aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095a4:	2301      	movs	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	e01b      	b.n	80095e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095aa:	4b10      	ldr	r3, [pc, #64]	; (80095ec <prvInsertTimerInActiveList+0x7c>)
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3304      	adds	r3, #4
 80095b2:	4619      	mov	r1, r3
 80095b4:	4610      	mov	r0, r2
 80095b6:	f7fd fdbe 	bl	8007136 <vListInsert>
 80095ba:	e012      	b.n	80095e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d206      	bcs.n	80095d2 <prvInsertTimerInActiveList+0x62>
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d302      	bcc.n	80095d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095cc:	2301      	movs	r3, #1
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	e007      	b.n	80095e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095d2:	4b07      	ldr	r3, [pc, #28]	; (80095f0 <prvInsertTimerInActiveList+0x80>)
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3304      	adds	r3, #4
 80095da:	4619      	mov	r1, r3
 80095dc:	4610      	mov	r0, r2
 80095de:	f7fd fdaa 	bl	8007136 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095e2:	697b      	ldr	r3, [r7, #20]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	20000f44 	.word	0x20000f44
 80095f0:	20000f40 	.word	0x20000f40

080095f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08e      	sub	sp, #56	; 0x38
 80095f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095fa:	e0ca      	b.n	8009792 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	da18      	bge.n	8009634 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009602:	1d3b      	adds	r3, r7, #4
 8009604:	3304      	adds	r3, #4
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10a      	bne.n	8009624 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	61fb      	str	r3, [r7, #28]
}
 8009620:	bf00      	nop
 8009622:	e7fe      	b.n	8009622 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800962a:	6850      	ldr	r0, [r2, #4]
 800962c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800962e:	6892      	ldr	r2, [r2, #8]
 8009630:	4611      	mov	r1, r2
 8009632:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	f2c0 80aa 	blt.w	8009790 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d004      	beq.n	8009652 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	3304      	adds	r3, #4
 800964c:	4618      	mov	r0, r3
 800964e:	f7fd fdab 	bl	80071a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009652:	463b      	mov	r3, r7
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff ff6b 	bl	8009530 <prvSampleTimeNow>
 800965a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b09      	cmp	r3, #9
 8009660:	f200 8097 	bhi.w	8009792 <prvProcessReceivedCommands+0x19e>
 8009664:	a201      	add	r2, pc, #4	; (adr r2, 800966c <prvProcessReceivedCommands+0x78>)
 8009666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966a:	bf00      	nop
 800966c:	08009695 	.word	0x08009695
 8009670:	08009695 	.word	0x08009695
 8009674:	08009695 	.word	0x08009695
 8009678:	08009709 	.word	0x08009709
 800967c:	0800971d 	.word	0x0800971d
 8009680:	08009767 	.word	0x08009767
 8009684:	08009695 	.word	0x08009695
 8009688:	08009695 	.word	0x08009695
 800968c:	08009709 	.word	0x08009709
 8009690:	0800971d 	.word	0x0800971d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800969a:	f043 0301 	orr.w	r3, r3, #1
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	18d1      	adds	r1, r2, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b4:	f7ff ff5c 	bl	8009570 <prvInsertTimerInActiveList>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d069      	beq.n	8009792 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096cc:	f003 0304 	and.w	r3, r3, #4
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d05e      	beq.n	8009792 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	441a      	add	r2, r3
 80096dc:	2300      	movs	r3, #0
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	2300      	movs	r3, #0
 80096e2:	2100      	movs	r1, #0
 80096e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e6:	f7ff fe05 	bl	80092f4 <xTimerGenericCommand>
 80096ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d14f      	bne.n	8009792 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	61bb      	str	r3, [r7, #24]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800970e:	f023 0301 	bic.w	r3, r3, #1
 8009712:	b2da      	uxtb	r2, r3
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800971a:	e03a      	b.n	8009792 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	b2da      	uxtb	r2, r3
 8009728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	617b      	str	r3, [r7, #20]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	18d1      	adds	r1, r2, r3
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009760:	f7ff ff06 	bl	8009570 <prvInsertTimerInActiveList>
					break;
 8009764:	e015      	b.n	8009792 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d103      	bne.n	800977c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009776:	f000 fbdb 	bl	8009f30 <vPortFree>
 800977a:	e00a      	b.n	8009792 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	b2da      	uxtb	r2, r3
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800978e:	e000      	b.n	8009792 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009790:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009792:	4b08      	ldr	r3, [pc, #32]	; (80097b4 <prvProcessReceivedCommands+0x1c0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	1d39      	adds	r1, r7, #4
 8009798:	2200      	movs	r2, #0
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe f8fc 	bl	8007998 <xQueueReceive>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f47f af2a 	bne.w	80095fc <prvProcessReceivedCommands+0x8>
	}
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	3730      	adds	r7, #48	; 0x30
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20000f48 	.word	0x20000f48

080097b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b088      	sub	sp, #32
 80097bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097be:	e048      	b.n	8009852 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097c0:	4b2d      	ldr	r3, [pc, #180]	; (8009878 <prvSwitchTimerLists+0xc0>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ca:	4b2b      	ldr	r3, [pc, #172]	; (8009878 <prvSwitchTimerLists+0xc0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3304      	adds	r3, #4
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fd fce5 	bl	80071a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d02e      	beq.n	8009852 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	4413      	add	r3, r2
 80097fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	429a      	cmp	r2, r3
 8009804:	d90e      	bls.n	8009824 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009812:	4b19      	ldr	r3, [pc, #100]	; (8009878 <prvSwitchTimerLists+0xc0>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	3304      	adds	r3, #4
 800981a:	4619      	mov	r1, r3
 800981c:	4610      	mov	r0, r2
 800981e:	f7fd fc8a 	bl	8007136 <vListInsert>
 8009822:	e016      	b.n	8009852 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009824:	2300      	movs	r3, #0
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	2300      	movs	r3, #0
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	2100      	movs	r1, #0
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7ff fd60 	bl	80092f4 <xTimerGenericCommand>
 8009834:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10a      	bne.n	8009852 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	603b      	str	r3, [r7, #0]
}
 800984e:	bf00      	nop
 8009850:	e7fe      	b.n	8009850 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009852:	4b09      	ldr	r3, [pc, #36]	; (8009878 <prvSwitchTimerLists+0xc0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1b1      	bne.n	80097c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800985c:	4b06      	ldr	r3, [pc, #24]	; (8009878 <prvSwitchTimerLists+0xc0>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009862:	4b06      	ldr	r3, [pc, #24]	; (800987c <prvSwitchTimerLists+0xc4>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a04      	ldr	r2, [pc, #16]	; (8009878 <prvSwitchTimerLists+0xc0>)
 8009868:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800986a:	4a04      	ldr	r2, [pc, #16]	; (800987c <prvSwitchTimerLists+0xc4>)
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	6013      	str	r3, [r2, #0]
}
 8009870:	bf00      	nop
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	20000f40 	.word	0x20000f40
 800987c:	20000f44 	.word	0x20000f44

08009880 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009886:	f000 f965 	bl	8009b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800988a:	4b15      	ldr	r3, [pc, #84]	; (80098e0 <prvCheckForValidListAndQueue+0x60>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d120      	bne.n	80098d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009892:	4814      	ldr	r0, [pc, #80]	; (80098e4 <prvCheckForValidListAndQueue+0x64>)
 8009894:	f7fd fbfe 	bl	8007094 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009898:	4813      	ldr	r0, [pc, #76]	; (80098e8 <prvCheckForValidListAndQueue+0x68>)
 800989a:	f7fd fbfb 	bl	8007094 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800989e:	4b13      	ldr	r3, [pc, #76]	; (80098ec <prvCheckForValidListAndQueue+0x6c>)
 80098a0:	4a10      	ldr	r2, [pc, #64]	; (80098e4 <prvCheckForValidListAndQueue+0x64>)
 80098a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098a4:	4b12      	ldr	r3, [pc, #72]	; (80098f0 <prvCheckForValidListAndQueue+0x70>)
 80098a6:	4a10      	ldr	r2, [pc, #64]	; (80098e8 <prvCheckForValidListAndQueue+0x68>)
 80098a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098aa:	2300      	movs	r3, #0
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	4b11      	ldr	r3, [pc, #68]	; (80098f4 <prvCheckForValidListAndQueue+0x74>)
 80098b0:	4a11      	ldr	r2, [pc, #68]	; (80098f8 <prvCheckForValidListAndQueue+0x78>)
 80098b2:	2110      	movs	r1, #16
 80098b4:	200a      	movs	r0, #10
 80098b6:	f7fd fd09 	bl	80072cc <xQueueGenericCreateStatic>
 80098ba:	4603      	mov	r3, r0
 80098bc:	4a08      	ldr	r2, [pc, #32]	; (80098e0 <prvCheckForValidListAndQueue+0x60>)
 80098be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <prvCheckForValidListAndQueue+0x60>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d005      	beq.n	80098d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098c8:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <prvCheckForValidListAndQueue+0x60>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	490b      	ldr	r1, [pc, #44]	; (80098fc <prvCheckForValidListAndQueue+0x7c>)
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fc1a 	bl	8008108 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098d4:	f000 f96e 	bl	8009bb4 <vPortExitCritical>
}
 80098d8:	bf00      	nop
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000f48 	.word	0x20000f48
 80098e4:	20000f18 	.word	0x20000f18
 80098e8:	20000f2c 	.word	0x20000f2c
 80098ec:	20000f40 	.word	0x20000f40
 80098f0:	20000f44 	.word	0x20000f44
 80098f4:	20000ff4 	.word	0x20000ff4
 80098f8:	20000f54 	.word	0x20000f54
 80098fc:	0800c18c 	.word	0x0800c18c

08009900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3b04      	subs	r3, #4
 8009910:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3b04      	subs	r3, #4
 800991e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f023 0201 	bic.w	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3b04      	subs	r3, #4
 800992e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009930:	4a0c      	ldr	r2, [pc, #48]	; (8009964 <pxPortInitialiseStack+0x64>)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3b14      	subs	r3, #20
 800993a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3b04      	subs	r3, #4
 8009946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f06f 0202 	mvn.w	r2, #2
 800994e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	3b20      	subs	r3, #32
 8009954:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009956:	68fb      	ldr	r3, [r7, #12]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	08009969 	.word	0x08009969

08009968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009972:	4b12      	ldr	r3, [pc, #72]	; (80099bc <prvTaskExitError+0x54>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d00a      	beq.n	8009992 <prvTaskExitError+0x2a>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60fb      	str	r3, [r7, #12]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <prvTaskExitError+0x28>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	60bb      	str	r3, [r7, #8]
}
 80099a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099a6:	bf00      	nop
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0fc      	beq.n	80099a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099ae:	bf00      	nop
 80099b0:	bf00      	nop
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	2000019c 	.word	0x2000019c

080099c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099c0:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <pxCurrentTCBConst2>)
 80099c2:	6819      	ldr	r1, [r3, #0]
 80099c4:	6808      	ldr	r0, [r1, #0]
 80099c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ca:	f380 8809 	msr	PSP, r0
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f04f 0000 	mov.w	r0, #0
 80099d6:	f380 8811 	msr	BASEPRI, r0
 80099da:	4770      	bx	lr
 80099dc:	f3af 8000 	nop.w

080099e0 <pxCurrentTCBConst2>:
 80099e0:	20000a18 	.word	0x20000a18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop

080099e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099e8:	4808      	ldr	r0, [pc, #32]	; (8009a0c <prvPortStartFirstTask+0x24>)
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	6800      	ldr	r0, [r0, #0]
 80099ee:	f380 8808 	msr	MSP, r0
 80099f2:	f04f 0000 	mov.w	r0, #0
 80099f6:	f380 8814 	msr	CONTROL, r0
 80099fa:	b662      	cpsie	i
 80099fc:	b661      	cpsie	f
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	df00      	svc	0
 8009a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a0a:	bf00      	nop
 8009a0c:	e000ed08 	.word	0xe000ed08

08009a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a16:	4b46      	ldr	r3, [pc, #280]	; (8009b30 <xPortStartScheduler+0x120>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a46      	ldr	r2, [pc, #280]	; (8009b34 <xPortStartScheduler+0x124>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10a      	bne.n	8009a36 <xPortStartScheduler+0x26>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	613b      	str	r3, [r7, #16]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a36:	4b3e      	ldr	r3, [pc, #248]	; (8009b30 <xPortStartScheduler+0x120>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a3f      	ldr	r2, [pc, #252]	; (8009b38 <xPortStartScheduler+0x128>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d10a      	bne.n	8009a56 <xPortStartScheduler+0x46>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	60fb      	str	r3, [r7, #12]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a56:	4b39      	ldr	r3, [pc, #228]	; (8009b3c <xPortStartScheduler+0x12c>)
 8009a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	22ff      	movs	r2, #255	; 0xff
 8009a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	4b31      	ldr	r3, [pc, #196]	; (8009b40 <xPortStartScheduler+0x130>)
 8009a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a7e:	4b31      	ldr	r3, [pc, #196]	; (8009b44 <xPortStartScheduler+0x134>)
 8009a80:	2207      	movs	r2, #7
 8009a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a84:	e009      	b.n	8009a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a86:	4b2f      	ldr	r3, [pc, #188]	; (8009b44 <xPortStartScheduler+0x134>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	4a2d      	ldr	r2, [pc, #180]	; (8009b44 <xPortStartScheduler+0x134>)
 8009a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a9a:	78fb      	ldrb	r3, [r7, #3]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa2:	2b80      	cmp	r3, #128	; 0x80
 8009aa4:	d0ef      	beq.n	8009a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009aa6:	4b27      	ldr	r3, [pc, #156]	; (8009b44 <xPortStartScheduler+0x134>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f1c3 0307 	rsb	r3, r3, #7
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d00a      	beq.n	8009ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	60bb      	str	r3, [r7, #8]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ac8:	4b1e      	ldr	r3, [pc, #120]	; (8009b44 <xPortStartScheduler+0x134>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	021b      	lsls	r3, r3, #8
 8009ace:	4a1d      	ldr	r2, [pc, #116]	; (8009b44 <xPortStartScheduler+0x134>)
 8009ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ad2:	4b1c      	ldr	r3, [pc, #112]	; (8009b44 <xPortStartScheduler+0x134>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ada:	4a1a      	ldr	r2, [pc, #104]	; (8009b44 <xPortStartScheduler+0x134>)
 8009adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ae6:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <xPortStartScheduler+0x138>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a17      	ldr	r2, [pc, #92]	; (8009b48 <xPortStartScheduler+0x138>)
 8009aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009af2:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <xPortStartScheduler+0x138>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a14      	ldr	r2, [pc, #80]	; (8009b48 <xPortStartScheduler+0x138>)
 8009af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009afe:	f000 f8dd 	bl	8009cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <xPortStartScheduler+0x13c>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b08:	f000 f8fc 	bl	8009d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b0c:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <xPortStartScheduler+0x140>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0f      	ldr	r2, [pc, #60]	; (8009b50 <xPortStartScheduler+0x140>)
 8009b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b18:	f7ff ff66 	bl	80099e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b1c:	f7fe ff4e 	bl	80089bc <vTaskSwitchContext>
	prvTaskExitError();
 8009b20:	f7ff ff22 	bl	8009968 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	e000ed00 	.word	0xe000ed00
 8009b34:	410fc271 	.word	0x410fc271
 8009b38:	410fc270 	.word	0x410fc270
 8009b3c:	e000e400 	.word	0xe000e400
 8009b40:	20001044 	.word	0x20001044
 8009b44:	20001048 	.word	0x20001048
 8009b48:	e000ed20 	.word	0xe000ed20
 8009b4c:	2000019c 	.word	0x2000019c
 8009b50:	e000ef34 	.word	0xe000ef34

08009b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	607b      	str	r3, [r7, #4]
}
 8009b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b6e:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <vPortEnterCritical+0x58>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3301      	adds	r3, #1
 8009b74:	4a0d      	ldr	r2, [pc, #52]	; (8009bac <vPortEnterCritical+0x58>)
 8009b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b78:	4b0c      	ldr	r3, [pc, #48]	; (8009bac <vPortEnterCritical+0x58>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d10f      	bne.n	8009ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b80:	4b0b      	ldr	r3, [pc, #44]	; (8009bb0 <vPortEnterCritical+0x5c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	603b      	str	r3, [r7, #0]
}
 8009b9c:	bf00      	nop
 8009b9e:	e7fe      	b.n	8009b9e <vPortEnterCritical+0x4a>
	}
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	2000019c 	.word	0x2000019c
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bba:	4b12      	ldr	r3, [pc, #72]	; (8009c04 <vPortExitCritical+0x50>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10a      	bne.n	8009bd8 <vPortExitCritical+0x24>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	607b      	str	r3, [r7, #4]
}
 8009bd4:	bf00      	nop
 8009bd6:	e7fe      	b.n	8009bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <vPortExitCritical+0x50>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	4a09      	ldr	r2, [pc, #36]	; (8009c04 <vPortExitCritical+0x50>)
 8009be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009be2:	4b08      	ldr	r3, [pc, #32]	; (8009c04 <vPortExitCritical+0x50>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d105      	bne.n	8009bf6 <vPortExitCritical+0x42>
 8009bea:	2300      	movs	r3, #0
 8009bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	f383 8811 	msr	BASEPRI, r3
}
 8009bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bf6:	bf00      	nop
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	2000019c 	.word	0x2000019c
	...

08009c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c10:	f3ef 8009 	mrs	r0, PSP
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	4b15      	ldr	r3, [pc, #84]	; (8009c70 <pxCurrentTCBConst>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	f01e 0f10 	tst.w	lr, #16
 8009c20:	bf08      	it	eq
 8009c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2a:	6010      	str	r0, [r2, #0]
 8009c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c34:	f380 8811 	msr	BASEPRI, r0
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f7fe febc 	bl	80089bc <vTaskSwitchContext>
 8009c44:	f04f 0000 	mov.w	r0, #0
 8009c48:	f380 8811 	msr	BASEPRI, r0
 8009c4c:	bc09      	pop	{r0, r3}
 8009c4e:	6819      	ldr	r1, [r3, #0]
 8009c50:	6808      	ldr	r0, [r1, #0]
 8009c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c56:	f01e 0f10 	tst.w	lr, #16
 8009c5a:	bf08      	it	eq
 8009c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c60:	f380 8809 	msr	PSP, r0
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w

08009c70 <pxCurrentTCBConst>:
 8009c70:	20000a18 	.word	0x20000a18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop

08009c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	607b      	str	r3, [r7, #4]
}
 8009c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c92:	f7fe fdd9 	bl	8008848 <xTaskIncrementTick>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c9c:	4b06      	ldr	r3, [pc, #24]	; (8009cb8 <xPortSysTickHandler+0x40>)
 8009c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	f383 8811 	msr	BASEPRI, r3
}
 8009cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	e000ed04 	.word	0xe000ed04

08009cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	; (8009cf0 <vPortSetupTimerInterrupt+0x34>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cc6:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <vPortSetupTimerInterrupt+0x38>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <vPortSetupTimerInterrupt+0x3c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a0a      	ldr	r2, [pc, #40]	; (8009cfc <vPortSetupTimerInterrupt+0x40>)
 8009cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd6:	099b      	lsrs	r3, r3, #6
 8009cd8:	4a09      	ldr	r2, [pc, #36]	; (8009d00 <vPortSetupTimerInterrupt+0x44>)
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cde:	4b04      	ldr	r3, [pc, #16]	; (8009cf0 <vPortSetupTimerInterrupt+0x34>)
 8009ce0:	2207      	movs	r2, #7
 8009ce2:	601a      	str	r2, [r3, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	e000e010 	.word	0xe000e010
 8009cf4:	e000e018 	.word	0xe000e018
 8009cf8:	20000080 	.word	0x20000080
 8009cfc:	10624dd3 	.word	0x10624dd3
 8009d00:	e000e014 	.word	0xe000e014

08009d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d14 <vPortEnableVFP+0x10>
 8009d08:	6801      	ldr	r1, [r0, #0]
 8009d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d0e:	6001      	str	r1, [r0, #0]
 8009d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d12:	bf00      	nop
 8009d14:	e000ed88 	.word	0xe000ed88

08009d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d1e:	f3ef 8305 	mrs	r3, IPSR
 8009d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b0f      	cmp	r3, #15
 8009d28:	d914      	bls.n	8009d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d2a:	4a17      	ldr	r2, [pc, #92]	; (8009d88 <vPortValidateInterruptPriority+0x70>)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d34:	4b15      	ldr	r3, [pc, #84]	; (8009d8c <vPortValidateInterruptPriority+0x74>)
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	7afa      	ldrb	r2, [r7, #11]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d20a      	bcs.n	8009d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	607b      	str	r3, [r7, #4]
}
 8009d50:	bf00      	nop
 8009d52:	e7fe      	b.n	8009d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d54:	4b0e      	ldr	r3, [pc, #56]	; (8009d90 <vPortValidateInterruptPriority+0x78>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <vPortValidateInterruptPriority+0x7c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d90a      	bls.n	8009d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	603b      	str	r3, [r7, #0]
}
 8009d76:	bf00      	nop
 8009d78:	e7fe      	b.n	8009d78 <vPortValidateInterruptPriority+0x60>
	}
 8009d7a:	bf00      	nop
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	e000e3f0 	.word	0xe000e3f0
 8009d8c:	20001044 	.word	0x20001044
 8009d90:	e000ed0c 	.word	0xe000ed0c
 8009d94:	20001048 	.word	0x20001048

08009d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08a      	sub	sp, #40	; 0x28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009da0:	2300      	movs	r3, #0
 8009da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009da4:	f7fe fc94 	bl	80086d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009da8:	4b5b      	ldr	r3, [pc, #364]	; (8009f18 <pvPortMalloc+0x180>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009db0:	f000 f920 	bl	8009ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009db4:	4b59      	ldr	r3, [pc, #356]	; (8009f1c <pvPortMalloc+0x184>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f040 8093 	bne.w	8009ee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d01d      	beq.n	8009e04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009dc8:	2208      	movs	r2, #8
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4413      	add	r3, r2
 8009dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f003 0307 	and.w	r3, r3, #7
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d014      	beq.n	8009e04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f023 0307 	bic.w	r3, r3, #7
 8009de0:	3308      	adds	r3, #8
 8009de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <pvPortMalloc+0x6c>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	617b      	str	r3, [r7, #20]
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d06e      	beq.n	8009ee8 <pvPortMalloc+0x150>
 8009e0a:	4b45      	ldr	r3, [pc, #276]	; (8009f20 <pvPortMalloc+0x188>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d869      	bhi.n	8009ee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e14:	4b43      	ldr	r3, [pc, #268]	; (8009f24 <pvPortMalloc+0x18c>)
 8009e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e18:	4b42      	ldr	r3, [pc, #264]	; (8009f24 <pvPortMalloc+0x18c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e1e:	e004      	b.n	8009e2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d903      	bls.n	8009e3c <pvPortMalloc+0xa4>
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1f1      	bne.n	8009e20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e3c:	4b36      	ldr	r3, [pc, #216]	; (8009f18 <pvPortMalloc+0x180>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d050      	beq.n	8009ee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2208      	movs	r2, #8
 8009e4c:	4413      	add	r3, r2
 8009e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	2308      	movs	r3, #8
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d91f      	bls.n	8009ea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	f003 0307 	and.w	r3, r3, #7
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <pvPortMalloc+0xf8>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	613b      	str	r3, [r7, #16]
}
 8009e8c:	bf00      	nop
 8009e8e:	e7fe      	b.n	8009e8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	1ad2      	subs	r2, r2, r3
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ea2:	69b8      	ldr	r0, [r7, #24]
 8009ea4:	f000 f908 	bl	800a0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <pvPortMalloc+0x188>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	4a1b      	ldr	r2, [pc, #108]	; (8009f20 <pvPortMalloc+0x188>)
 8009eb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009eb6:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <pvPortMalloc+0x188>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	4b1b      	ldr	r3, [pc, #108]	; (8009f28 <pvPortMalloc+0x190>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d203      	bcs.n	8009eca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ec2:	4b17      	ldr	r3, [pc, #92]	; (8009f20 <pvPortMalloc+0x188>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a18      	ldr	r2, [pc, #96]	; (8009f28 <pvPortMalloc+0x190>)
 8009ec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <pvPortMalloc+0x184>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	431a      	orrs	r2, r3
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ede:	4b13      	ldr	r3, [pc, #76]	; (8009f2c <pvPortMalloc+0x194>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4a11      	ldr	r2, [pc, #68]	; (8009f2c <pvPortMalloc+0x194>)
 8009ee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ee8:	f7fe fc00 	bl	80086ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	f003 0307 	and.w	r3, r3, #7
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <pvPortMalloc+0x174>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	60fb      	str	r3, [r7, #12]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <pvPortMalloc+0x172>
	return pvReturn;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3728      	adds	r7, #40	; 0x28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20004c54 	.word	0x20004c54
 8009f1c:	20004c68 	.word	0x20004c68
 8009f20:	20004c58 	.word	0x20004c58
 8009f24:	20004c4c 	.word	0x20004c4c
 8009f28:	20004c5c 	.word	0x20004c5c
 8009f2c:	20004c60 	.word	0x20004c60

08009f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d04d      	beq.n	8009fde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f42:	2308      	movs	r3, #8
 8009f44:	425b      	negs	r3, r3
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	4413      	add	r3, r2
 8009f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	4b24      	ldr	r3, [pc, #144]	; (8009fe8 <vPortFree+0xb8>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10a      	bne.n	8009f74 <vPortFree+0x44>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	60fb      	str	r3, [r7, #12]
}
 8009f70:	bf00      	nop
 8009f72:	e7fe      	b.n	8009f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00a      	beq.n	8009f92 <vPortFree+0x62>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	60bb      	str	r3, [r7, #8]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	4b14      	ldr	r3, [pc, #80]	; (8009fe8 <vPortFree+0xb8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01e      	beq.n	8009fde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d11a      	bne.n	8009fde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	4b0e      	ldr	r3, [pc, #56]	; (8009fe8 <vPortFree+0xb8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	401a      	ands	r2, r3
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fb8:	f7fe fb8a 	bl	80086d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <vPortFree+0xbc>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	4a09      	ldr	r2, [pc, #36]	; (8009fec <vPortFree+0xbc>)
 8009fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fca:	6938      	ldr	r0, [r7, #16]
 8009fcc:	f000 f874 	bl	800a0b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fd0:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <vPortFree+0xc0>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	4a06      	ldr	r2, [pc, #24]	; (8009ff0 <vPortFree+0xc0>)
 8009fd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fda:	f7fe fb87 	bl	80086ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fde:	bf00      	nop
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20004c68 	.word	0x20004c68
 8009fec:	20004c58 	.word	0x20004c58
 8009ff0:	20004c64 	.word	0x20004c64

08009ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a000:	4b27      	ldr	r3, [pc, #156]	; (800a0a0 <prvHeapInit+0xac>)
 800a002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00c      	beq.n	800a028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3307      	adds	r3, #7
 800a012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	4a1f      	ldr	r2, [pc, #124]	; (800a0a0 <prvHeapInit+0xac>)
 800a024:	4413      	add	r3, r2
 800a026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a02c:	4a1d      	ldr	r2, [pc, #116]	; (800a0a4 <prvHeapInit+0xb0>)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a032:	4b1c      	ldr	r3, [pc, #112]	; (800a0a4 <prvHeapInit+0xb0>)
 800a034:	2200      	movs	r2, #0
 800a036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	4413      	add	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a040:	2208      	movs	r2, #8
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	1a9b      	subs	r3, r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0307 	bic.w	r3, r3, #7
 800a04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4a15      	ldr	r2, [pc, #84]	; (800a0a8 <prvHeapInit+0xb4>)
 800a054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a056:	4b14      	ldr	r3, [pc, #80]	; (800a0a8 <prvHeapInit+0xb4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2200      	movs	r2, #0
 800a05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a05e:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <prvHeapInit+0xb4>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a074:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <prvHeapInit+0xb4>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <prvHeapInit+0xb8>)
 800a082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	4a09      	ldr	r2, [pc, #36]	; (800a0b0 <prvHeapInit+0xbc>)
 800a08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a08c:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <prvHeapInit+0xc0>)
 800a08e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a092:	601a      	str	r2, [r3, #0]
}
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	2000104c 	.word	0x2000104c
 800a0a4:	20004c4c 	.word	0x20004c4c
 800a0a8:	20004c54 	.word	0x20004c54
 800a0ac:	20004c5c 	.word	0x20004c5c
 800a0b0:	20004c58 	.word	0x20004c58
 800a0b4:	20004c68 	.word	0x20004c68

0800a0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0c0:	4b28      	ldr	r3, [pc, #160]	; (800a164 <prvInsertBlockIntoFreeList+0xac>)
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e002      	b.n	800a0cc <prvInsertBlockIntoFreeList+0x14>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d8f7      	bhi.n	800a0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d108      	bne.n	800a0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	441a      	add	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d118      	bne.n	800a140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4b15      	ldr	r3, [pc, #84]	; (800a168 <prvInsertBlockIntoFreeList+0xb0>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d00d      	beq.n	800a136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	441a      	add	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	e008      	b.n	800a148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a136:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <prvInsertBlockIntoFreeList+0xb0>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e003      	b.n	800a148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d002      	beq.n	800a156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a156:	bf00      	nop
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20004c4c 	.word	0x20004c4c
 800a168:	20004c54 	.word	0x20004c54

0800a16c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a170:	2200      	movs	r2, #0
 800a172:	4912      	ldr	r1, [pc, #72]	; (800a1bc <MX_USB_DEVICE_Init+0x50>)
 800a174:	4812      	ldr	r0, [pc, #72]	; (800a1c0 <MX_USB_DEVICE_Init+0x54>)
 800a176:	f7fb fa63 	bl	8005640 <USBD_Init>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a180:	f7f6 fe60 	bl	8000e44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a184:	490f      	ldr	r1, [pc, #60]	; (800a1c4 <MX_USB_DEVICE_Init+0x58>)
 800a186:	480e      	ldr	r0, [pc, #56]	; (800a1c0 <MX_USB_DEVICE_Init+0x54>)
 800a188:	f7fb fa8a 	bl	80056a0 <USBD_RegisterClass>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a192:	f7f6 fe57 	bl	8000e44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a196:	490c      	ldr	r1, [pc, #48]	; (800a1c8 <MX_USB_DEVICE_Init+0x5c>)
 800a198:	4809      	ldr	r0, [pc, #36]	; (800a1c0 <MX_USB_DEVICE_Init+0x54>)
 800a19a:	f7fb f9ab 	bl	80054f4 <USBD_CDC_RegisterInterface>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1a4:	f7f6 fe4e 	bl	8000e44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1a8:	4805      	ldr	r0, [pc, #20]	; (800a1c0 <MX_USB_DEVICE_Init+0x54>)
 800a1aa:	f7fb faa0 	bl	80056ee <USBD_Start>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1b4:	f7f6 fe46 	bl	8000e44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1b8:	bf00      	nop
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	200001bc 	.word	0x200001bc
 800a1c0:	20004f6c 	.word	0x20004f6c
 800a1c4:	20000098 	.word	0x20000098
 800a1c8:	200001a8 	.word	0x200001a8

0800a1cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	4905      	ldr	r1, [pc, #20]	; (800a1e8 <CDC_Init_FS+0x1c>)
 800a1d4:	4805      	ldr	r0, [pc, #20]	; (800a1ec <CDC_Init_FS+0x20>)
 800a1d6:	f7fb f9a2 	bl	800551e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1da:	4905      	ldr	r1, [pc, #20]	; (800a1f0 <CDC_Init_FS+0x24>)
 800a1dc:	4803      	ldr	r0, [pc, #12]	; (800a1ec <CDC_Init_FS+0x20>)
 800a1de:	f7fb f9bc 	bl	800555a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	20005a3c 	.word	0x20005a3c
 800a1ec:	20004f6c 	.word	0x20004f6c
 800a1f0:	2000523c 	.word	0x2000523c

0800a1f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	4603      	mov	r3, r0
 800a20c:	6039      	str	r1, [r7, #0]
 800a20e:	71fb      	strb	r3, [r7, #7]
 800a210:	4613      	mov	r3, r2
 800a212:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a214:	79fb      	ldrb	r3, [r7, #7]
 800a216:	2b23      	cmp	r3, #35	; 0x23
 800a218:	d85c      	bhi.n	800a2d4 <CDC_Control_FS+0xd0>
 800a21a:	a201      	add	r2, pc, #4	; (adr r2, 800a220 <CDC_Control_FS+0x1c>)
 800a21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a220:	0800a2d5 	.word	0x0800a2d5
 800a224:	0800a2d5 	.word	0x0800a2d5
 800a228:	0800a2d5 	.word	0x0800a2d5
 800a22c:	0800a2d5 	.word	0x0800a2d5
 800a230:	0800a2d5 	.word	0x0800a2d5
 800a234:	0800a2d5 	.word	0x0800a2d5
 800a238:	0800a2d5 	.word	0x0800a2d5
 800a23c:	0800a2d5 	.word	0x0800a2d5
 800a240:	0800a2d5 	.word	0x0800a2d5
 800a244:	0800a2d5 	.word	0x0800a2d5
 800a248:	0800a2d5 	.word	0x0800a2d5
 800a24c:	0800a2d5 	.word	0x0800a2d5
 800a250:	0800a2d5 	.word	0x0800a2d5
 800a254:	0800a2d5 	.word	0x0800a2d5
 800a258:	0800a2d5 	.word	0x0800a2d5
 800a25c:	0800a2d5 	.word	0x0800a2d5
 800a260:	0800a2d5 	.word	0x0800a2d5
 800a264:	0800a2d5 	.word	0x0800a2d5
 800a268:	0800a2d5 	.word	0x0800a2d5
 800a26c:	0800a2d5 	.word	0x0800a2d5
 800a270:	0800a2d5 	.word	0x0800a2d5
 800a274:	0800a2d5 	.word	0x0800a2d5
 800a278:	0800a2d5 	.word	0x0800a2d5
 800a27c:	0800a2d5 	.word	0x0800a2d5
 800a280:	0800a2d5 	.word	0x0800a2d5
 800a284:	0800a2d5 	.word	0x0800a2d5
 800a288:	0800a2d5 	.word	0x0800a2d5
 800a28c:	0800a2d5 	.word	0x0800a2d5
 800a290:	0800a2d5 	.word	0x0800a2d5
 800a294:	0800a2d5 	.word	0x0800a2d5
 800a298:	0800a2d5 	.word	0x0800a2d5
 800a29c:	0800a2d5 	.word	0x0800a2d5
 800a2a0:	0800a2b1 	.word	0x0800a2b1
 800a2a4:	0800a2c3 	.word	0x0800a2c3
 800a2a8:	0800a2d5 	.word	0x0800a2d5
 800a2ac:	0800a2d5 	.word	0x0800a2d5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800a2b0:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <CDC_Control_FS+0xe0>)
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	6810      	ldr	r0, [r2, #0]
 800a2b6:	6018      	str	r0, [r3, #0]
 800a2b8:	8891      	ldrh	r1, [r2, #4]
 800a2ba:	7992      	ldrb	r2, [r2, #6]
 800a2bc:	8099      	strh	r1, [r3, #4]
 800a2be:	719a      	strb	r2, [r3, #6]
    break;
 800a2c0:	e009      	b.n	800a2d6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	4a07      	ldr	r2, [pc, #28]	; (800a2e4 <CDC_Control_FS+0xe0>)
 800a2c6:	6810      	ldr	r0, [r2, #0]
 800a2c8:	6018      	str	r0, [r3, #0]
 800a2ca:	8891      	ldrh	r1, [r2, #4]
 800a2cc:	7992      	ldrb	r2, [r2, #6]
 800a2ce:	8099      	strh	r1, [r3, #4]
 800a2d0:	719a      	strb	r2, [r3, #6]
    break;
 800a2d2:	e000      	b.n	800a2d6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2d4:	bf00      	nop
  }

  return (USBD_OK);
 800a2d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	200001a0 	.word	0x200001a0

0800a2e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  printf("recv start\r\n");
  //osMessageQueuePut(myQueue01Handle, Buf, 0U, 0U);
  if(*Len>32) memcpy(R_buffer, Buf, 32);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b20      	cmp	r3, #32
 800a2f8:	d905      	bls.n	800a306 <CDC_Receive_FS+0x1e>
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	6879      	ldr	r1, [r7, #4]
 800a2fe:	480e      	ldr	r0, [pc, #56]	; (800a338 <CDC_Receive_FS+0x50>)
 800a300:	f000 fdb1 	bl	800ae66 <memcpy>
 800a304:	e006      	b.n	800a314 <CDC_Receive_FS+0x2c>
  else memcpy(R_buffer, Buf, *Len);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	480a      	ldr	r0, [pc, #40]	; (800a338 <CDC_Receive_FS+0x50>)
 800a310:	f000 fda9 	bl	800ae66 <memcpy>
  osSemaphoreRelease(DataInSem01Handle);
 800a314:	4b09      	ldr	r3, [pc, #36]	; (800a33c <CDC_Receive_FS+0x54>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fc fd11 	bl	8006d40 <osSemaphoreRelease>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	4807      	ldr	r0, [pc, #28]	; (800a340 <CDC_Receive_FS+0x58>)
 800a322:	f7fb f91a 	bl	800555a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a326:	4806      	ldr	r0, [pc, #24]	; (800a340 <CDC_Receive_FS+0x58>)
 800a328:	f7fb f960 	bl	80055ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a32c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20004ea4 	.word	0x20004ea4
 800a33c:	20004ed0 	.word	0x20004ed0
 800a340:	20004f6c 	.word	0x20004f6c

0800a344 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a354:	4b0d      	ldr	r3, [pc, #52]	; (800a38c <CDC_Transmit_FS+0x48>)
 800a356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a35a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a366:	2301      	movs	r3, #1
 800a368:	e00b      	b.n	800a382 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a36a:	887b      	ldrh	r3, [r7, #2]
 800a36c:	461a      	mov	r2, r3
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	4806      	ldr	r0, [pc, #24]	; (800a38c <CDC_Transmit_FS+0x48>)
 800a372:	f7fb f8d4 	bl	800551e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a376:	4805      	ldr	r0, [pc, #20]	; (800a38c <CDC_Transmit_FS+0x48>)
 800a378:	f7fb f908 	bl	800558c <USBD_CDC_TransmitPacket>
 800a37c:	4603      	mov	r3, r0
 800a37e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a380:	7bfb      	ldrb	r3, [r7, #15]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	20004f6c 	.word	0x20004f6c

0800a390 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a390:	b480      	push	{r7}
 800a392:	b087      	sub	sp, #28
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	4613      	mov	r3, r2
 800a39c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	371c      	adds	r7, #28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
	...

0800a3b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	6039      	str	r1, [r7, #0]
 800a3be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2212      	movs	r2, #18
 800a3c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3c6:	4b03      	ldr	r3, [pc, #12]	; (800a3d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	200001d8 	.word	0x200001d8

0800a3d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	6039      	str	r1, [r7, #0]
 800a3e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	2204      	movs	r2, #4
 800a3e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3ea:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
 800a3f8:	200001ec 	.word	0x200001ec

0800a3fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d105      	bne.n	800a41a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	4907      	ldr	r1, [pc, #28]	; (800a430 <USBD_FS_ProductStrDescriptor+0x34>)
 800a412:	4808      	ldr	r0, [pc, #32]	; (800a434 <USBD_FS_ProductStrDescriptor+0x38>)
 800a414:	f7fc f99d 	bl	8006752 <USBD_GetString>
 800a418:	e004      	b.n	800a424 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	4904      	ldr	r1, [pc, #16]	; (800a430 <USBD_FS_ProductStrDescriptor+0x34>)
 800a41e:	4805      	ldr	r0, [pc, #20]	; (800a434 <USBD_FS_ProductStrDescriptor+0x38>)
 800a420:	f7fc f997 	bl	8006752 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a424:	4b02      	ldr	r3, [pc, #8]	; (800a430 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	2000623c 	.word	0x2000623c
 800a434:	0800c194 	.word	0x0800c194

0800a438 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	4603      	mov	r3, r0
 800a440:	6039      	str	r1, [r7, #0]
 800a442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	4904      	ldr	r1, [pc, #16]	; (800a458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a448:	4804      	ldr	r0, [pc, #16]	; (800a45c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a44a:	f7fc f982 	bl	8006752 <USBD_GetString>
  return USBD_StrDesc;
 800a44e:	4b02      	ldr	r3, [pc, #8]	; (800a458 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a450:	4618      	mov	r0, r3
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	2000623c 	.word	0x2000623c
 800a45c:	0800c1ac 	.word	0x0800c1ac

0800a460 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	6039      	str	r1, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	221a      	movs	r2, #26
 800a470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a472:	f000 f843 	bl	800a4fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a476:	4b02      	ldr	r3, [pc, #8]	; (800a480 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	200001f0 	.word	0x200001f0

0800a484 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	4603      	mov	r3, r0
 800a48c:	6039      	str	r1, [r7, #0]
 800a48e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d105      	bne.n	800a4a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	4907      	ldr	r1, [pc, #28]	; (800a4b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a49a:	4808      	ldr	r0, [pc, #32]	; (800a4bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a49c:	f7fc f959 	bl	8006752 <USBD_GetString>
 800a4a0:	e004      	b.n	800a4ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	4904      	ldr	r1, [pc, #16]	; (800a4b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4a6:	4805      	ldr	r0, [pc, #20]	; (800a4bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4a8:	f7fc f953 	bl	8006752 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4ac:	4b02      	ldr	r3, [pc, #8]	; (800a4b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	2000623c 	.word	0x2000623c
 800a4bc:	0800c1c0 	.word	0x0800c1c0

0800a4c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	6039      	str	r1, [r7, #0]
 800a4ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4cc:	79fb      	ldrb	r3, [r7, #7]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d105      	bne.n	800a4de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	4907      	ldr	r1, [pc, #28]	; (800a4f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4d6:	4808      	ldr	r0, [pc, #32]	; (800a4f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4d8:	f7fc f93b 	bl	8006752 <USBD_GetString>
 800a4dc:	e004      	b.n	800a4e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	4904      	ldr	r1, [pc, #16]	; (800a4f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4e2:	4805      	ldr	r0, [pc, #20]	; (800a4f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4e4:	f7fc f935 	bl	8006752 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4e8:	4b02      	ldr	r3, [pc, #8]	; (800a4f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	2000623c 	.word	0x2000623c
 800a4f8:	0800c1cc 	.word	0x0800c1cc

0800a4fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a502:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <Get_SerialNum+0x44>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a508:	4b0e      	ldr	r3, [pc, #56]	; (800a544 <Get_SerialNum+0x48>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a50e:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <Get_SerialNum+0x4c>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4413      	add	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d009      	beq.n	800a536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a522:	2208      	movs	r2, #8
 800a524:	4909      	ldr	r1, [pc, #36]	; (800a54c <Get_SerialNum+0x50>)
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 f814 	bl	800a554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a52c:	2204      	movs	r2, #4
 800a52e:	4908      	ldr	r1, [pc, #32]	; (800a550 <Get_SerialNum+0x54>)
 800a530:	68b8      	ldr	r0, [r7, #8]
 800a532:	f000 f80f 	bl	800a554 <IntToUnicode>
  }
}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	1fff7a10 	.word	0x1fff7a10
 800a544:	1fff7a14 	.word	0x1fff7a14
 800a548:	1fff7a18 	.word	0x1fff7a18
 800a54c:	200001f2 	.word	0x200001f2
 800a550:	20000202 	.word	0x20000202

0800a554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	4613      	mov	r3, r2
 800a560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a566:	2300      	movs	r3, #0
 800a568:	75fb      	strb	r3, [r7, #23]
 800a56a:	e027      	b.n	800a5bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	0f1b      	lsrs	r3, r3, #28
 800a570:	2b09      	cmp	r3, #9
 800a572:	d80b      	bhi.n	800a58c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	0f1b      	lsrs	r3, r3, #28
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	4619      	mov	r1, r3
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	440b      	add	r3, r1
 800a584:	3230      	adds	r2, #48	; 0x30
 800a586:	b2d2      	uxtb	r2, r2
 800a588:	701a      	strb	r2, [r3, #0]
 800a58a:	e00a      	b.n	800a5a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	0f1b      	lsrs	r3, r3, #28
 800a590:	b2da      	uxtb	r2, r3
 800a592:	7dfb      	ldrb	r3, [r7, #23]
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	4619      	mov	r1, r3
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	440b      	add	r3, r1
 800a59c:	3237      	adds	r2, #55	; 0x37
 800a59e:	b2d2      	uxtb	r2, r2
 800a5a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	011b      	lsls	r3, r3, #4
 800a5a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	005b      	lsls	r3, r3, #1
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	75fb      	strb	r3, [r7, #23]
 800a5bc:	7dfa      	ldrb	r2, [r7, #23]
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d3d3      	bcc.n	800a56c <IntToUnicode+0x18>
  }
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
 800a5c8:	371c      	adds	r7, #28
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08a      	sub	sp, #40	; 0x28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5dc:	f107 0314 	add.w	r3, r7, #20
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	605a      	str	r2, [r3, #4]
 800a5e6:	609a      	str	r2, [r3, #8]
 800a5e8:	60da      	str	r2, [r3, #12]
 800a5ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5f4:	d13a      	bne.n	800a66c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	4b1e      	ldr	r3, [pc, #120]	; (800a674 <HAL_PCD_MspInit+0xa0>)
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	4a1d      	ldr	r2, [pc, #116]	; (800a674 <HAL_PCD_MspInit+0xa0>)
 800a600:	f043 0301 	orr.w	r3, r3, #1
 800a604:	6313      	str	r3, [r2, #48]	; 0x30
 800a606:	4b1b      	ldr	r3, [pc, #108]	; (800a674 <HAL_PCD_MspInit+0xa0>)
 800a608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a612:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a618:	2302      	movs	r3, #2
 800a61a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61c:	2300      	movs	r3, #0
 800a61e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a620:	2303      	movs	r3, #3
 800a622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a624:	230a      	movs	r3, #10
 800a626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a628:	f107 0314 	add.w	r3, r7, #20
 800a62c:	4619      	mov	r1, r3
 800a62e:	4812      	ldr	r0, [pc, #72]	; (800a678 <HAL_PCD_MspInit+0xa4>)
 800a630:	f7f6 fec8 	bl	80013c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a634:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <HAL_PCD_MspInit+0xa0>)
 800a636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a638:	4a0e      	ldr	r2, [pc, #56]	; (800a674 <HAL_PCD_MspInit+0xa0>)
 800a63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63e:	6353      	str	r3, [r2, #52]	; 0x34
 800a640:	2300      	movs	r3, #0
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <HAL_PCD_MspInit+0xa0>)
 800a646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a648:	4a0a      	ldr	r2, [pc, #40]	; (800a674 <HAL_PCD_MspInit+0xa0>)
 800a64a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a64e:	6453      	str	r3, [r2, #68]	; 0x44
 800a650:	4b08      	ldr	r3, [pc, #32]	; (800a674 <HAL_PCD_MspInit+0xa0>)
 800a652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a65c:	2200      	movs	r2, #0
 800a65e:	2105      	movs	r1, #5
 800a660:	2043      	movs	r0, #67	; 0x43
 800a662:	f7f6 fe85 	bl	8001370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a666:	2043      	movs	r0, #67	; 0x43
 800a668:	f7f6 fe9e 	bl	80013a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a66c:	bf00      	nop
 800a66e:	3728      	adds	r7, #40	; 0x28
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	40023800 	.word	0x40023800
 800a678:	40020000 	.word	0x40020000

0800a67c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a690:	4619      	mov	r1, r3
 800a692:	4610      	mov	r0, r2
 800a694:	f7fb f876 	bl	8005784 <USBD_LL_SetupStage>
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a6b2:	78fa      	ldrb	r2, [r7, #3]
 800a6b4:	6879      	ldr	r1, [r7, #4]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	00db      	lsls	r3, r3, #3
 800a6ba:	1a9b      	subs	r3, r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	440b      	add	r3, r1
 800a6c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	78fb      	ldrb	r3, [r7, #3]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	f7fb f8b0 	bl	800582e <USBD_LL_DataOutStage>
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a6e8:	78fa      	ldrb	r2, [r7, #3]
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	00db      	lsls	r3, r3, #3
 800a6f0:	1a9b      	subs	r3, r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	440b      	add	r3, r1
 800a6f6:	3348      	adds	r3, #72	; 0x48
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	78fb      	ldrb	r3, [r7, #3]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	f7fb f8f9 	bl	80058f4 <USBD_LL_DataInStage>
}
 800a702:	bf00      	nop
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b082      	sub	sp, #8
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fb fa0d 	bl	8005b38 <USBD_LL_SOF>
}
 800a71e:	bf00      	nop
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a72e:	2301      	movs	r3, #1
 800a730:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d102      	bne.n	800a740 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a73a:	2300      	movs	r3, #0
 800a73c:	73fb      	strb	r3, [r7, #15]
 800a73e:	e008      	b.n	800a752 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	2b02      	cmp	r3, #2
 800a746:	d102      	bne.n	800a74e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a748:	2301      	movs	r3, #1
 800a74a:	73fb      	strb	r3, [r7, #15]
 800a74c:	e001      	b.n	800a752 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a74e:	f7f6 fb79 	bl	8000e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a758:	7bfa      	ldrb	r2, [r7, #15]
 800a75a:	4611      	mov	r1, r2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fb f9ad 	bl	8005abc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fb f959 	bl	8005a20 <USBD_LL_Reset>
}
 800a76e:	bf00      	nop
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a786:	4618      	mov	r0, r3
 800a788:	f7fb f9a8 	bl	8005adc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	6812      	ldr	r2, [r2, #0]
 800a79a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a79e:	f043 0301 	orr.w	r3, r3, #1
 800a7a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7ac:	4b04      	ldr	r3, [pc, #16]	; (800a7c0 <HAL_PCD_SuspendCallback+0x48>)
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	4a03      	ldr	r2, [pc, #12]	; (800a7c0 <HAL_PCD_SuspendCallback+0x48>)
 800a7b2:	f043 0306 	orr.w	r3, r3, #6
 800a7b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7b8:	bf00      	nop
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	e000ed00 	.word	0xe000ed00

0800a7c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fb f998 	bl	8005b08 <USBD_LL_Resume>
}
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7f2:	78fa      	ldrb	r2, [r7, #3]
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fb f9e6 	bl	8005bc8 <USBD_LL_IsoOUTIncomplete>
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a816:	78fa      	ldrb	r2, [r7, #3]
 800a818:	4611      	mov	r1, r2
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fb f9ae 	bl	8005b7c <USBD_LL_IsoINIncomplete>
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a836:	4618      	mov	r0, r3
 800a838:	f7fb f9ec 	bl	8005c14 <USBD_LL_DevConnected>
}
 800a83c:	bf00      	nop
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a852:	4618      	mov	r0, r3
 800a854:	f7fb f9e9 	bl	8005c2a <USBD_LL_DevDisconnected>
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d13c      	bne.n	800a8ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a870:	4a20      	ldr	r2, [pc, #128]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a1e      	ldr	r2, [pc, #120]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a87c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a880:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a882:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a886:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a888:	4b1a      	ldr	r3, [pc, #104]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a88a:	2204      	movs	r2, #4
 800a88c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a88e:	4b19      	ldr	r3, [pc, #100]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a890:	2202      	movs	r2, #2
 800a892:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a894:	4b17      	ldr	r3, [pc, #92]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a896:	2200      	movs	r2, #0
 800a898:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a89a:	4b16      	ldr	r3, [pc, #88]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a89c:	2202      	movs	r2, #2
 800a89e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8a0:	4b14      	ldr	r3, [pc, #80]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8a6:	4b13      	ldr	r3, [pc, #76]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8ac:	4b11      	ldr	r3, [pc, #68]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8b2:	4b10      	ldr	r3, [pc, #64]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8b8:	4b0e      	ldr	r3, [pc, #56]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8be:	480d      	ldr	r0, [pc, #52]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a8c0:	f7f6 ff86 	bl	80017d0 <HAL_PCD_Init>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8ca:	f7f6 fabb 	bl	8000e44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8ce:	2180      	movs	r1, #128	; 0x80
 800a8d0:	4808      	ldr	r0, [pc, #32]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a8d2:	f7f8 f8e4 	bl	8002a9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8d6:	2240      	movs	r2, #64	; 0x40
 800a8d8:	2100      	movs	r1, #0
 800a8da:	4806      	ldr	r0, [pc, #24]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a8dc:	f7f8 f898 	bl	8002a10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8e0:	2280      	movs	r2, #128	; 0x80
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	4803      	ldr	r0, [pc, #12]	; (800a8f4 <USBD_LL_Init+0x94>)
 800a8e6:	f7f8 f893 	bl	8002a10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	2000643c 	.word	0x2000643c

0800a8f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a90e:	4618      	mov	r0, r3
 800a910:	f7f7 f87b 	bl	8001a0a <HAL_PCD_Start>
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 f942 	bl	800aba4 <USBD_Get_USB_Status>
 800a920:	4603      	mov	r3, r0
 800a922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a924:	7bbb      	ldrb	r3, [r7, #14]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	4608      	mov	r0, r1
 800a938:	4611      	mov	r1, r2
 800a93a:	461a      	mov	r2, r3
 800a93c:	4603      	mov	r3, r0
 800a93e:	70fb      	strb	r3, [r7, #3]
 800a940:	460b      	mov	r3, r1
 800a942:	70bb      	strb	r3, [r7, #2]
 800a944:	4613      	mov	r3, r2
 800a946:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a956:	78bb      	ldrb	r3, [r7, #2]
 800a958:	883a      	ldrh	r2, [r7, #0]
 800a95a:	78f9      	ldrb	r1, [r7, #3]
 800a95c:	f7f7 fc5f 	bl	800221e <HAL_PCD_EP_Open>
 800a960:	4603      	mov	r3, r0
 800a962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a964:	7bfb      	ldrb	r3, [r7, #15]
 800a966:	4618      	mov	r0, r3
 800a968:	f000 f91c 	bl	800aba4 <USBD_Get_USB_Status>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a970:	7bbb      	ldrb	r3, [r7, #14]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a994:	78fa      	ldrb	r2, [r7, #3]
 800a996:	4611      	mov	r1, r2
 800a998:	4618      	mov	r0, r3
 800a99a:	f7f7 fca8 	bl	80022ee <HAL_PCD_EP_Close>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a2:	7bfb      	ldrb	r3, [r7, #15]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 f8fd 	bl	800aba4 <USBD_Get_USB_Status>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9d2:	78fa      	ldrb	r2, [r7, #3]
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7f7 fd80 	bl	80024dc <HAL_PCD_EP_SetStall>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 f8de 	bl	800aba4 <USBD_Get_USB_Status>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa10:	78fa      	ldrb	r2, [r7, #3]
 800aa12:	4611      	mov	r1, r2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7f7 fdc5 	bl	80025a4 <HAL_PCD_EP_ClrStall>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 f8bf 	bl	800aba4 <USBD_Get_USB_Status>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	da0b      	bge.n	800aa68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa56:	68f9      	ldr	r1, [r7, #12]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	1a9b      	subs	r3, r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	440b      	add	r3, r1
 800aa62:	333e      	adds	r3, #62	; 0x3e
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	e00b      	b.n	800aa80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa68:	78fb      	ldrb	r3, [r7, #3]
 800aa6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa6e:	68f9      	ldr	r1, [r7, #12]
 800aa70:	4613      	mov	r3, r2
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	440b      	add	r3, r1
 800aa7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aaa6:	78fa      	ldrb	r2, [r7, #3]
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7f7 fb92 	bl	80021d4 <HAL_PCD_SetAddress>
 800aab0:	4603      	mov	r3, r0
 800aab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 f874 	bl	800aba4 <USBD_Get_USB_Status>
 800aabc:	4603      	mov	r3, r0
 800aabe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b086      	sub	sp, #24
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
 800aad6:	460b      	mov	r3, r1
 800aad8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aae8:	7af9      	ldrb	r1, [r7, #11]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	f7f7 fcab 	bl	8002448 <HAL_PCD_EP_Transmit>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 f853 	bl	800aba4 <USBD_Get_USB_Status>
 800aafe:	4603      	mov	r3, r0
 800ab00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab02:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	603b      	str	r3, [r7, #0]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab2a:	7af9      	ldrb	r1, [r7, #11]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	f7f7 fc27 	bl	8002382 <HAL_PCD_EP_Receive>
 800ab34:	4603      	mov	r3, r0
 800ab36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab38:	7dfb      	ldrb	r3, [r7, #23]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 f832 	bl	800aba4 <USBD_Get_USB_Status>
 800ab40:	4603      	mov	r3, r0
 800ab42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab44:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b082      	sub	sp, #8
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	460b      	mov	r3, r1
 800ab58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab60:	78fa      	ldrb	r2, [r7, #3]
 800ab62:	4611      	mov	r1, r2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7f7 fc57 	bl	8002418 <HAL_PCD_EP_GetRxCount>
 800ab6a:	4603      	mov	r3, r0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab7c:	4b03      	ldr	r3, [pc, #12]	; (800ab8c <USBD_static_malloc+0x18>)
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	20004c6c 	.word	0x20004c6c

0800ab90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]

}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	4603      	mov	r3, r0
 800abac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abb2:	79fb      	ldrb	r3, [r7, #7]
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d817      	bhi.n	800abe8 <USBD_Get_USB_Status+0x44>
 800abb8:	a201      	add	r2, pc, #4	; (adr r2, 800abc0 <USBD_Get_USB_Status+0x1c>)
 800abba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbe:	bf00      	nop
 800abc0:	0800abd1 	.word	0x0800abd1
 800abc4:	0800abd7 	.word	0x0800abd7
 800abc8:	0800abdd 	.word	0x0800abdd
 800abcc:	0800abe3 	.word	0x0800abe3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
    break;
 800abd4:	e00b      	b.n	800abee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abd6:	2303      	movs	r3, #3
 800abd8:	73fb      	strb	r3, [r7, #15]
    break;
 800abda:	e008      	b.n	800abee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abdc:	2301      	movs	r3, #1
 800abde:	73fb      	strb	r3, [r7, #15]
    break;
 800abe0:	e005      	b.n	800abee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abe2:	2303      	movs	r3, #3
 800abe4:	73fb      	strb	r3, [r7, #15]
    break;
 800abe6:	e002      	b.n	800abee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abe8:	2303      	movs	r3, #3
 800abea:	73fb      	strb	r3, [r7, #15]
    break;
 800abec:	bf00      	nop
  }
  return usb_status;
 800abee:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <atoi>:
 800abfc:	220a      	movs	r2, #10
 800abfe:	2100      	movs	r1, #0
 800ac00:	f000 bb2a 	b.w	800b258 <strtol>

0800ac04 <__errno>:
 800ac04:	4b01      	ldr	r3, [pc, #4]	; (800ac0c <__errno+0x8>)
 800ac06:	6818      	ldr	r0, [r3, #0]
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	2000020c 	.word	0x2000020c

0800ac10 <std>:
 800ac10:	2300      	movs	r3, #0
 800ac12:	b510      	push	{r4, lr}
 800ac14:	4604      	mov	r4, r0
 800ac16:	e9c0 3300 	strd	r3, r3, [r0]
 800ac1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac1e:	6083      	str	r3, [r0, #8]
 800ac20:	8181      	strh	r1, [r0, #12]
 800ac22:	6643      	str	r3, [r0, #100]	; 0x64
 800ac24:	81c2      	strh	r2, [r0, #14]
 800ac26:	6183      	str	r3, [r0, #24]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	305c      	adds	r0, #92	; 0x5c
 800ac2e:	f000 f928 	bl	800ae82 <memset>
 800ac32:	4b05      	ldr	r3, [pc, #20]	; (800ac48 <std+0x38>)
 800ac34:	6263      	str	r3, [r4, #36]	; 0x24
 800ac36:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <std+0x3c>)
 800ac38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <std+0x40>)
 800ac3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <std+0x44>)
 800ac40:	6224      	str	r4, [r4, #32]
 800ac42:	6323      	str	r3, [r4, #48]	; 0x30
 800ac44:	bd10      	pop	{r4, pc}
 800ac46:	bf00      	nop
 800ac48:	0800b0ad 	.word	0x0800b0ad
 800ac4c:	0800b0cf 	.word	0x0800b0cf
 800ac50:	0800b107 	.word	0x0800b107
 800ac54:	0800b12b 	.word	0x0800b12b

0800ac58 <_cleanup_r>:
 800ac58:	4901      	ldr	r1, [pc, #4]	; (800ac60 <_cleanup_r+0x8>)
 800ac5a:	f000 b8af 	b.w	800adbc <_fwalk_reent>
 800ac5e:	bf00      	nop
 800ac60:	0800b3bd 	.word	0x0800b3bd

0800ac64 <__sfmoreglue>:
 800ac64:	b570      	push	{r4, r5, r6, lr}
 800ac66:	1e4a      	subs	r2, r1, #1
 800ac68:	2568      	movs	r5, #104	; 0x68
 800ac6a:	4355      	muls	r5, r2
 800ac6c:	460e      	mov	r6, r1
 800ac6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac72:	f000 f90f 	bl	800ae94 <_malloc_r>
 800ac76:	4604      	mov	r4, r0
 800ac78:	b140      	cbz	r0, 800ac8c <__sfmoreglue+0x28>
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac80:	300c      	adds	r0, #12
 800ac82:	60a0      	str	r0, [r4, #8]
 800ac84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac88:	f000 f8fb 	bl	800ae82 <memset>
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}

0800ac90 <__sfp_lock_acquire>:
 800ac90:	4801      	ldr	r0, [pc, #4]	; (800ac98 <__sfp_lock_acquire+0x8>)
 800ac92:	f000 b8d8 	b.w	800ae46 <__retarget_lock_acquire_recursive>
 800ac96:	bf00      	nop
 800ac98:	2000684c 	.word	0x2000684c

0800ac9c <__sfp_lock_release>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	; (800aca4 <__sfp_lock_release+0x8>)
 800ac9e:	f000 b8d3 	b.w	800ae48 <__retarget_lock_release_recursive>
 800aca2:	bf00      	nop
 800aca4:	2000684c 	.word	0x2000684c

0800aca8 <__sinit_lock_acquire>:
 800aca8:	4801      	ldr	r0, [pc, #4]	; (800acb0 <__sinit_lock_acquire+0x8>)
 800acaa:	f000 b8cc 	b.w	800ae46 <__retarget_lock_acquire_recursive>
 800acae:	bf00      	nop
 800acb0:	20006847 	.word	0x20006847

0800acb4 <__sinit_lock_release>:
 800acb4:	4801      	ldr	r0, [pc, #4]	; (800acbc <__sinit_lock_release+0x8>)
 800acb6:	f000 b8c7 	b.w	800ae48 <__retarget_lock_release_recursive>
 800acba:	bf00      	nop
 800acbc:	20006847 	.word	0x20006847

0800acc0 <__sinit>:
 800acc0:	b510      	push	{r4, lr}
 800acc2:	4604      	mov	r4, r0
 800acc4:	f7ff fff0 	bl	800aca8 <__sinit_lock_acquire>
 800acc8:	69a3      	ldr	r3, [r4, #24]
 800acca:	b11b      	cbz	r3, 800acd4 <__sinit+0x14>
 800accc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd0:	f7ff bff0 	b.w	800acb4 <__sinit_lock_release>
 800acd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acd8:	6523      	str	r3, [r4, #80]	; 0x50
 800acda:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <__sinit+0x68>)
 800acdc:	4a13      	ldr	r2, [pc, #76]	; (800ad2c <__sinit+0x6c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ace2:	42a3      	cmp	r3, r4
 800ace4:	bf04      	itt	eq
 800ace6:	2301      	moveq	r3, #1
 800ace8:	61a3      	streq	r3, [r4, #24]
 800acea:	4620      	mov	r0, r4
 800acec:	f000 f820 	bl	800ad30 <__sfp>
 800acf0:	6060      	str	r0, [r4, #4]
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 f81c 	bl	800ad30 <__sfp>
 800acf8:	60a0      	str	r0, [r4, #8]
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f818 	bl	800ad30 <__sfp>
 800ad00:	2200      	movs	r2, #0
 800ad02:	60e0      	str	r0, [r4, #12]
 800ad04:	2104      	movs	r1, #4
 800ad06:	6860      	ldr	r0, [r4, #4]
 800ad08:	f7ff ff82 	bl	800ac10 <std>
 800ad0c:	68a0      	ldr	r0, [r4, #8]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	2109      	movs	r1, #9
 800ad12:	f7ff ff7d 	bl	800ac10 <std>
 800ad16:	68e0      	ldr	r0, [r4, #12]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	2112      	movs	r1, #18
 800ad1c:	f7ff ff78 	bl	800ac10 <std>
 800ad20:	2301      	movs	r3, #1
 800ad22:	61a3      	str	r3, [r4, #24]
 800ad24:	e7d2      	b.n	800accc <__sinit+0xc>
 800ad26:	bf00      	nop
 800ad28:	0800c39c 	.word	0x0800c39c
 800ad2c:	0800ac59 	.word	0x0800ac59

0800ad30 <__sfp>:
 800ad30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad32:	4607      	mov	r7, r0
 800ad34:	f7ff ffac 	bl	800ac90 <__sfp_lock_acquire>
 800ad38:	4b1e      	ldr	r3, [pc, #120]	; (800adb4 <__sfp+0x84>)
 800ad3a:	681e      	ldr	r6, [r3, #0]
 800ad3c:	69b3      	ldr	r3, [r6, #24]
 800ad3e:	b913      	cbnz	r3, 800ad46 <__sfp+0x16>
 800ad40:	4630      	mov	r0, r6
 800ad42:	f7ff ffbd 	bl	800acc0 <__sinit>
 800ad46:	3648      	adds	r6, #72	; 0x48
 800ad48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	d503      	bpl.n	800ad58 <__sfp+0x28>
 800ad50:	6833      	ldr	r3, [r6, #0]
 800ad52:	b30b      	cbz	r3, 800ad98 <__sfp+0x68>
 800ad54:	6836      	ldr	r6, [r6, #0]
 800ad56:	e7f7      	b.n	800ad48 <__sfp+0x18>
 800ad58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad5c:	b9d5      	cbnz	r5, 800ad94 <__sfp+0x64>
 800ad5e:	4b16      	ldr	r3, [pc, #88]	; (800adb8 <__sfp+0x88>)
 800ad60:	60e3      	str	r3, [r4, #12]
 800ad62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad66:	6665      	str	r5, [r4, #100]	; 0x64
 800ad68:	f000 f86c 	bl	800ae44 <__retarget_lock_init_recursive>
 800ad6c:	f7ff ff96 	bl	800ac9c <__sfp_lock_release>
 800ad70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad78:	6025      	str	r5, [r4, #0]
 800ad7a:	61a5      	str	r5, [r4, #24]
 800ad7c:	2208      	movs	r2, #8
 800ad7e:	4629      	mov	r1, r5
 800ad80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad84:	f000 f87d 	bl	800ae82 <memset>
 800ad88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad90:	4620      	mov	r0, r4
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad94:	3468      	adds	r4, #104	; 0x68
 800ad96:	e7d9      	b.n	800ad4c <__sfp+0x1c>
 800ad98:	2104      	movs	r1, #4
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	f7ff ff62 	bl	800ac64 <__sfmoreglue>
 800ada0:	4604      	mov	r4, r0
 800ada2:	6030      	str	r0, [r6, #0]
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d1d5      	bne.n	800ad54 <__sfp+0x24>
 800ada8:	f7ff ff78 	bl	800ac9c <__sfp_lock_release>
 800adac:	230c      	movs	r3, #12
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	e7ee      	b.n	800ad90 <__sfp+0x60>
 800adb2:	bf00      	nop
 800adb4:	0800c39c 	.word	0x0800c39c
 800adb8:	ffff0001 	.word	0xffff0001

0800adbc <_fwalk_reent>:
 800adbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc0:	4606      	mov	r6, r0
 800adc2:	4688      	mov	r8, r1
 800adc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adc8:	2700      	movs	r7, #0
 800adca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adce:	f1b9 0901 	subs.w	r9, r9, #1
 800add2:	d505      	bpl.n	800ade0 <_fwalk_reent+0x24>
 800add4:	6824      	ldr	r4, [r4, #0]
 800add6:	2c00      	cmp	r4, #0
 800add8:	d1f7      	bne.n	800adca <_fwalk_reent+0xe>
 800adda:	4638      	mov	r0, r7
 800addc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade0:	89ab      	ldrh	r3, [r5, #12]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d907      	bls.n	800adf6 <_fwalk_reent+0x3a>
 800ade6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adea:	3301      	adds	r3, #1
 800adec:	d003      	beq.n	800adf6 <_fwalk_reent+0x3a>
 800adee:	4629      	mov	r1, r5
 800adf0:	4630      	mov	r0, r6
 800adf2:	47c0      	blx	r8
 800adf4:	4307      	orrs	r7, r0
 800adf6:	3568      	adds	r5, #104	; 0x68
 800adf8:	e7e9      	b.n	800adce <_fwalk_reent+0x12>
	...

0800adfc <__libc_init_array>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	4d0d      	ldr	r5, [pc, #52]	; (800ae34 <__libc_init_array+0x38>)
 800ae00:	4c0d      	ldr	r4, [pc, #52]	; (800ae38 <__libc_init_array+0x3c>)
 800ae02:	1b64      	subs	r4, r4, r5
 800ae04:	10a4      	asrs	r4, r4, #2
 800ae06:	2600      	movs	r6, #0
 800ae08:	42a6      	cmp	r6, r4
 800ae0a:	d109      	bne.n	800ae20 <__libc_init_array+0x24>
 800ae0c:	4d0b      	ldr	r5, [pc, #44]	; (800ae3c <__libc_init_array+0x40>)
 800ae0e:	4c0c      	ldr	r4, [pc, #48]	; (800ae40 <__libc_init_array+0x44>)
 800ae10:	f001 f968 	bl	800c0e4 <_init>
 800ae14:	1b64      	subs	r4, r4, r5
 800ae16:	10a4      	asrs	r4, r4, #2
 800ae18:	2600      	movs	r6, #0
 800ae1a:	42a6      	cmp	r6, r4
 800ae1c:	d105      	bne.n	800ae2a <__libc_init_array+0x2e>
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae24:	4798      	blx	r3
 800ae26:	3601      	adds	r6, #1
 800ae28:	e7ee      	b.n	800ae08 <__libc_init_array+0xc>
 800ae2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae2e:	4798      	blx	r3
 800ae30:	3601      	adds	r6, #1
 800ae32:	e7f2      	b.n	800ae1a <__libc_init_array+0x1e>
 800ae34:	0800c4dc 	.word	0x0800c4dc
 800ae38:	0800c4dc 	.word	0x0800c4dc
 800ae3c:	0800c4dc 	.word	0x0800c4dc
 800ae40:	0800c4e0 	.word	0x0800c4e0

0800ae44 <__retarget_lock_init_recursive>:
 800ae44:	4770      	bx	lr

0800ae46 <__retarget_lock_acquire_recursive>:
 800ae46:	4770      	bx	lr

0800ae48 <__retarget_lock_release_recursive>:
 800ae48:	4770      	bx	lr

0800ae4a <memcmp>:
 800ae4a:	b530      	push	{r4, r5, lr}
 800ae4c:	3901      	subs	r1, #1
 800ae4e:	2400      	movs	r4, #0
 800ae50:	42a2      	cmp	r2, r4
 800ae52:	d101      	bne.n	800ae58 <memcmp+0xe>
 800ae54:	2000      	movs	r0, #0
 800ae56:	e005      	b.n	800ae64 <memcmp+0x1a>
 800ae58:	5d03      	ldrb	r3, [r0, r4]
 800ae5a:	3401      	adds	r4, #1
 800ae5c:	5d0d      	ldrb	r5, [r1, r4]
 800ae5e:	42ab      	cmp	r3, r5
 800ae60:	d0f6      	beq.n	800ae50 <memcmp+0x6>
 800ae62:	1b58      	subs	r0, r3, r5
 800ae64:	bd30      	pop	{r4, r5, pc}

0800ae66 <memcpy>:
 800ae66:	440a      	add	r2, r1
 800ae68:	4291      	cmp	r1, r2
 800ae6a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae6e:	d100      	bne.n	800ae72 <memcpy+0xc>
 800ae70:	4770      	bx	lr
 800ae72:	b510      	push	{r4, lr}
 800ae74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae7c:	4291      	cmp	r1, r2
 800ae7e:	d1f9      	bne.n	800ae74 <memcpy+0xe>
 800ae80:	bd10      	pop	{r4, pc}

0800ae82 <memset>:
 800ae82:	4402      	add	r2, r0
 800ae84:	4603      	mov	r3, r0
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d100      	bne.n	800ae8c <memset+0xa>
 800ae8a:	4770      	bx	lr
 800ae8c:	f803 1b01 	strb.w	r1, [r3], #1
 800ae90:	e7f9      	b.n	800ae86 <memset+0x4>
	...

0800ae94 <_malloc_r>:
 800ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae96:	1ccd      	adds	r5, r1, #3
 800ae98:	f025 0503 	bic.w	r5, r5, #3
 800ae9c:	3508      	adds	r5, #8
 800ae9e:	2d0c      	cmp	r5, #12
 800aea0:	bf38      	it	cc
 800aea2:	250c      	movcc	r5, #12
 800aea4:	2d00      	cmp	r5, #0
 800aea6:	4606      	mov	r6, r0
 800aea8:	db01      	blt.n	800aeae <_malloc_r+0x1a>
 800aeaa:	42a9      	cmp	r1, r5
 800aeac:	d903      	bls.n	800aeb6 <_malloc_r+0x22>
 800aeae:	230c      	movs	r3, #12
 800aeb0:	6033      	str	r3, [r6, #0]
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb6:	f000 facf 	bl	800b458 <__malloc_lock>
 800aeba:	4921      	ldr	r1, [pc, #132]	; (800af40 <_malloc_r+0xac>)
 800aebc:	680a      	ldr	r2, [r1, #0]
 800aebe:	4614      	mov	r4, r2
 800aec0:	b99c      	cbnz	r4, 800aeea <_malloc_r+0x56>
 800aec2:	4f20      	ldr	r7, [pc, #128]	; (800af44 <_malloc_r+0xb0>)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	b923      	cbnz	r3, 800aed2 <_malloc_r+0x3e>
 800aec8:	4621      	mov	r1, r4
 800aeca:	4630      	mov	r0, r6
 800aecc:	f000 f8be 	bl	800b04c <_sbrk_r>
 800aed0:	6038      	str	r0, [r7, #0]
 800aed2:	4629      	mov	r1, r5
 800aed4:	4630      	mov	r0, r6
 800aed6:	f000 f8b9 	bl	800b04c <_sbrk_r>
 800aeda:	1c43      	adds	r3, r0, #1
 800aedc:	d123      	bne.n	800af26 <_malloc_r+0x92>
 800aede:	230c      	movs	r3, #12
 800aee0:	6033      	str	r3, [r6, #0]
 800aee2:	4630      	mov	r0, r6
 800aee4:	f000 fabe 	bl	800b464 <__malloc_unlock>
 800aee8:	e7e3      	b.n	800aeb2 <_malloc_r+0x1e>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	1b5b      	subs	r3, r3, r5
 800aeee:	d417      	bmi.n	800af20 <_malloc_r+0x8c>
 800aef0:	2b0b      	cmp	r3, #11
 800aef2:	d903      	bls.n	800aefc <_malloc_r+0x68>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	441c      	add	r4, r3
 800aef8:	6025      	str	r5, [r4, #0]
 800aefa:	e004      	b.n	800af06 <_malloc_r+0x72>
 800aefc:	6863      	ldr	r3, [r4, #4]
 800aefe:	42a2      	cmp	r2, r4
 800af00:	bf0c      	ite	eq
 800af02:	600b      	streq	r3, [r1, #0]
 800af04:	6053      	strne	r3, [r2, #4]
 800af06:	4630      	mov	r0, r6
 800af08:	f000 faac 	bl	800b464 <__malloc_unlock>
 800af0c:	f104 000b 	add.w	r0, r4, #11
 800af10:	1d23      	adds	r3, r4, #4
 800af12:	f020 0007 	bic.w	r0, r0, #7
 800af16:	1ac2      	subs	r2, r0, r3
 800af18:	d0cc      	beq.n	800aeb4 <_malloc_r+0x20>
 800af1a:	1a1b      	subs	r3, r3, r0
 800af1c:	50a3      	str	r3, [r4, r2]
 800af1e:	e7c9      	b.n	800aeb4 <_malloc_r+0x20>
 800af20:	4622      	mov	r2, r4
 800af22:	6864      	ldr	r4, [r4, #4]
 800af24:	e7cc      	b.n	800aec0 <_malloc_r+0x2c>
 800af26:	1cc4      	adds	r4, r0, #3
 800af28:	f024 0403 	bic.w	r4, r4, #3
 800af2c:	42a0      	cmp	r0, r4
 800af2e:	d0e3      	beq.n	800aef8 <_malloc_r+0x64>
 800af30:	1a21      	subs	r1, r4, r0
 800af32:	4630      	mov	r0, r6
 800af34:	f000 f88a 	bl	800b04c <_sbrk_r>
 800af38:	3001      	adds	r0, #1
 800af3a:	d1dd      	bne.n	800aef8 <_malloc_r+0x64>
 800af3c:	e7cf      	b.n	800aede <_malloc_r+0x4a>
 800af3e:	bf00      	nop
 800af40:	20004e8c 	.word	0x20004e8c
 800af44:	20004e90 	.word	0x20004e90

0800af48 <iprintf>:
 800af48:	b40f      	push	{r0, r1, r2, r3}
 800af4a:	4b0a      	ldr	r3, [pc, #40]	; (800af74 <iprintf+0x2c>)
 800af4c:	b513      	push	{r0, r1, r4, lr}
 800af4e:	681c      	ldr	r4, [r3, #0]
 800af50:	b124      	cbz	r4, 800af5c <iprintf+0x14>
 800af52:	69a3      	ldr	r3, [r4, #24]
 800af54:	b913      	cbnz	r3, 800af5c <iprintf+0x14>
 800af56:	4620      	mov	r0, r4
 800af58:	f7ff feb2 	bl	800acc0 <__sinit>
 800af5c:	ab05      	add	r3, sp, #20
 800af5e:	9a04      	ldr	r2, [sp, #16]
 800af60:	68a1      	ldr	r1, [r4, #8]
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	4620      	mov	r0, r4
 800af66:	f000 fc59 	bl	800b81c <_vfiprintf_r>
 800af6a:	b002      	add	sp, #8
 800af6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af70:	b004      	add	sp, #16
 800af72:	4770      	bx	lr
 800af74:	2000020c 	.word	0x2000020c

0800af78 <cleanup_glue>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	460c      	mov	r4, r1
 800af7c:	6809      	ldr	r1, [r1, #0]
 800af7e:	4605      	mov	r5, r0
 800af80:	b109      	cbz	r1, 800af86 <cleanup_glue+0xe>
 800af82:	f7ff fff9 	bl	800af78 <cleanup_glue>
 800af86:	4621      	mov	r1, r4
 800af88:	4628      	mov	r0, r5
 800af8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af8e:	f000 ba6f 	b.w	800b470 <_free_r>
	...

0800af94 <_reclaim_reent>:
 800af94:	4b2c      	ldr	r3, [pc, #176]	; (800b048 <_reclaim_reent+0xb4>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4283      	cmp	r3, r0
 800af9a:	b570      	push	{r4, r5, r6, lr}
 800af9c:	4604      	mov	r4, r0
 800af9e:	d051      	beq.n	800b044 <_reclaim_reent+0xb0>
 800afa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800afa2:	b143      	cbz	r3, 800afb6 <_reclaim_reent+0x22>
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d14a      	bne.n	800b040 <_reclaim_reent+0xac>
 800afaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afac:	6819      	ldr	r1, [r3, #0]
 800afae:	b111      	cbz	r1, 800afb6 <_reclaim_reent+0x22>
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 fa5d 	bl	800b470 <_free_r>
 800afb6:	6961      	ldr	r1, [r4, #20]
 800afb8:	b111      	cbz	r1, 800afc0 <_reclaim_reent+0x2c>
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 fa58 	bl	800b470 <_free_r>
 800afc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800afc2:	b111      	cbz	r1, 800afca <_reclaim_reent+0x36>
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 fa53 	bl	800b470 <_free_r>
 800afca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800afcc:	b111      	cbz	r1, 800afd4 <_reclaim_reent+0x40>
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 fa4e 	bl	800b470 <_free_r>
 800afd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800afd6:	b111      	cbz	r1, 800afde <_reclaim_reent+0x4a>
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 fa49 	bl	800b470 <_free_r>
 800afde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800afe0:	b111      	cbz	r1, 800afe8 <_reclaim_reent+0x54>
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 fa44 	bl	800b470 <_free_r>
 800afe8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800afea:	b111      	cbz	r1, 800aff2 <_reclaim_reent+0x5e>
 800afec:	4620      	mov	r0, r4
 800afee:	f000 fa3f 	bl	800b470 <_free_r>
 800aff2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aff4:	b111      	cbz	r1, 800affc <_reclaim_reent+0x68>
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 fa3a 	bl	800b470 <_free_r>
 800affc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800affe:	b111      	cbz	r1, 800b006 <_reclaim_reent+0x72>
 800b000:	4620      	mov	r0, r4
 800b002:	f000 fa35 	bl	800b470 <_free_r>
 800b006:	69a3      	ldr	r3, [r4, #24]
 800b008:	b1e3      	cbz	r3, 800b044 <_reclaim_reent+0xb0>
 800b00a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b00c:	4620      	mov	r0, r4
 800b00e:	4798      	blx	r3
 800b010:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b012:	b1b9      	cbz	r1, 800b044 <_reclaim_reent+0xb0>
 800b014:	4620      	mov	r0, r4
 800b016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b01a:	f7ff bfad 	b.w	800af78 <cleanup_glue>
 800b01e:	5949      	ldr	r1, [r1, r5]
 800b020:	b941      	cbnz	r1, 800b034 <_reclaim_reent+0xa0>
 800b022:	3504      	adds	r5, #4
 800b024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b026:	2d80      	cmp	r5, #128	; 0x80
 800b028:	68d9      	ldr	r1, [r3, #12]
 800b02a:	d1f8      	bne.n	800b01e <_reclaim_reent+0x8a>
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 fa1f 	bl	800b470 <_free_r>
 800b032:	e7ba      	b.n	800afaa <_reclaim_reent+0x16>
 800b034:	680e      	ldr	r6, [r1, #0]
 800b036:	4620      	mov	r0, r4
 800b038:	f000 fa1a 	bl	800b470 <_free_r>
 800b03c:	4631      	mov	r1, r6
 800b03e:	e7ef      	b.n	800b020 <_reclaim_reent+0x8c>
 800b040:	2500      	movs	r5, #0
 800b042:	e7ef      	b.n	800b024 <_reclaim_reent+0x90>
 800b044:	bd70      	pop	{r4, r5, r6, pc}
 800b046:	bf00      	nop
 800b048:	2000020c 	.word	0x2000020c

0800b04c <_sbrk_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4d06      	ldr	r5, [pc, #24]	; (800b068 <_sbrk_r+0x1c>)
 800b050:	2300      	movs	r3, #0
 800b052:	4604      	mov	r4, r0
 800b054:	4608      	mov	r0, r1
 800b056:	602b      	str	r3, [r5, #0]
 800b058:	f7f5 fffa 	bl	8001050 <_sbrk>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_sbrk_r+0x1a>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_sbrk_r+0x1a>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20006850 	.word	0x20006850

0800b06c <siprintf>:
 800b06c:	b40e      	push	{r1, r2, r3}
 800b06e:	b500      	push	{lr}
 800b070:	b09c      	sub	sp, #112	; 0x70
 800b072:	ab1d      	add	r3, sp, #116	; 0x74
 800b074:	9002      	str	r0, [sp, #8]
 800b076:	9006      	str	r0, [sp, #24]
 800b078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b07c:	4809      	ldr	r0, [pc, #36]	; (800b0a4 <siprintf+0x38>)
 800b07e:	9107      	str	r1, [sp, #28]
 800b080:	9104      	str	r1, [sp, #16]
 800b082:	4909      	ldr	r1, [pc, #36]	; (800b0a8 <siprintf+0x3c>)
 800b084:	f853 2b04 	ldr.w	r2, [r3], #4
 800b088:	9105      	str	r1, [sp, #20]
 800b08a:	6800      	ldr	r0, [r0, #0]
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	a902      	add	r1, sp, #8
 800b090:	f000 fa9a 	bl	800b5c8 <_svfiprintf_r>
 800b094:	9b02      	ldr	r3, [sp, #8]
 800b096:	2200      	movs	r2, #0
 800b098:	701a      	strb	r2, [r3, #0]
 800b09a:	b01c      	add	sp, #112	; 0x70
 800b09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a0:	b003      	add	sp, #12
 800b0a2:	4770      	bx	lr
 800b0a4:	2000020c 	.word	0x2000020c
 800b0a8:	ffff0208 	.word	0xffff0208

0800b0ac <__sread>:
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b4:	f000 fe76 	bl	800bda4 <_read_r>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	bfab      	itete	ge
 800b0bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0be:	89a3      	ldrhlt	r3, [r4, #12]
 800b0c0:	181b      	addge	r3, r3, r0
 800b0c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0c6:	bfac      	ite	ge
 800b0c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0ca:	81a3      	strhlt	r3, [r4, #12]
 800b0cc:	bd10      	pop	{r4, pc}

0800b0ce <__swrite>:
 800b0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d2:	461f      	mov	r7, r3
 800b0d4:	898b      	ldrh	r3, [r1, #12]
 800b0d6:	05db      	lsls	r3, r3, #23
 800b0d8:	4605      	mov	r5, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	4616      	mov	r6, r2
 800b0de:	d505      	bpl.n	800b0ec <__swrite+0x1e>
 800b0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f000 f9a4 	bl	800b434 <_lseek_r>
 800b0ec:	89a3      	ldrh	r3, [r4, #12]
 800b0ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0f6:	81a3      	strh	r3, [r4, #12]
 800b0f8:	4632      	mov	r2, r6
 800b0fa:	463b      	mov	r3, r7
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b102:	f000 b8b3 	b.w	800b26c <_write_r>

0800b106 <__sseek>:
 800b106:	b510      	push	{r4, lr}
 800b108:	460c      	mov	r4, r1
 800b10a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b10e:	f000 f991 	bl	800b434 <_lseek_r>
 800b112:	1c43      	adds	r3, r0, #1
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	bf15      	itete	ne
 800b118:	6560      	strne	r0, [r4, #84]	; 0x54
 800b11a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b11e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b122:	81a3      	strheq	r3, [r4, #12]
 800b124:	bf18      	it	ne
 800b126:	81a3      	strhne	r3, [r4, #12]
 800b128:	bd10      	pop	{r4, pc}

0800b12a <__sclose>:
 800b12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12e:	f000 b8af 	b.w	800b290 <_close_r>

0800b132 <strcat>:
 800b132:	b510      	push	{r4, lr}
 800b134:	4602      	mov	r2, r0
 800b136:	7814      	ldrb	r4, [r2, #0]
 800b138:	4613      	mov	r3, r2
 800b13a:	3201      	adds	r2, #1
 800b13c:	2c00      	cmp	r4, #0
 800b13e:	d1fa      	bne.n	800b136 <strcat+0x4>
 800b140:	3b01      	subs	r3, #1
 800b142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b14a:	2a00      	cmp	r2, #0
 800b14c:	d1f9      	bne.n	800b142 <strcat+0x10>
 800b14e:	bd10      	pop	{r4, pc}

0800b150 <_strtol_l.isra.0>:
 800b150:	2b01      	cmp	r3, #1
 800b152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b156:	d001      	beq.n	800b15c <_strtol_l.isra.0+0xc>
 800b158:	2b24      	cmp	r3, #36	; 0x24
 800b15a:	d906      	bls.n	800b16a <_strtol_l.isra.0+0x1a>
 800b15c:	f7ff fd52 	bl	800ac04 <__errno>
 800b160:	2316      	movs	r3, #22
 800b162:	6003      	str	r3, [r0, #0]
 800b164:	2000      	movs	r0, #0
 800b166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16a:	4f3a      	ldr	r7, [pc, #232]	; (800b254 <_strtol_l.isra.0+0x104>)
 800b16c:	468e      	mov	lr, r1
 800b16e:	4676      	mov	r6, lr
 800b170:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b174:	5de5      	ldrb	r5, [r4, r7]
 800b176:	f015 0508 	ands.w	r5, r5, #8
 800b17a:	d1f8      	bne.n	800b16e <_strtol_l.isra.0+0x1e>
 800b17c:	2c2d      	cmp	r4, #45	; 0x2d
 800b17e:	d134      	bne.n	800b1ea <_strtol_l.isra.0+0x9a>
 800b180:	f89e 4000 	ldrb.w	r4, [lr]
 800b184:	f04f 0801 	mov.w	r8, #1
 800b188:	f106 0e02 	add.w	lr, r6, #2
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d05c      	beq.n	800b24a <_strtol_l.isra.0+0xfa>
 800b190:	2b10      	cmp	r3, #16
 800b192:	d10c      	bne.n	800b1ae <_strtol_l.isra.0+0x5e>
 800b194:	2c30      	cmp	r4, #48	; 0x30
 800b196:	d10a      	bne.n	800b1ae <_strtol_l.isra.0+0x5e>
 800b198:	f89e 4000 	ldrb.w	r4, [lr]
 800b19c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b1a0:	2c58      	cmp	r4, #88	; 0x58
 800b1a2:	d14d      	bne.n	800b240 <_strtol_l.isra.0+0xf0>
 800b1a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b1a8:	2310      	movs	r3, #16
 800b1aa:	f10e 0e02 	add.w	lr, lr, #2
 800b1ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b1b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b1b6:	2600      	movs	r6, #0
 800b1b8:	fbbc f9f3 	udiv	r9, ip, r3
 800b1bc:	4635      	mov	r5, r6
 800b1be:	fb03 ca19 	mls	sl, r3, r9, ip
 800b1c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b1c6:	2f09      	cmp	r7, #9
 800b1c8:	d818      	bhi.n	800b1fc <_strtol_l.isra.0+0xac>
 800b1ca:	463c      	mov	r4, r7
 800b1cc:	42a3      	cmp	r3, r4
 800b1ce:	dd24      	ble.n	800b21a <_strtol_l.isra.0+0xca>
 800b1d0:	2e00      	cmp	r6, #0
 800b1d2:	db1f      	blt.n	800b214 <_strtol_l.isra.0+0xc4>
 800b1d4:	45a9      	cmp	r9, r5
 800b1d6:	d31d      	bcc.n	800b214 <_strtol_l.isra.0+0xc4>
 800b1d8:	d101      	bne.n	800b1de <_strtol_l.isra.0+0x8e>
 800b1da:	45a2      	cmp	sl, r4
 800b1dc:	db1a      	blt.n	800b214 <_strtol_l.isra.0+0xc4>
 800b1de:	fb05 4503 	mla	r5, r5, r3, r4
 800b1e2:	2601      	movs	r6, #1
 800b1e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b1e8:	e7eb      	b.n	800b1c2 <_strtol_l.isra.0+0x72>
 800b1ea:	2c2b      	cmp	r4, #43	; 0x2b
 800b1ec:	bf08      	it	eq
 800b1ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b1f2:	46a8      	mov	r8, r5
 800b1f4:	bf08      	it	eq
 800b1f6:	f106 0e02 	addeq.w	lr, r6, #2
 800b1fa:	e7c7      	b.n	800b18c <_strtol_l.isra.0+0x3c>
 800b1fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b200:	2f19      	cmp	r7, #25
 800b202:	d801      	bhi.n	800b208 <_strtol_l.isra.0+0xb8>
 800b204:	3c37      	subs	r4, #55	; 0x37
 800b206:	e7e1      	b.n	800b1cc <_strtol_l.isra.0+0x7c>
 800b208:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b20c:	2f19      	cmp	r7, #25
 800b20e:	d804      	bhi.n	800b21a <_strtol_l.isra.0+0xca>
 800b210:	3c57      	subs	r4, #87	; 0x57
 800b212:	e7db      	b.n	800b1cc <_strtol_l.isra.0+0x7c>
 800b214:	f04f 36ff 	mov.w	r6, #4294967295
 800b218:	e7e4      	b.n	800b1e4 <_strtol_l.isra.0+0x94>
 800b21a:	2e00      	cmp	r6, #0
 800b21c:	da05      	bge.n	800b22a <_strtol_l.isra.0+0xda>
 800b21e:	2322      	movs	r3, #34	; 0x22
 800b220:	6003      	str	r3, [r0, #0]
 800b222:	4665      	mov	r5, ip
 800b224:	b942      	cbnz	r2, 800b238 <_strtol_l.isra.0+0xe8>
 800b226:	4628      	mov	r0, r5
 800b228:	e79d      	b.n	800b166 <_strtol_l.isra.0+0x16>
 800b22a:	f1b8 0f00 	cmp.w	r8, #0
 800b22e:	d000      	beq.n	800b232 <_strtol_l.isra.0+0xe2>
 800b230:	426d      	negs	r5, r5
 800b232:	2a00      	cmp	r2, #0
 800b234:	d0f7      	beq.n	800b226 <_strtol_l.isra.0+0xd6>
 800b236:	b10e      	cbz	r6, 800b23c <_strtol_l.isra.0+0xec>
 800b238:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b23c:	6011      	str	r1, [r2, #0]
 800b23e:	e7f2      	b.n	800b226 <_strtol_l.isra.0+0xd6>
 800b240:	2430      	movs	r4, #48	; 0x30
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1b3      	bne.n	800b1ae <_strtol_l.isra.0+0x5e>
 800b246:	2308      	movs	r3, #8
 800b248:	e7b1      	b.n	800b1ae <_strtol_l.isra.0+0x5e>
 800b24a:	2c30      	cmp	r4, #48	; 0x30
 800b24c:	d0a4      	beq.n	800b198 <_strtol_l.isra.0+0x48>
 800b24e:	230a      	movs	r3, #10
 800b250:	e7ad      	b.n	800b1ae <_strtol_l.isra.0+0x5e>
 800b252:	bf00      	nop
 800b254:	0800c3a1 	.word	0x0800c3a1

0800b258 <strtol>:
 800b258:	4613      	mov	r3, r2
 800b25a:	460a      	mov	r2, r1
 800b25c:	4601      	mov	r1, r0
 800b25e:	4802      	ldr	r0, [pc, #8]	; (800b268 <strtol+0x10>)
 800b260:	6800      	ldr	r0, [r0, #0]
 800b262:	f7ff bf75 	b.w	800b150 <_strtol_l.isra.0>
 800b266:	bf00      	nop
 800b268:	2000020c 	.word	0x2000020c

0800b26c <_write_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4d07      	ldr	r5, [pc, #28]	; (800b28c <_write_r+0x20>)
 800b270:	4604      	mov	r4, r0
 800b272:	4608      	mov	r0, r1
 800b274:	4611      	mov	r1, r2
 800b276:	2200      	movs	r2, #0
 800b278:	602a      	str	r2, [r5, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	f7f5 f97c 	bl	8000578 <_write>
 800b280:	1c43      	adds	r3, r0, #1
 800b282:	d102      	bne.n	800b28a <_write_r+0x1e>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	b103      	cbz	r3, 800b28a <_write_r+0x1e>
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
 800b28c:	20006850 	.word	0x20006850

0800b290 <_close_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4d06      	ldr	r5, [pc, #24]	; (800b2ac <_close_r+0x1c>)
 800b294:	2300      	movs	r3, #0
 800b296:	4604      	mov	r4, r0
 800b298:	4608      	mov	r0, r1
 800b29a:	602b      	str	r3, [r5, #0]
 800b29c:	f7f5 fea3 	bl	8000fe6 <_close>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d102      	bne.n	800b2aa <_close_r+0x1a>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	b103      	cbz	r3, 800b2aa <_close_r+0x1a>
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	20006850 	.word	0x20006850

0800b2b0 <__sflush_r>:
 800b2b0:	898a      	ldrh	r2, [r1, #12]
 800b2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	0710      	lsls	r0, r2, #28
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	d458      	bmi.n	800b370 <__sflush_r+0xc0>
 800b2be:	684b      	ldr	r3, [r1, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dc05      	bgt.n	800b2d0 <__sflush_r+0x20>
 800b2c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	dc02      	bgt.n	800b2d0 <__sflush_r+0x20>
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2d2:	2e00      	cmp	r6, #0
 800b2d4:	d0f9      	beq.n	800b2ca <__sflush_r+0x1a>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2dc:	682f      	ldr	r7, [r5, #0]
 800b2de:	602b      	str	r3, [r5, #0]
 800b2e0:	d032      	beq.n	800b348 <__sflush_r+0x98>
 800b2e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	075a      	lsls	r2, r3, #29
 800b2e8:	d505      	bpl.n	800b2f6 <__sflush_r+0x46>
 800b2ea:	6863      	ldr	r3, [r4, #4]
 800b2ec:	1ac0      	subs	r0, r0, r3
 800b2ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2f0:	b10b      	cbz	r3, 800b2f6 <__sflush_r+0x46>
 800b2f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2f4:	1ac0      	subs	r0, r0, r3
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2fc:	6a21      	ldr	r1, [r4, #32]
 800b2fe:	4628      	mov	r0, r5
 800b300:	47b0      	blx	r6
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	89a3      	ldrh	r3, [r4, #12]
 800b306:	d106      	bne.n	800b316 <__sflush_r+0x66>
 800b308:	6829      	ldr	r1, [r5, #0]
 800b30a:	291d      	cmp	r1, #29
 800b30c:	d82c      	bhi.n	800b368 <__sflush_r+0xb8>
 800b30e:	4a2a      	ldr	r2, [pc, #168]	; (800b3b8 <__sflush_r+0x108>)
 800b310:	40ca      	lsrs	r2, r1
 800b312:	07d6      	lsls	r6, r2, #31
 800b314:	d528      	bpl.n	800b368 <__sflush_r+0xb8>
 800b316:	2200      	movs	r2, #0
 800b318:	6062      	str	r2, [r4, #4]
 800b31a:	04d9      	lsls	r1, r3, #19
 800b31c:	6922      	ldr	r2, [r4, #16]
 800b31e:	6022      	str	r2, [r4, #0]
 800b320:	d504      	bpl.n	800b32c <__sflush_r+0x7c>
 800b322:	1c42      	adds	r2, r0, #1
 800b324:	d101      	bne.n	800b32a <__sflush_r+0x7a>
 800b326:	682b      	ldr	r3, [r5, #0]
 800b328:	b903      	cbnz	r3, 800b32c <__sflush_r+0x7c>
 800b32a:	6560      	str	r0, [r4, #84]	; 0x54
 800b32c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b32e:	602f      	str	r7, [r5, #0]
 800b330:	2900      	cmp	r1, #0
 800b332:	d0ca      	beq.n	800b2ca <__sflush_r+0x1a>
 800b334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b338:	4299      	cmp	r1, r3
 800b33a:	d002      	beq.n	800b342 <__sflush_r+0x92>
 800b33c:	4628      	mov	r0, r5
 800b33e:	f000 f897 	bl	800b470 <_free_r>
 800b342:	2000      	movs	r0, #0
 800b344:	6360      	str	r0, [r4, #52]	; 0x34
 800b346:	e7c1      	b.n	800b2cc <__sflush_r+0x1c>
 800b348:	6a21      	ldr	r1, [r4, #32]
 800b34a:	2301      	movs	r3, #1
 800b34c:	4628      	mov	r0, r5
 800b34e:	47b0      	blx	r6
 800b350:	1c41      	adds	r1, r0, #1
 800b352:	d1c7      	bne.n	800b2e4 <__sflush_r+0x34>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0c4      	beq.n	800b2e4 <__sflush_r+0x34>
 800b35a:	2b1d      	cmp	r3, #29
 800b35c:	d001      	beq.n	800b362 <__sflush_r+0xb2>
 800b35e:	2b16      	cmp	r3, #22
 800b360:	d101      	bne.n	800b366 <__sflush_r+0xb6>
 800b362:	602f      	str	r7, [r5, #0]
 800b364:	e7b1      	b.n	800b2ca <__sflush_r+0x1a>
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b36c:	81a3      	strh	r3, [r4, #12]
 800b36e:	e7ad      	b.n	800b2cc <__sflush_r+0x1c>
 800b370:	690f      	ldr	r7, [r1, #16]
 800b372:	2f00      	cmp	r7, #0
 800b374:	d0a9      	beq.n	800b2ca <__sflush_r+0x1a>
 800b376:	0793      	lsls	r3, r2, #30
 800b378:	680e      	ldr	r6, [r1, #0]
 800b37a:	bf08      	it	eq
 800b37c:	694b      	ldreq	r3, [r1, #20]
 800b37e:	600f      	str	r7, [r1, #0]
 800b380:	bf18      	it	ne
 800b382:	2300      	movne	r3, #0
 800b384:	eba6 0807 	sub.w	r8, r6, r7
 800b388:	608b      	str	r3, [r1, #8]
 800b38a:	f1b8 0f00 	cmp.w	r8, #0
 800b38e:	dd9c      	ble.n	800b2ca <__sflush_r+0x1a>
 800b390:	6a21      	ldr	r1, [r4, #32]
 800b392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b394:	4643      	mov	r3, r8
 800b396:	463a      	mov	r2, r7
 800b398:	4628      	mov	r0, r5
 800b39a:	47b0      	blx	r6
 800b39c:	2800      	cmp	r0, #0
 800b39e:	dc06      	bgt.n	800b3ae <__sflush_r+0xfe>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ac:	e78e      	b.n	800b2cc <__sflush_r+0x1c>
 800b3ae:	4407      	add	r7, r0
 800b3b0:	eba8 0800 	sub.w	r8, r8, r0
 800b3b4:	e7e9      	b.n	800b38a <__sflush_r+0xda>
 800b3b6:	bf00      	nop
 800b3b8:	20400001 	.word	0x20400001

0800b3bc <_fflush_r>:
 800b3bc:	b538      	push	{r3, r4, r5, lr}
 800b3be:	690b      	ldr	r3, [r1, #16]
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	b913      	cbnz	r3, 800b3cc <_fflush_r+0x10>
 800b3c6:	2500      	movs	r5, #0
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	b118      	cbz	r0, 800b3d6 <_fflush_r+0x1a>
 800b3ce:	6983      	ldr	r3, [r0, #24]
 800b3d0:	b90b      	cbnz	r3, 800b3d6 <_fflush_r+0x1a>
 800b3d2:	f7ff fc75 	bl	800acc0 <__sinit>
 800b3d6:	4b14      	ldr	r3, [pc, #80]	; (800b428 <_fflush_r+0x6c>)
 800b3d8:	429c      	cmp	r4, r3
 800b3da:	d11b      	bne.n	800b414 <_fflush_r+0x58>
 800b3dc:	686c      	ldr	r4, [r5, #4]
 800b3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d0ef      	beq.n	800b3c6 <_fflush_r+0xa>
 800b3e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3e8:	07d0      	lsls	r0, r2, #31
 800b3ea:	d404      	bmi.n	800b3f6 <_fflush_r+0x3a>
 800b3ec:	0599      	lsls	r1, r3, #22
 800b3ee:	d402      	bmi.n	800b3f6 <_fflush_r+0x3a>
 800b3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3f2:	f7ff fd28 	bl	800ae46 <__retarget_lock_acquire_recursive>
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	4621      	mov	r1, r4
 800b3fa:	f7ff ff59 	bl	800b2b0 <__sflush_r>
 800b3fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b400:	07da      	lsls	r2, r3, #31
 800b402:	4605      	mov	r5, r0
 800b404:	d4e0      	bmi.n	800b3c8 <_fflush_r+0xc>
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	059b      	lsls	r3, r3, #22
 800b40a:	d4dd      	bmi.n	800b3c8 <_fflush_r+0xc>
 800b40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b40e:	f7ff fd1b 	bl	800ae48 <__retarget_lock_release_recursive>
 800b412:	e7d9      	b.n	800b3c8 <_fflush_r+0xc>
 800b414:	4b05      	ldr	r3, [pc, #20]	; (800b42c <_fflush_r+0x70>)
 800b416:	429c      	cmp	r4, r3
 800b418:	d101      	bne.n	800b41e <_fflush_r+0x62>
 800b41a:	68ac      	ldr	r4, [r5, #8]
 800b41c:	e7df      	b.n	800b3de <_fflush_r+0x22>
 800b41e:	4b04      	ldr	r3, [pc, #16]	; (800b430 <_fflush_r+0x74>)
 800b420:	429c      	cmp	r4, r3
 800b422:	bf08      	it	eq
 800b424:	68ec      	ldreq	r4, [r5, #12]
 800b426:	e7da      	b.n	800b3de <_fflush_r+0x22>
 800b428:	0800c35c 	.word	0x0800c35c
 800b42c:	0800c37c 	.word	0x0800c37c
 800b430:	0800c33c 	.word	0x0800c33c

0800b434 <_lseek_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d07      	ldr	r5, [pc, #28]	; (800b454 <_lseek_r+0x20>)
 800b438:	4604      	mov	r4, r0
 800b43a:	4608      	mov	r0, r1
 800b43c:	4611      	mov	r1, r2
 800b43e:	2200      	movs	r2, #0
 800b440:	602a      	str	r2, [r5, #0]
 800b442:	461a      	mov	r2, r3
 800b444:	f7f5 fdf6 	bl	8001034 <_lseek>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_lseek_r+0x1e>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_lseek_r+0x1e>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	20006850 	.word	0x20006850

0800b458 <__malloc_lock>:
 800b458:	4801      	ldr	r0, [pc, #4]	; (800b460 <__malloc_lock+0x8>)
 800b45a:	f7ff bcf4 	b.w	800ae46 <__retarget_lock_acquire_recursive>
 800b45e:	bf00      	nop
 800b460:	20006848 	.word	0x20006848

0800b464 <__malloc_unlock>:
 800b464:	4801      	ldr	r0, [pc, #4]	; (800b46c <__malloc_unlock+0x8>)
 800b466:	f7ff bcef 	b.w	800ae48 <__retarget_lock_release_recursive>
 800b46a:	bf00      	nop
 800b46c:	20006848 	.word	0x20006848

0800b470 <_free_r>:
 800b470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b472:	2900      	cmp	r1, #0
 800b474:	d048      	beq.n	800b508 <_free_r+0x98>
 800b476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b47a:	9001      	str	r0, [sp, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f1a1 0404 	sub.w	r4, r1, #4
 800b482:	bfb8      	it	lt
 800b484:	18e4      	addlt	r4, r4, r3
 800b486:	f7ff ffe7 	bl	800b458 <__malloc_lock>
 800b48a:	4a20      	ldr	r2, [pc, #128]	; (800b50c <_free_r+0x9c>)
 800b48c:	9801      	ldr	r0, [sp, #4]
 800b48e:	6813      	ldr	r3, [r2, #0]
 800b490:	4615      	mov	r5, r2
 800b492:	b933      	cbnz	r3, 800b4a2 <_free_r+0x32>
 800b494:	6063      	str	r3, [r4, #4]
 800b496:	6014      	str	r4, [r2, #0]
 800b498:	b003      	add	sp, #12
 800b49a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b49e:	f7ff bfe1 	b.w	800b464 <__malloc_unlock>
 800b4a2:	42a3      	cmp	r3, r4
 800b4a4:	d90b      	bls.n	800b4be <_free_r+0x4e>
 800b4a6:	6821      	ldr	r1, [r4, #0]
 800b4a8:	1862      	adds	r2, r4, r1
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	bf04      	itt	eq
 800b4ae:	681a      	ldreq	r2, [r3, #0]
 800b4b0:	685b      	ldreq	r3, [r3, #4]
 800b4b2:	6063      	str	r3, [r4, #4]
 800b4b4:	bf04      	itt	eq
 800b4b6:	1852      	addeq	r2, r2, r1
 800b4b8:	6022      	streq	r2, [r4, #0]
 800b4ba:	602c      	str	r4, [r5, #0]
 800b4bc:	e7ec      	b.n	800b498 <_free_r+0x28>
 800b4be:	461a      	mov	r2, r3
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	b10b      	cbz	r3, 800b4c8 <_free_r+0x58>
 800b4c4:	42a3      	cmp	r3, r4
 800b4c6:	d9fa      	bls.n	800b4be <_free_r+0x4e>
 800b4c8:	6811      	ldr	r1, [r2, #0]
 800b4ca:	1855      	adds	r5, r2, r1
 800b4cc:	42a5      	cmp	r5, r4
 800b4ce:	d10b      	bne.n	800b4e8 <_free_r+0x78>
 800b4d0:	6824      	ldr	r4, [r4, #0]
 800b4d2:	4421      	add	r1, r4
 800b4d4:	1854      	adds	r4, r2, r1
 800b4d6:	42a3      	cmp	r3, r4
 800b4d8:	6011      	str	r1, [r2, #0]
 800b4da:	d1dd      	bne.n	800b498 <_free_r+0x28>
 800b4dc:	681c      	ldr	r4, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	6053      	str	r3, [r2, #4]
 800b4e2:	4421      	add	r1, r4
 800b4e4:	6011      	str	r1, [r2, #0]
 800b4e6:	e7d7      	b.n	800b498 <_free_r+0x28>
 800b4e8:	d902      	bls.n	800b4f0 <_free_r+0x80>
 800b4ea:	230c      	movs	r3, #12
 800b4ec:	6003      	str	r3, [r0, #0]
 800b4ee:	e7d3      	b.n	800b498 <_free_r+0x28>
 800b4f0:	6825      	ldr	r5, [r4, #0]
 800b4f2:	1961      	adds	r1, r4, r5
 800b4f4:	428b      	cmp	r3, r1
 800b4f6:	bf04      	itt	eq
 800b4f8:	6819      	ldreq	r1, [r3, #0]
 800b4fa:	685b      	ldreq	r3, [r3, #4]
 800b4fc:	6063      	str	r3, [r4, #4]
 800b4fe:	bf04      	itt	eq
 800b500:	1949      	addeq	r1, r1, r5
 800b502:	6021      	streq	r1, [r4, #0]
 800b504:	6054      	str	r4, [r2, #4]
 800b506:	e7c7      	b.n	800b498 <_free_r+0x28>
 800b508:	b003      	add	sp, #12
 800b50a:	bd30      	pop	{r4, r5, pc}
 800b50c:	20004e8c 	.word	0x20004e8c

0800b510 <__ssputs_r>:
 800b510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b514:	688e      	ldr	r6, [r1, #8]
 800b516:	429e      	cmp	r6, r3
 800b518:	4682      	mov	sl, r0
 800b51a:	460c      	mov	r4, r1
 800b51c:	4690      	mov	r8, r2
 800b51e:	461f      	mov	r7, r3
 800b520:	d838      	bhi.n	800b594 <__ssputs_r+0x84>
 800b522:	898a      	ldrh	r2, [r1, #12]
 800b524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b528:	d032      	beq.n	800b590 <__ssputs_r+0x80>
 800b52a:	6825      	ldr	r5, [r4, #0]
 800b52c:	6909      	ldr	r1, [r1, #16]
 800b52e:	eba5 0901 	sub.w	r9, r5, r1
 800b532:	6965      	ldr	r5, [r4, #20]
 800b534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b53c:	3301      	adds	r3, #1
 800b53e:	444b      	add	r3, r9
 800b540:	106d      	asrs	r5, r5, #1
 800b542:	429d      	cmp	r5, r3
 800b544:	bf38      	it	cc
 800b546:	461d      	movcc	r5, r3
 800b548:	0553      	lsls	r3, r2, #21
 800b54a:	d531      	bpl.n	800b5b0 <__ssputs_r+0xa0>
 800b54c:	4629      	mov	r1, r5
 800b54e:	f7ff fca1 	bl	800ae94 <_malloc_r>
 800b552:	4606      	mov	r6, r0
 800b554:	b950      	cbnz	r0, 800b56c <__ssputs_r+0x5c>
 800b556:	230c      	movs	r3, #12
 800b558:	f8ca 3000 	str.w	r3, [sl]
 800b55c:	89a3      	ldrh	r3, [r4, #12]
 800b55e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	f04f 30ff 	mov.w	r0, #4294967295
 800b568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56c:	6921      	ldr	r1, [r4, #16]
 800b56e:	464a      	mov	r2, r9
 800b570:	f7ff fc79 	bl	800ae66 <memcpy>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	6126      	str	r6, [r4, #16]
 800b582:	6165      	str	r5, [r4, #20]
 800b584:	444e      	add	r6, r9
 800b586:	eba5 0509 	sub.w	r5, r5, r9
 800b58a:	6026      	str	r6, [r4, #0]
 800b58c:	60a5      	str	r5, [r4, #8]
 800b58e:	463e      	mov	r6, r7
 800b590:	42be      	cmp	r6, r7
 800b592:	d900      	bls.n	800b596 <__ssputs_r+0x86>
 800b594:	463e      	mov	r6, r7
 800b596:	4632      	mov	r2, r6
 800b598:	6820      	ldr	r0, [r4, #0]
 800b59a:	4641      	mov	r1, r8
 800b59c:	f000 fd38 	bl	800c010 <memmove>
 800b5a0:	68a3      	ldr	r3, [r4, #8]
 800b5a2:	6822      	ldr	r2, [r4, #0]
 800b5a4:	1b9b      	subs	r3, r3, r6
 800b5a6:	4432      	add	r2, r6
 800b5a8:	60a3      	str	r3, [r4, #8]
 800b5aa:	6022      	str	r2, [r4, #0]
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	e7db      	b.n	800b568 <__ssputs_r+0x58>
 800b5b0:	462a      	mov	r2, r5
 800b5b2:	f000 fd47 	bl	800c044 <_realloc_r>
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d1e1      	bne.n	800b580 <__ssputs_r+0x70>
 800b5bc:	6921      	ldr	r1, [r4, #16]
 800b5be:	4650      	mov	r0, sl
 800b5c0:	f7ff ff56 	bl	800b470 <_free_r>
 800b5c4:	e7c7      	b.n	800b556 <__ssputs_r+0x46>
	...

0800b5c8 <_svfiprintf_r>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	4698      	mov	r8, r3
 800b5ce:	898b      	ldrh	r3, [r1, #12]
 800b5d0:	061b      	lsls	r3, r3, #24
 800b5d2:	b09d      	sub	sp, #116	; 0x74
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	4614      	mov	r4, r2
 800b5da:	d50e      	bpl.n	800b5fa <_svfiprintf_r+0x32>
 800b5dc:	690b      	ldr	r3, [r1, #16]
 800b5de:	b963      	cbnz	r3, 800b5fa <_svfiprintf_r+0x32>
 800b5e0:	2140      	movs	r1, #64	; 0x40
 800b5e2:	f7ff fc57 	bl	800ae94 <_malloc_r>
 800b5e6:	6028      	str	r0, [r5, #0]
 800b5e8:	6128      	str	r0, [r5, #16]
 800b5ea:	b920      	cbnz	r0, 800b5f6 <_svfiprintf_r+0x2e>
 800b5ec:	230c      	movs	r3, #12
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f4:	e0d1      	b.n	800b79a <_svfiprintf_r+0x1d2>
 800b5f6:	2340      	movs	r3, #64	; 0x40
 800b5f8:	616b      	str	r3, [r5, #20]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fe:	2320      	movs	r3, #32
 800b600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b604:	f8cd 800c 	str.w	r8, [sp, #12]
 800b608:	2330      	movs	r3, #48	; 0x30
 800b60a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b7b4 <_svfiprintf_r+0x1ec>
 800b60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b612:	f04f 0901 	mov.w	r9, #1
 800b616:	4623      	mov	r3, r4
 800b618:	469a      	mov	sl, r3
 800b61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b61e:	b10a      	cbz	r2, 800b624 <_svfiprintf_r+0x5c>
 800b620:	2a25      	cmp	r2, #37	; 0x25
 800b622:	d1f9      	bne.n	800b618 <_svfiprintf_r+0x50>
 800b624:	ebba 0b04 	subs.w	fp, sl, r4
 800b628:	d00b      	beq.n	800b642 <_svfiprintf_r+0x7a>
 800b62a:	465b      	mov	r3, fp
 800b62c:	4622      	mov	r2, r4
 800b62e:	4629      	mov	r1, r5
 800b630:	4638      	mov	r0, r7
 800b632:	f7ff ff6d 	bl	800b510 <__ssputs_r>
 800b636:	3001      	adds	r0, #1
 800b638:	f000 80aa 	beq.w	800b790 <_svfiprintf_r+0x1c8>
 800b63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b63e:	445a      	add	r2, fp
 800b640:	9209      	str	r2, [sp, #36]	; 0x24
 800b642:	f89a 3000 	ldrb.w	r3, [sl]
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 80a2 	beq.w	800b790 <_svfiprintf_r+0x1c8>
 800b64c:	2300      	movs	r3, #0
 800b64e:	f04f 32ff 	mov.w	r2, #4294967295
 800b652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b656:	f10a 0a01 	add.w	sl, sl, #1
 800b65a:	9304      	str	r3, [sp, #16]
 800b65c:	9307      	str	r3, [sp, #28]
 800b65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b662:	931a      	str	r3, [sp, #104]	; 0x68
 800b664:	4654      	mov	r4, sl
 800b666:	2205      	movs	r2, #5
 800b668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b66c:	4851      	ldr	r0, [pc, #324]	; (800b7b4 <_svfiprintf_r+0x1ec>)
 800b66e:	f7f4 fdaf 	bl	80001d0 <memchr>
 800b672:	9a04      	ldr	r2, [sp, #16]
 800b674:	b9d8      	cbnz	r0, 800b6ae <_svfiprintf_r+0xe6>
 800b676:	06d0      	lsls	r0, r2, #27
 800b678:	bf44      	itt	mi
 800b67a:	2320      	movmi	r3, #32
 800b67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b680:	0711      	lsls	r1, r2, #28
 800b682:	bf44      	itt	mi
 800b684:	232b      	movmi	r3, #43	; 0x2b
 800b686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b68a:	f89a 3000 	ldrb.w	r3, [sl]
 800b68e:	2b2a      	cmp	r3, #42	; 0x2a
 800b690:	d015      	beq.n	800b6be <_svfiprintf_r+0xf6>
 800b692:	9a07      	ldr	r2, [sp, #28]
 800b694:	4654      	mov	r4, sl
 800b696:	2000      	movs	r0, #0
 800b698:	f04f 0c0a 	mov.w	ip, #10
 800b69c:	4621      	mov	r1, r4
 800b69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6a2:	3b30      	subs	r3, #48	; 0x30
 800b6a4:	2b09      	cmp	r3, #9
 800b6a6:	d94e      	bls.n	800b746 <_svfiprintf_r+0x17e>
 800b6a8:	b1b0      	cbz	r0, 800b6d8 <_svfiprintf_r+0x110>
 800b6aa:	9207      	str	r2, [sp, #28]
 800b6ac:	e014      	b.n	800b6d8 <_svfiprintf_r+0x110>
 800b6ae:	eba0 0308 	sub.w	r3, r0, r8
 800b6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	9304      	str	r3, [sp, #16]
 800b6ba:	46a2      	mov	sl, r4
 800b6bc:	e7d2      	b.n	800b664 <_svfiprintf_r+0x9c>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	1d19      	adds	r1, r3, #4
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	9103      	str	r1, [sp, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bfbb      	ittet	lt
 800b6ca:	425b      	neglt	r3, r3
 800b6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b6d0:	9307      	strge	r3, [sp, #28]
 800b6d2:	9307      	strlt	r3, [sp, #28]
 800b6d4:	bfb8      	it	lt
 800b6d6:	9204      	strlt	r2, [sp, #16]
 800b6d8:	7823      	ldrb	r3, [r4, #0]
 800b6da:	2b2e      	cmp	r3, #46	; 0x2e
 800b6dc:	d10c      	bne.n	800b6f8 <_svfiprintf_r+0x130>
 800b6de:	7863      	ldrb	r3, [r4, #1]
 800b6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e2:	d135      	bne.n	800b750 <_svfiprintf_r+0x188>
 800b6e4:	9b03      	ldr	r3, [sp, #12]
 800b6e6:	1d1a      	adds	r2, r3, #4
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	9203      	str	r2, [sp, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	bfb8      	it	lt
 800b6f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6f4:	3402      	adds	r4, #2
 800b6f6:	9305      	str	r3, [sp, #20]
 800b6f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b7c4 <_svfiprintf_r+0x1fc>
 800b6fc:	7821      	ldrb	r1, [r4, #0]
 800b6fe:	2203      	movs	r2, #3
 800b700:	4650      	mov	r0, sl
 800b702:	f7f4 fd65 	bl	80001d0 <memchr>
 800b706:	b140      	cbz	r0, 800b71a <_svfiprintf_r+0x152>
 800b708:	2340      	movs	r3, #64	; 0x40
 800b70a:	eba0 000a 	sub.w	r0, r0, sl
 800b70e:	fa03 f000 	lsl.w	r0, r3, r0
 800b712:	9b04      	ldr	r3, [sp, #16]
 800b714:	4303      	orrs	r3, r0
 800b716:	3401      	adds	r4, #1
 800b718:	9304      	str	r3, [sp, #16]
 800b71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b71e:	4826      	ldr	r0, [pc, #152]	; (800b7b8 <_svfiprintf_r+0x1f0>)
 800b720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b724:	2206      	movs	r2, #6
 800b726:	f7f4 fd53 	bl	80001d0 <memchr>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d038      	beq.n	800b7a0 <_svfiprintf_r+0x1d8>
 800b72e:	4b23      	ldr	r3, [pc, #140]	; (800b7bc <_svfiprintf_r+0x1f4>)
 800b730:	bb1b      	cbnz	r3, 800b77a <_svfiprintf_r+0x1b2>
 800b732:	9b03      	ldr	r3, [sp, #12]
 800b734:	3307      	adds	r3, #7
 800b736:	f023 0307 	bic.w	r3, r3, #7
 800b73a:	3308      	adds	r3, #8
 800b73c:	9303      	str	r3, [sp, #12]
 800b73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b740:	4433      	add	r3, r6
 800b742:	9309      	str	r3, [sp, #36]	; 0x24
 800b744:	e767      	b.n	800b616 <_svfiprintf_r+0x4e>
 800b746:	fb0c 3202 	mla	r2, ip, r2, r3
 800b74a:	460c      	mov	r4, r1
 800b74c:	2001      	movs	r0, #1
 800b74e:	e7a5      	b.n	800b69c <_svfiprintf_r+0xd4>
 800b750:	2300      	movs	r3, #0
 800b752:	3401      	adds	r4, #1
 800b754:	9305      	str	r3, [sp, #20]
 800b756:	4619      	mov	r1, r3
 800b758:	f04f 0c0a 	mov.w	ip, #10
 800b75c:	4620      	mov	r0, r4
 800b75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b762:	3a30      	subs	r2, #48	; 0x30
 800b764:	2a09      	cmp	r2, #9
 800b766:	d903      	bls.n	800b770 <_svfiprintf_r+0x1a8>
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d0c5      	beq.n	800b6f8 <_svfiprintf_r+0x130>
 800b76c:	9105      	str	r1, [sp, #20]
 800b76e:	e7c3      	b.n	800b6f8 <_svfiprintf_r+0x130>
 800b770:	fb0c 2101 	mla	r1, ip, r1, r2
 800b774:	4604      	mov	r4, r0
 800b776:	2301      	movs	r3, #1
 800b778:	e7f0      	b.n	800b75c <_svfiprintf_r+0x194>
 800b77a:	ab03      	add	r3, sp, #12
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	462a      	mov	r2, r5
 800b780:	4b0f      	ldr	r3, [pc, #60]	; (800b7c0 <_svfiprintf_r+0x1f8>)
 800b782:	a904      	add	r1, sp, #16
 800b784:	4638      	mov	r0, r7
 800b786:	f3af 8000 	nop.w
 800b78a:	1c42      	adds	r2, r0, #1
 800b78c:	4606      	mov	r6, r0
 800b78e:	d1d6      	bne.n	800b73e <_svfiprintf_r+0x176>
 800b790:	89ab      	ldrh	r3, [r5, #12]
 800b792:	065b      	lsls	r3, r3, #25
 800b794:	f53f af2c 	bmi.w	800b5f0 <_svfiprintf_r+0x28>
 800b798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b79a:	b01d      	add	sp, #116	; 0x74
 800b79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a0:	ab03      	add	r3, sp, #12
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	462a      	mov	r2, r5
 800b7a6:	4b06      	ldr	r3, [pc, #24]	; (800b7c0 <_svfiprintf_r+0x1f8>)
 800b7a8:	a904      	add	r1, sp, #16
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	f000 f9d4 	bl	800bb58 <_printf_i>
 800b7b0:	e7eb      	b.n	800b78a <_svfiprintf_r+0x1c2>
 800b7b2:	bf00      	nop
 800b7b4:	0800c4a1 	.word	0x0800c4a1
 800b7b8:	0800c4ab 	.word	0x0800c4ab
 800b7bc:	00000000 	.word	0x00000000
 800b7c0:	0800b511 	.word	0x0800b511
 800b7c4:	0800c4a7 	.word	0x0800c4a7

0800b7c8 <__sfputc_r>:
 800b7c8:	6893      	ldr	r3, [r2, #8]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	b410      	push	{r4}
 800b7d0:	6093      	str	r3, [r2, #8]
 800b7d2:	da08      	bge.n	800b7e6 <__sfputc_r+0x1e>
 800b7d4:	6994      	ldr	r4, [r2, #24]
 800b7d6:	42a3      	cmp	r3, r4
 800b7d8:	db01      	blt.n	800b7de <__sfputc_r+0x16>
 800b7da:	290a      	cmp	r1, #10
 800b7dc:	d103      	bne.n	800b7e6 <__sfputc_r+0x1e>
 800b7de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7e2:	f000 baf1 	b.w	800bdc8 <__swbuf_r>
 800b7e6:	6813      	ldr	r3, [r2, #0]
 800b7e8:	1c58      	adds	r0, r3, #1
 800b7ea:	6010      	str	r0, [r2, #0]
 800b7ec:	7019      	strb	r1, [r3, #0]
 800b7ee:	4608      	mov	r0, r1
 800b7f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <__sfputs_r>:
 800b7f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	460f      	mov	r7, r1
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	18d5      	adds	r5, r2, r3
 800b800:	42ac      	cmp	r4, r5
 800b802:	d101      	bne.n	800b808 <__sfputs_r+0x12>
 800b804:	2000      	movs	r0, #0
 800b806:	e007      	b.n	800b818 <__sfputs_r+0x22>
 800b808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b80c:	463a      	mov	r2, r7
 800b80e:	4630      	mov	r0, r6
 800b810:	f7ff ffda 	bl	800b7c8 <__sfputc_r>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d1f3      	bne.n	800b800 <__sfputs_r+0xa>
 800b818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b81c <_vfiprintf_r>:
 800b81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b820:	460d      	mov	r5, r1
 800b822:	b09d      	sub	sp, #116	; 0x74
 800b824:	4614      	mov	r4, r2
 800b826:	4698      	mov	r8, r3
 800b828:	4606      	mov	r6, r0
 800b82a:	b118      	cbz	r0, 800b834 <_vfiprintf_r+0x18>
 800b82c:	6983      	ldr	r3, [r0, #24]
 800b82e:	b90b      	cbnz	r3, 800b834 <_vfiprintf_r+0x18>
 800b830:	f7ff fa46 	bl	800acc0 <__sinit>
 800b834:	4b89      	ldr	r3, [pc, #548]	; (800ba5c <_vfiprintf_r+0x240>)
 800b836:	429d      	cmp	r5, r3
 800b838:	d11b      	bne.n	800b872 <_vfiprintf_r+0x56>
 800b83a:	6875      	ldr	r5, [r6, #4]
 800b83c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b83e:	07d9      	lsls	r1, r3, #31
 800b840:	d405      	bmi.n	800b84e <_vfiprintf_r+0x32>
 800b842:	89ab      	ldrh	r3, [r5, #12]
 800b844:	059a      	lsls	r2, r3, #22
 800b846:	d402      	bmi.n	800b84e <_vfiprintf_r+0x32>
 800b848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b84a:	f7ff fafc 	bl	800ae46 <__retarget_lock_acquire_recursive>
 800b84e:	89ab      	ldrh	r3, [r5, #12]
 800b850:	071b      	lsls	r3, r3, #28
 800b852:	d501      	bpl.n	800b858 <_vfiprintf_r+0x3c>
 800b854:	692b      	ldr	r3, [r5, #16]
 800b856:	b9eb      	cbnz	r3, 800b894 <_vfiprintf_r+0x78>
 800b858:	4629      	mov	r1, r5
 800b85a:	4630      	mov	r0, r6
 800b85c:	f000 fb06 	bl	800be6c <__swsetup_r>
 800b860:	b1c0      	cbz	r0, 800b894 <_vfiprintf_r+0x78>
 800b862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b864:	07dc      	lsls	r4, r3, #31
 800b866:	d50e      	bpl.n	800b886 <_vfiprintf_r+0x6a>
 800b868:	f04f 30ff 	mov.w	r0, #4294967295
 800b86c:	b01d      	add	sp, #116	; 0x74
 800b86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b872:	4b7b      	ldr	r3, [pc, #492]	; (800ba60 <_vfiprintf_r+0x244>)
 800b874:	429d      	cmp	r5, r3
 800b876:	d101      	bne.n	800b87c <_vfiprintf_r+0x60>
 800b878:	68b5      	ldr	r5, [r6, #8]
 800b87a:	e7df      	b.n	800b83c <_vfiprintf_r+0x20>
 800b87c:	4b79      	ldr	r3, [pc, #484]	; (800ba64 <_vfiprintf_r+0x248>)
 800b87e:	429d      	cmp	r5, r3
 800b880:	bf08      	it	eq
 800b882:	68f5      	ldreq	r5, [r6, #12]
 800b884:	e7da      	b.n	800b83c <_vfiprintf_r+0x20>
 800b886:	89ab      	ldrh	r3, [r5, #12]
 800b888:	0598      	lsls	r0, r3, #22
 800b88a:	d4ed      	bmi.n	800b868 <_vfiprintf_r+0x4c>
 800b88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b88e:	f7ff fadb 	bl	800ae48 <__retarget_lock_release_recursive>
 800b892:	e7e9      	b.n	800b868 <_vfiprintf_r+0x4c>
 800b894:	2300      	movs	r3, #0
 800b896:	9309      	str	r3, [sp, #36]	; 0x24
 800b898:	2320      	movs	r3, #32
 800b89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b89e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8a2:	2330      	movs	r3, #48	; 0x30
 800b8a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba68 <_vfiprintf_r+0x24c>
 800b8a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8ac:	f04f 0901 	mov.w	r9, #1
 800b8b0:	4623      	mov	r3, r4
 800b8b2:	469a      	mov	sl, r3
 800b8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8b8:	b10a      	cbz	r2, 800b8be <_vfiprintf_r+0xa2>
 800b8ba:	2a25      	cmp	r2, #37	; 0x25
 800b8bc:	d1f9      	bne.n	800b8b2 <_vfiprintf_r+0x96>
 800b8be:	ebba 0b04 	subs.w	fp, sl, r4
 800b8c2:	d00b      	beq.n	800b8dc <_vfiprintf_r+0xc0>
 800b8c4:	465b      	mov	r3, fp
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f7ff ff93 	bl	800b7f6 <__sfputs_r>
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	f000 80aa 	beq.w	800ba2a <_vfiprintf_r+0x20e>
 800b8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8d8:	445a      	add	r2, fp
 800b8da:	9209      	str	r2, [sp, #36]	; 0x24
 800b8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 80a2 	beq.w	800ba2a <_vfiprintf_r+0x20e>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8f0:	f10a 0a01 	add.w	sl, sl, #1
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	9307      	str	r3, [sp, #28]
 800b8f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8fc:	931a      	str	r3, [sp, #104]	; 0x68
 800b8fe:	4654      	mov	r4, sl
 800b900:	2205      	movs	r2, #5
 800b902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b906:	4858      	ldr	r0, [pc, #352]	; (800ba68 <_vfiprintf_r+0x24c>)
 800b908:	f7f4 fc62 	bl	80001d0 <memchr>
 800b90c:	9a04      	ldr	r2, [sp, #16]
 800b90e:	b9d8      	cbnz	r0, 800b948 <_vfiprintf_r+0x12c>
 800b910:	06d1      	lsls	r1, r2, #27
 800b912:	bf44      	itt	mi
 800b914:	2320      	movmi	r3, #32
 800b916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b91a:	0713      	lsls	r3, r2, #28
 800b91c:	bf44      	itt	mi
 800b91e:	232b      	movmi	r3, #43	; 0x2b
 800b920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b924:	f89a 3000 	ldrb.w	r3, [sl]
 800b928:	2b2a      	cmp	r3, #42	; 0x2a
 800b92a:	d015      	beq.n	800b958 <_vfiprintf_r+0x13c>
 800b92c:	9a07      	ldr	r2, [sp, #28]
 800b92e:	4654      	mov	r4, sl
 800b930:	2000      	movs	r0, #0
 800b932:	f04f 0c0a 	mov.w	ip, #10
 800b936:	4621      	mov	r1, r4
 800b938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b93c:	3b30      	subs	r3, #48	; 0x30
 800b93e:	2b09      	cmp	r3, #9
 800b940:	d94e      	bls.n	800b9e0 <_vfiprintf_r+0x1c4>
 800b942:	b1b0      	cbz	r0, 800b972 <_vfiprintf_r+0x156>
 800b944:	9207      	str	r2, [sp, #28]
 800b946:	e014      	b.n	800b972 <_vfiprintf_r+0x156>
 800b948:	eba0 0308 	sub.w	r3, r0, r8
 800b94c:	fa09 f303 	lsl.w	r3, r9, r3
 800b950:	4313      	orrs	r3, r2
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	46a2      	mov	sl, r4
 800b956:	e7d2      	b.n	800b8fe <_vfiprintf_r+0xe2>
 800b958:	9b03      	ldr	r3, [sp, #12]
 800b95a:	1d19      	adds	r1, r3, #4
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	9103      	str	r1, [sp, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	bfbb      	ittet	lt
 800b964:	425b      	neglt	r3, r3
 800b966:	f042 0202 	orrlt.w	r2, r2, #2
 800b96a:	9307      	strge	r3, [sp, #28]
 800b96c:	9307      	strlt	r3, [sp, #28]
 800b96e:	bfb8      	it	lt
 800b970:	9204      	strlt	r2, [sp, #16]
 800b972:	7823      	ldrb	r3, [r4, #0]
 800b974:	2b2e      	cmp	r3, #46	; 0x2e
 800b976:	d10c      	bne.n	800b992 <_vfiprintf_r+0x176>
 800b978:	7863      	ldrb	r3, [r4, #1]
 800b97a:	2b2a      	cmp	r3, #42	; 0x2a
 800b97c:	d135      	bne.n	800b9ea <_vfiprintf_r+0x1ce>
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	1d1a      	adds	r2, r3, #4
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	9203      	str	r2, [sp, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	bfb8      	it	lt
 800b98a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b98e:	3402      	adds	r4, #2
 800b990:	9305      	str	r3, [sp, #20]
 800b992:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba78 <_vfiprintf_r+0x25c>
 800b996:	7821      	ldrb	r1, [r4, #0]
 800b998:	2203      	movs	r2, #3
 800b99a:	4650      	mov	r0, sl
 800b99c:	f7f4 fc18 	bl	80001d0 <memchr>
 800b9a0:	b140      	cbz	r0, 800b9b4 <_vfiprintf_r+0x198>
 800b9a2:	2340      	movs	r3, #64	; 0x40
 800b9a4:	eba0 000a 	sub.w	r0, r0, sl
 800b9a8:	fa03 f000 	lsl.w	r0, r3, r0
 800b9ac:	9b04      	ldr	r3, [sp, #16]
 800b9ae:	4303      	orrs	r3, r0
 800b9b0:	3401      	adds	r4, #1
 800b9b2:	9304      	str	r3, [sp, #16]
 800b9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b8:	482c      	ldr	r0, [pc, #176]	; (800ba6c <_vfiprintf_r+0x250>)
 800b9ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9be:	2206      	movs	r2, #6
 800b9c0:	f7f4 fc06 	bl	80001d0 <memchr>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d03f      	beq.n	800ba48 <_vfiprintf_r+0x22c>
 800b9c8:	4b29      	ldr	r3, [pc, #164]	; (800ba70 <_vfiprintf_r+0x254>)
 800b9ca:	bb1b      	cbnz	r3, 800ba14 <_vfiprintf_r+0x1f8>
 800b9cc:	9b03      	ldr	r3, [sp, #12]
 800b9ce:	3307      	adds	r3, #7
 800b9d0:	f023 0307 	bic.w	r3, r3, #7
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	9303      	str	r3, [sp, #12]
 800b9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9da:	443b      	add	r3, r7
 800b9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9de:	e767      	b.n	800b8b0 <_vfiprintf_r+0x94>
 800b9e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9e4:	460c      	mov	r4, r1
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	e7a5      	b.n	800b936 <_vfiprintf_r+0x11a>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	3401      	adds	r4, #1
 800b9ee:	9305      	str	r3, [sp, #20]
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	f04f 0c0a 	mov.w	ip, #10
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9fc:	3a30      	subs	r2, #48	; 0x30
 800b9fe:	2a09      	cmp	r2, #9
 800ba00:	d903      	bls.n	800ba0a <_vfiprintf_r+0x1ee>
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d0c5      	beq.n	800b992 <_vfiprintf_r+0x176>
 800ba06:	9105      	str	r1, [sp, #20]
 800ba08:	e7c3      	b.n	800b992 <_vfiprintf_r+0x176>
 800ba0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba0e:	4604      	mov	r4, r0
 800ba10:	2301      	movs	r3, #1
 800ba12:	e7f0      	b.n	800b9f6 <_vfiprintf_r+0x1da>
 800ba14:	ab03      	add	r3, sp, #12
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	462a      	mov	r2, r5
 800ba1a:	4b16      	ldr	r3, [pc, #88]	; (800ba74 <_vfiprintf_r+0x258>)
 800ba1c:	a904      	add	r1, sp, #16
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f3af 8000 	nop.w
 800ba24:	4607      	mov	r7, r0
 800ba26:	1c78      	adds	r0, r7, #1
 800ba28:	d1d6      	bne.n	800b9d8 <_vfiprintf_r+0x1bc>
 800ba2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba2c:	07d9      	lsls	r1, r3, #31
 800ba2e:	d405      	bmi.n	800ba3c <_vfiprintf_r+0x220>
 800ba30:	89ab      	ldrh	r3, [r5, #12]
 800ba32:	059a      	lsls	r2, r3, #22
 800ba34:	d402      	bmi.n	800ba3c <_vfiprintf_r+0x220>
 800ba36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba38:	f7ff fa06 	bl	800ae48 <__retarget_lock_release_recursive>
 800ba3c:	89ab      	ldrh	r3, [r5, #12]
 800ba3e:	065b      	lsls	r3, r3, #25
 800ba40:	f53f af12 	bmi.w	800b868 <_vfiprintf_r+0x4c>
 800ba44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba46:	e711      	b.n	800b86c <_vfiprintf_r+0x50>
 800ba48:	ab03      	add	r3, sp, #12
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	462a      	mov	r2, r5
 800ba4e:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <_vfiprintf_r+0x258>)
 800ba50:	a904      	add	r1, sp, #16
 800ba52:	4630      	mov	r0, r6
 800ba54:	f000 f880 	bl	800bb58 <_printf_i>
 800ba58:	e7e4      	b.n	800ba24 <_vfiprintf_r+0x208>
 800ba5a:	bf00      	nop
 800ba5c:	0800c35c 	.word	0x0800c35c
 800ba60:	0800c37c 	.word	0x0800c37c
 800ba64:	0800c33c 	.word	0x0800c33c
 800ba68:	0800c4a1 	.word	0x0800c4a1
 800ba6c:	0800c4ab 	.word	0x0800c4ab
 800ba70:	00000000 	.word	0x00000000
 800ba74:	0800b7f7 	.word	0x0800b7f7
 800ba78:	0800c4a7 	.word	0x0800c4a7

0800ba7c <_printf_common>:
 800ba7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba80:	4616      	mov	r6, r2
 800ba82:	4699      	mov	r9, r3
 800ba84:	688a      	ldr	r2, [r1, #8]
 800ba86:	690b      	ldr	r3, [r1, #16]
 800ba88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	bfb8      	it	lt
 800ba90:	4613      	movlt	r3, r2
 800ba92:	6033      	str	r3, [r6, #0]
 800ba94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba98:	4607      	mov	r7, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	b10a      	cbz	r2, 800baa2 <_printf_common+0x26>
 800ba9e:	3301      	adds	r3, #1
 800baa0:	6033      	str	r3, [r6, #0]
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	0699      	lsls	r1, r3, #26
 800baa6:	bf42      	ittt	mi
 800baa8:	6833      	ldrmi	r3, [r6, #0]
 800baaa:	3302      	addmi	r3, #2
 800baac:	6033      	strmi	r3, [r6, #0]
 800baae:	6825      	ldr	r5, [r4, #0]
 800bab0:	f015 0506 	ands.w	r5, r5, #6
 800bab4:	d106      	bne.n	800bac4 <_printf_common+0x48>
 800bab6:	f104 0a19 	add.w	sl, r4, #25
 800baba:	68e3      	ldr	r3, [r4, #12]
 800babc:	6832      	ldr	r2, [r6, #0]
 800babe:	1a9b      	subs	r3, r3, r2
 800bac0:	42ab      	cmp	r3, r5
 800bac2:	dc26      	bgt.n	800bb12 <_printf_common+0x96>
 800bac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bac8:	1e13      	subs	r3, r2, #0
 800baca:	6822      	ldr	r2, [r4, #0]
 800bacc:	bf18      	it	ne
 800bace:	2301      	movne	r3, #1
 800bad0:	0692      	lsls	r2, r2, #26
 800bad2:	d42b      	bmi.n	800bb2c <_printf_common+0xb0>
 800bad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bad8:	4649      	mov	r1, r9
 800bada:	4638      	mov	r0, r7
 800badc:	47c0      	blx	r8
 800bade:	3001      	adds	r0, #1
 800bae0:	d01e      	beq.n	800bb20 <_printf_common+0xa4>
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	68e5      	ldr	r5, [r4, #12]
 800bae6:	6832      	ldr	r2, [r6, #0]
 800bae8:	f003 0306 	and.w	r3, r3, #6
 800baec:	2b04      	cmp	r3, #4
 800baee:	bf08      	it	eq
 800baf0:	1aad      	subeq	r5, r5, r2
 800baf2:	68a3      	ldr	r3, [r4, #8]
 800baf4:	6922      	ldr	r2, [r4, #16]
 800baf6:	bf0c      	ite	eq
 800baf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bafc:	2500      	movne	r5, #0
 800bafe:	4293      	cmp	r3, r2
 800bb00:	bfc4      	itt	gt
 800bb02:	1a9b      	subgt	r3, r3, r2
 800bb04:	18ed      	addgt	r5, r5, r3
 800bb06:	2600      	movs	r6, #0
 800bb08:	341a      	adds	r4, #26
 800bb0a:	42b5      	cmp	r5, r6
 800bb0c:	d11a      	bne.n	800bb44 <_printf_common+0xc8>
 800bb0e:	2000      	movs	r0, #0
 800bb10:	e008      	b.n	800bb24 <_printf_common+0xa8>
 800bb12:	2301      	movs	r3, #1
 800bb14:	4652      	mov	r2, sl
 800bb16:	4649      	mov	r1, r9
 800bb18:	4638      	mov	r0, r7
 800bb1a:	47c0      	blx	r8
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d103      	bne.n	800bb28 <_printf_common+0xac>
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb28:	3501      	adds	r5, #1
 800bb2a:	e7c6      	b.n	800baba <_printf_common+0x3e>
 800bb2c:	18e1      	adds	r1, r4, r3
 800bb2e:	1c5a      	adds	r2, r3, #1
 800bb30:	2030      	movs	r0, #48	; 0x30
 800bb32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb36:	4422      	add	r2, r4
 800bb38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb40:	3302      	adds	r3, #2
 800bb42:	e7c7      	b.n	800bad4 <_printf_common+0x58>
 800bb44:	2301      	movs	r3, #1
 800bb46:	4622      	mov	r2, r4
 800bb48:	4649      	mov	r1, r9
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	47c0      	blx	r8
 800bb4e:	3001      	adds	r0, #1
 800bb50:	d0e6      	beq.n	800bb20 <_printf_common+0xa4>
 800bb52:	3601      	adds	r6, #1
 800bb54:	e7d9      	b.n	800bb0a <_printf_common+0x8e>
	...

0800bb58 <_printf_i>:
 800bb58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	4691      	mov	r9, r2
 800bb60:	7e27      	ldrb	r7, [r4, #24]
 800bb62:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb64:	2f78      	cmp	r7, #120	; 0x78
 800bb66:	4680      	mov	r8, r0
 800bb68:	469a      	mov	sl, r3
 800bb6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb6e:	d807      	bhi.n	800bb80 <_printf_i+0x28>
 800bb70:	2f62      	cmp	r7, #98	; 0x62
 800bb72:	d80a      	bhi.n	800bb8a <_printf_i+0x32>
 800bb74:	2f00      	cmp	r7, #0
 800bb76:	f000 80d8 	beq.w	800bd2a <_printf_i+0x1d2>
 800bb7a:	2f58      	cmp	r7, #88	; 0x58
 800bb7c:	f000 80a3 	beq.w	800bcc6 <_printf_i+0x16e>
 800bb80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb88:	e03a      	b.n	800bc00 <_printf_i+0xa8>
 800bb8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb8e:	2b15      	cmp	r3, #21
 800bb90:	d8f6      	bhi.n	800bb80 <_printf_i+0x28>
 800bb92:	a001      	add	r0, pc, #4	; (adr r0, 800bb98 <_printf_i+0x40>)
 800bb94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb98:	0800bbf1 	.word	0x0800bbf1
 800bb9c:	0800bc05 	.word	0x0800bc05
 800bba0:	0800bb81 	.word	0x0800bb81
 800bba4:	0800bb81 	.word	0x0800bb81
 800bba8:	0800bb81 	.word	0x0800bb81
 800bbac:	0800bb81 	.word	0x0800bb81
 800bbb0:	0800bc05 	.word	0x0800bc05
 800bbb4:	0800bb81 	.word	0x0800bb81
 800bbb8:	0800bb81 	.word	0x0800bb81
 800bbbc:	0800bb81 	.word	0x0800bb81
 800bbc0:	0800bb81 	.word	0x0800bb81
 800bbc4:	0800bd11 	.word	0x0800bd11
 800bbc8:	0800bc35 	.word	0x0800bc35
 800bbcc:	0800bcf3 	.word	0x0800bcf3
 800bbd0:	0800bb81 	.word	0x0800bb81
 800bbd4:	0800bb81 	.word	0x0800bb81
 800bbd8:	0800bd33 	.word	0x0800bd33
 800bbdc:	0800bb81 	.word	0x0800bb81
 800bbe0:	0800bc35 	.word	0x0800bc35
 800bbe4:	0800bb81 	.word	0x0800bb81
 800bbe8:	0800bb81 	.word	0x0800bb81
 800bbec:	0800bcfb 	.word	0x0800bcfb
 800bbf0:	680b      	ldr	r3, [r1, #0]
 800bbf2:	1d1a      	adds	r2, r3, #4
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	600a      	str	r2, [r1, #0]
 800bbf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc00:	2301      	movs	r3, #1
 800bc02:	e0a3      	b.n	800bd4c <_printf_i+0x1f4>
 800bc04:	6825      	ldr	r5, [r4, #0]
 800bc06:	6808      	ldr	r0, [r1, #0]
 800bc08:	062e      	lsls	r6, r5, #24
 800bc0a:	f100 0304 	add.w	r3, r0, #4
 800bc0e:	d50a      	bpl.n	800bc26 <_printf_i+0xce>
 800bc10:	6805      	ldr	r5, [r0, #0]
 800bc12:	600b      	str	r3, [r1, #0]
 800bc14:	2d00      	cmp	r5, #0
 800bc16:	da03      	bge.n	800bc20 <_printf_i+0xc8>
 800bc18:	232d      	movs	r3, #45	; 0x2d
 800bc1a:	426d      	negs	r5, r5
 800bc1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc20:	485e      	ldr	r0, [pc, #376]	; (800bd9c <_printf_i+0x244>)
 800bc22:	230a      	movs	r3, #10
 800bc24:	e019      	b.n	800bc5a <_printf_i+0x102>
 800bc26:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc2a:	6805      	ldr	r5, [r0, #0]
 800bc2c:	600b      	str	r3, [r1, #0]
 800bc2e:	bf18      	it	ne
 800bc30:	b22d      	sxthne	r5, r5
 800bc32:	e7ef      	b.n	800bc14 <_printf_i+0xbc>
 800bc34:	680b      	ldr	r3, [r1, #0]
 800bc36:	6825      	ldr	r5, [r4, #0]
 800bc38:	1d18      	adds	r0, r3, #4
 800bc3a:	6008      	str	r0, [r1, #0]
 800bc3c:	0628      	lsls	r0, r5, #24
 800bc3e:	d501      	bpl.n	800bc44 <_printf_i+0xec>
 800bc40:	681d      	ldr	r5, [r3, #0]
 800bc42:	e002      	b.n	800bc4a <_printf_i+0xf2>
 800bc44:	0669      	lsls	r1, r5, #25
 800bc46:	d5fb      	bpl.n	800bc40 <_printf_i+0xe8>
 800bc48:	881d      	ldrh	r5, [r3, #0]
 800bc4a:	4854      	ldr	r0, [pc, #336]	; (800bd9c <_printf_i+0x244>)
 800bc4c:	2f6f      	cmp	r7, #111	; 0x6f
 800bc4e:	bf0c      	ite	eq
 800bc50:	2308      	moveq	r3, #8
 800bc52:	230a      	movne	r3, #10
 800bc54:	2100      	movs	r1, #0
 800bc56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc5a:	6866      	ldr	r6, [r4, #4]
 800bc5c:	60a6      	str	r6, [r4, #8]
 800bc5e:	2e00      	cmp	r6, #0
 800bc60:	bfa2      	ittt	ge
 800bc62:	6821      	ldrge	r1, [r4, #0]
 800bc64:	f021 0104 	bicge.w	r1, r1, #4
 800bc68:	6021      	strge	r1, [r4, #0]
 800bc6a:	b90d      	cbnz	r5, 800bc70 <_printf_i+0x118>
 800bc6c:	2e00      	cmp	r6, #0
 800bc6e:	d04d      	beq.n	800bd0c <_printf_i+0x1b4>
 800bc70:	4616      	mov	r6, r2
 800bc72:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc76:	fb03 5711 	mls	r7, r3, r1, r5
 800bc7a:	5dc7      	ldrb	r7, [r0, r7]
 800bc7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc80:	462f      	mov	r7, r5
 800bc82:	42bb      	cmp	r3, r7
 800bc84:	460d      	mov	r5, r1
 800bc86:	d9f4      	bls.n	800bc72 <_printf_i+0x11a>
 800bc88:	2b08      	cmp	r3, #8
 800bc8a:	d10b      	bne.n	800bca4 <_printf_i+0x14c>
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	07df      	lsls	r7, r3, #31
 800bc90:	d508      	bpl.n	800bca4 <_printf_i+0x14c>
 800bc92:	6923      	ldr	r3, [r4, #16]
 800bc94:	6861      	ldr	r1, [r4, #4]
 800bc96:	4299      	cmp	r1, r3
 800bc98:	bfde      	ittt	le
 800bc9a:	2330      	movle	r3, #48	; 0x30
 800bc9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bca4:	1b92      	subs	r2, r2, r6
 800bca6:	6122      	str	r2, [r4, #16]
 800bca8:	f8cd a000 	str.w	sl, [sp]
 800bcac:	464b      	mov	r3, r9
 800bcae:	aa03      	add	r2, sp, #12
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	4640      	mov	r0, r8
 800bcb4:	f7ff fee2 	bl	800ba7c <_printf_common>
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d14c      	bne.n	800bd56 <_printf_i+0x1fe>
 800bcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc0:	b004      	add	sp, #16
 800bcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc6:	4835      	ldr	r0, [pc, #212]	; (800bd9c <_printf_i+0x244>)
 800bcc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	680e      	ldr	r6, [r1, #0]
 800bcd0:	061f      	lsls	r7, r3, #24
 800bcd2:	f856 5b04 	ldr.w	r5, [r6], #4
 800bcd6:	600e      	str	r6, [r1, #0]
 800bcd8:	d514      	bpl.n	800bd04 <_printf_i+0x1ac>
 800bcda:	07d9      	lsls	r1, r3, #31
 800bcdc:	bf44      	itt	mi
 800bcde:	f043 0320 	orrmi.w	r3, r3, #32
 800bce2:	6023      	strmi	r3, [r4, #0]
 800bce4:	b91d      	cbnz	r5, 800bcee <_printf_i+0x196>
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	f023 0320 	bic.w	r3, r3, #32
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	2310      	movs	r3, #16
 800bcf0:	e7b0      	b.n	800bc54 <_printf_i+0xfc>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	f043 0320 	orr.w	r3, r3, #32
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	2378      	movs	r3, #120	; 0x78
 800bcfc:	4828      	ldr	r0, [pc, #160]	; (800bda0 <_printf_i+0x248>)
 800bcfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd02:	e7e3      	b.n	800bccc <_printf_i+0x174>
 800bd04:	065e      	lsls	r6, r3, #25
 800bd06:	bf48      	it	mi
 800bd08:	b2ad      	uxthmi	r5, r5
 800bd0a:	e7e6      	b.n	800bcda <_printf_i+0x182>
 800bd0c:	4616      	mov	r6, r2
 800bd0e:	e7bb      	b.n	800bc88 <_printf_i+0x130>
 800bd10:	680b      	ldr	r3, [r1, #0]
 800bd12:	6826      	ldr	r6, [r4, #0]
 800bd14:	6960      	ldr	r0, [r4, #20]
 800bd16:	1d1d      	adds	r5, r3, #4
 800bd18:	600d      	str	r5, [r1, #0]
 800bd1a:	0635      	lsls	r5, r6, #24
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	d501      	bpl.n	800bd24 <_printf_i+0x1cc>
 800bd20:	6018      	str	r0, [r3, #0]
 800bd22:	e002      	b.n	800bd2a <_printf_i+0x1d2>
 800bd24:	0671      	lsls	r1, r6, #25
 800bd26:	d5fb      	bpl.n	800bd20 <_printf_i+0x1c8>
 800bd28:	8018      	strh	r0, [r3, #0]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	6123      	str	r3, [r4, #16]
 800bd2e:	4616      	mov	r6, r2
 800bd30:	e7ba      	b.n	800bca8 <_printf_i+0x150>
 800bd32:	680b      	ldr	r3, [r1, #0]
 800bd34:	1d1a      	adds	r2, r3, #4
 800bd36:	600a      	str	r2, [r1, #0]
 800bd38:	681e      	ldr	r6, [r3, #0]
 800bd3a:	6862      	ldr	r2, [r4, #4]
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f7f4 fa46 	bl	80001d0 <memchr>
 800bd44:	b108      	cbz	r0, 800bd4a <_printf_i+0x1f2>
 800bd46:	1b80      	subs	r0, r0, r6
 800bd48:	6060      	str	r0, [r4, #4]
 800bd4a:	6863      	ldr	r3, [r4, #4]
 800bd4c:	6123      	str	r3, [r4, #16]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd54:	e7a8      	b.n	800bca8 <_printf_i+0x150>
 800bd56:	6923      	ldr	r3, [r4, #16]
 800bd58:	4632      	mov	r2, r6
 800bd5a:	4649      	mov	r1, r9
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	47d0      	blx	sl
 800bd60:	3001      	adds	r0, #1
 800bd62:	d0ab      	beq.n	800bcbc <_printf_i+0x164>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	079b      	lsls	r3, r3, #30
 800bd68:	d413      	bmi.n	800bd92 <_printf_i+0x23a>
 800bd6a:	68e0      	ldr	r0, [r4, #12]
 800bd6c:	9b03      	ldr	r3, [sp, #12]
 800bd6e:	4298      	cmp	r0, r3
 800bd70:	bfb8      	it	lt
 800bd72:	4618      	movlt	r0, r3
 800bd74:	e7a4      	b.n	800bcc0 <_printf_i+0x168>
 800bd76:	2301      	movs	r3, #1
 800bd78:	4632      	mov	r2, r6
 800bd7a:	4649      	mov	r1, r9
 800bd7c:	4640      	mov	r0, r8
 800bd7e:	47d0      	blx	sl
 800bd80:	3001      	adds	r0, #1
 800bd82:	d09b      	beq.n	800bcbc <_printf_i+0x164>
 800bd84:	3501      	adds	r5, #1
 800bd86:	68e3      	ldr	r3, [r4, #12]
 800bd88:	9903      	ldr	r1, [sp, #12]
 800bd8a:	1a5b      	subs	r3, r3, r1
 800bd8c:	42ab      	cmp	r3, r5
 800bd8e:	dcf2      	bgt.n	800bd76 <_printf_i+0x21e>
 800bd90:	e7eb      	b.n	800bd6a <_printf_i+0x212>
 800bd92:	2500      	movs	r5, #0
 800bd94:	f104 0619 	add.w	r6, r4, #25
 800bd98:	e7f5      	b.n	800bd86 <_printf_i+0x22e>
 800bd9a:	bf00      	nop
 800bd9c:	0800c4b2 	.word	0x0800c4b2
 800bda0:	0800c4c3 	.word	0x0800c4c3

0800bda4 <_read_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	; (800bdc4 <_read_r+0x20>)
 800bda8:	4604      	mov	r4, r0
 800bdaa:	4608      	mov	r0, r1
 800bdac:	4611      	mov	r1, r2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	602a      	str	r2, [r5, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	f7f5 f8fa 	bl	8000fac <_read>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_read_r+0x1e>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_read_r+0x1e>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20006850 	.word	0x20006850

0800bdc8 <__swbuf_r>:
 800bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdca:	460e      	mov	r6, r1
 800bdcc:	4614      	mov	r4, r2
 800bdce:	4605      	mov	r5, r0
 800bdd0:	b118      	cbz	r0, 800bdda <__swbuf_r+0x12>
 800bdd2:	6983      	ldr	r3, [r0, #24]
 800bdd4:	b90b      	cbnz	r3, 800bdda <__swbuf_r+0x12>
 800bdd6:	f7fe ff73 	bl	800acc0 <__sinit>
 800bdda:	4b21      	ldr	r3, [pc, #132]	; (800be60 <__swbuf_r+0x98>)
 800bddc:	429c      	cmp	r4, r3
 800bdde:	d12b      	bne.n	800be38 <__swbuf_r+0x70>
 800bde0:	686c      	ldr	r4, [r5, #4]
 800bde2:	69a3      	ldr	r3, [r4, #24]
 800bde4:	60a3      	str	r3, [r4, #8]
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	071a      	lsls	r2, r3, #28
 800bdea:	d52f      	bpl.n	800be4c <__swbuf_r+0x84>
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	b36b      	cbz	r3, 800be4c <__swbuf_r+0x84>
 800bdf0:	6923      	ldr	r3, [r4, #16]
 800bdf2:	6820      	ldr	r0, [r4, #0]
 800bdf4:	1ac0      	subs	r0, r0, r3
 800bdf6:	6963      	ldr	r3, [r4, #20]
 800bdf8:	b2f6      	uxtb	r6, r6
 800bdfa:	4283      	cmp	r3, r0
 800bdfc:	4637      	mov	r7, r6
 800bdfe:	dc04      	bgt.n	800be0a <__swbuf_r+0x42>
 800be00:	4621      	mov	r1, r4
 800be02:	4628      	mov	r0, r5
 800be04:	f7ff fada 	bl	800b3bc <_fflush_r>
 800be08:	bb30      	cbnz	r0, 800be58 <__swbuf_r+0x90>
 800be0a:	68a3      	ldr	r3, [r4, #8]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	60a3      	str	r3, [r4, #8]
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	1c5a      	adds	r2, r3, #1
 800be14:	6022      	str	r2, [r4, #0]
 800be16:	701e      	strb	r6, [r3, #0]
 800be18:	6963      	ldr	r3, [r4, #20]
 800be1a:	3001      	adds	r0, #1
 800be1c:	4283      	cmp	r3, r0
 800be1e:	d004      	beq.n	800be2a <__swbuf_r+0x62>
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	07db      	lsls	r3, r3, #31
 800be24:	d506      	bpl.n	800be34 <__swbuf_r+0x6c>
 800be26:	2e0a      	cmp	r6, #10
 800be28:	d104      	bne.n	800be34 <__swbuf_r+0x6c>
 800be2a:	4621      	mov	r1, r4
 800be2c:	4628      	mov	r0, r5
 800be2e:	f7ff fac5 	bl	800b3bc <_fflush_r>
 800be32:	b988      	cbnz	r0, 800be58 <__swbuf_r+0x90>
 800be34:	4638      	mov	r0, r7
 800be36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be38:	4b0a      	ldr	r3, [pc, #40]	; (800be64 <__swbuf_r+0x9c>)
 800be3a:	429c      	cmp	r4, r3
 800be3c:	d101      	bne.n	800be42 <__swbuf_r+0x7a>
 800be3e:	68ac      	ldr	r4, [r5, #8]
 800be40:	e7cf      	b.n	800bde2 <__swbuf_r+0x1a>
 800be42:	4b09      	ldr	r3, [pc, #36]	; (800be68 <__swbuf_r+0xa0>)
 800be44:	429c      	cmp	r4, r3
 800be46:	bf08      	it	eq
 800be48:	68ec      	ldreq	r4, [r5, #12]
 800be4a:	e7ca      	b.n	800bde2 <__swbuf_r+0x1a>
 800be4c:	4621      	mov	r1, r4
 800be4e:	4628      	mov	r0, r5
 800be50:	f000 f80c 	bl	800be6c <__swsetup_r>
 800be54:	2800      	cmp	r0, #0
 800be56:	d0cb      	beq.n	800bdf0 <__swbuf_r+0x28>
 800be58:	f04f 37ff 	mov.w	r7, #4294967295
 800be5c:	e7ea      	b.n	800be34 <__swbuf_r+0x6c>
 800be5e:	bf00      	nop
 800be60:	0800c35c 	.word	0x0800c35c
 800be64:	0800c37c 	.word	0x0800c37c
 800be68:	0800c33c 	.word	0x0800c33c

0800be6c <__swsetup_r>:
 800be6c:	4b32      	ldr	r3, [pc, #200]	; (800bf38 <__swsetup_r+0xcc>)
 800be6e:	b570      	push	{r4, r5, r6, lr}
 800be70:	681d      	ldr	r5, [r3, #0]
 800be72:	4606      	mov	r6, r0
 800be74:	460c      	mov	r4, r1
 800be76:	b125      	cbz	r5, 800be82 <__swsetup_r+0x16>
 800be78:	69ab      	ldr	r3, [r5, #24]
 800be7a:	b913      	cbnz	r3, 800be82 <__swsetup_r+0x16>
 800be7c:	4628      	mov	r0, r5
 800be7e:	f7fe ff1f 	bl	800acc0 <__sinit>
 800be82:	4b2e      	ldr	r3, [pc, #184]	; (800bf3c <__swsetup_r+0xd0>)
 800be84:	429c      	cmp	r4, r3
 800be86:	d10f      	bne.n	800bea8 <__swsetup_r+0x3c>
 800be88:	686c      	ldr	r4, [r5, #4]
 800be8a:	89a3      	ldrh	r3, [r4, #12]
 800be8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be90:	0719      	lsls	r1, r3, #28
 800be92:	d42c      	bmi.n	800beee <__swsetup_r+0x82>
 800be94:	06dd      	lsls	r5, r3, #27
 800be96:	d411      	bmi.n	800bebc <__swsetup_r+0x50>
 800be98:	2309      	movs	r3, #9
 800be9a:	6033      	str	r3, [r6, #0]
 800be9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bea0:	81a3      	strh	r3, [r4, #12]
 800bea2:	f04f 30ff 	mov.w	r0, #4294967295
 800bea6:	e03e      	b.n	800bf26 <__swsetup_r+0xba>
 800bea8:	4b25      	ldr	r3, [pc, #148]	; (800bf40 <__swsetup_r+0xd4>)
 800beaa:	429c      	cmp	r4, r3
 800beac:	d101      	bne.n	800beb2 <__swsetup_r+0x46>
 800beae:	68ac      	ldr	r4, [r5, #8]
 800beb0:	e7eb      	b.n	800be8a <__swsetup_r+0x1e>
 800beb2:	4b24      	ldr	r3, [pc, #144]	; (800bf44 <__swsetup_r+0xd8>)
 800beb4:	429c      	cmp	r4, r3
 800beb6:	bf08      	it	eq
 800beb8:	68ec      	ldreq	r4, [r5, #12]
 800beba:	e7e6      	b.n	800be8a <__swsetup_r+0x1e>
 800bebc:	0758      	lsls	r0, r3, #29
 800bebe:	d512      	bpl.n	800bee6 <__swsetup_r+0x7a>
 800bec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bec2:	b141      	cbz	r1, 800bed6 <__swsetup_r+0x6a>
 800bec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bec8:	4299      	cmp	r1, r3
 800beca:	d002      	beq.n	800bed2 <__swsetup_r+0x66>
 800becc:	4630      	mov	r0, r6
 800bece:	f7ff facf 	bl	800b470 <_free_r>
 800bed2:	2300      	movs	r3, #0
 800bed4:	6363      	str	r3, [r4, #52]	; 0x34
 800bed6:	89a3      	ldrh	r3, [r4, #12]
 800bed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bedc:	81a3      	strh	r3, [r4, #12]
 800bede:	2300      	movs	r3, #0
 800bee0:	6063      	str	r3, [r4, #4]
 800bee2:	6923      	ldr	r3, [r4, #16]
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	89a3      	ldrh	r3, [r4, #12]
 800bee8:	f043 0308 	orr.w	r3, r3, #8
 800beec:	81a3      	strh	r3, [r4, #12]
 800beee:	6923      	ldr	r3, [r4, #16]
 800bef0:	b94b      	cbnz	r3, 800bf06 <__swsetup_r+0x9a>
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800befc:	d003      	beq.n	800bf06 <__swsetup_r+0x9a>
 800befe:	4621      	mov	r1, r4
 800bf00:	4630      	mov	r0, r6
 800bf02:	f000 f845 	bl	800bf90 <__smakebuf_r>
 800bf06:	89a0      	ldrh	r0, [r4, #12]
 800bf08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf0c:	f010 0301 	ands.w	r3, r0, #1
 800bf10:	d00a      	beq.n	800bf28 <__swsetup_r+0xbc>
 800bf12:	2300      	movs	r3, #0
 800bf14:	60a3      	str	r3, [r4, #8]
 800bf16:	6963      	ldr	r3, [r4, #20]
 800bf18:	425b      	negs	r3, r3
 800bf1a:	61a3      	str	r3, [r4, #24]
 800bf1c:	6923      	ldr	r3, [r4, #16]
 800bf1e:	b943      	cbnz	r3, 800bf32 <__swsetup_r+0xc6>
 800bf20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf24:	d1ba      	bne.n	800be9c <__swsetup_r+0x30>
 800bf26:	bd70      	pop	{r4, r5, r6, pc}
 800bf28:	0781      	lsls	r1, r0, #30
 800bf2a:	bf58      	it	pl
 800bf2c:	6963      	ldrpl	r3, [r4, #20]
 800bf2e:	60a3      	str	r3, [r4, #8]
 800bf30:	e7f4      	b.n	800bf1c <__swsetup_r+0xb0>
 800bf32:	2000      	movs	r0, #0
 800bf34:	e7f7      	b.n	800bf26 <__swsetup_r+0xba>
 800bf36:	bf00      	nop
 800bf38:	2000020c 	.word	0x2000020c
 800bf3c:	0800c35c 	.word	0x0800c35c
 800bf40:	0800c37c 	.word	0x0800c37c
 800bf44:	0800c33c 	.word	0x0800c33c

0800bf48 <__swhatbuf_r>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	460e      	mov	r6, r1
 800bf4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf50:	2900      	cmp	r1, #0
 800bf52:	b096      	sub	sp, #88	; 0x58
 800bf54:	4614      	mov	r4, r2
 800bf56:	461d      	mov	r5, r3
 800bf58:	da07      	bge.n	800bf6a <__swhatbuf_r+0x22>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	602b      	str	r3, [r5, #0]
 800bf5e:	89b3      	ldrh	r3, [r6, #12]
 800bf60:	061a      	lsls	r2, r3, #24
 800bf62:	d410      	bmi.n	800bf86 <__swhatbuf_r+0x3e>
 800bf64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf68:	e00e      	b.n	800bf88 <__swhatbuf_r+0x40>
 800bf6a:	466a      	mov	r2, sp
 800bf6c:	f000 f890 	bl	800c090 <_fstat_r>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	dbf2      	blt.n	800bf5a <__swhatbuf_r+0x12>
 800bf74:	9a01      	ldr	r2, [sp, #4]
 800bf76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf7e:	425a      	negs	r2, r3
 800bf80:	415a      	adcs	r2, r3
 800bf82:	602a      	str	r2, [r5, #0]
 800bf84:	e7ee      	b.n	800bf64 <__swhatbuf_r+0x1c>
 800bf86:	2340      	movs	r3, #64	; 0x40
 800bf88:	2000      	movs	r0, #0
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	b016      	add	sp, #88	; 0x58
 800bf8e:	bd70      	pop	{r4, r5, r6, pc}

0800bf90 <__smakebuf_r>:
 800bf90:	898b      	ldrh	r3, [r1, #12]
 800bf92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf94:	079d      	lsls	r5, r3, #30
 800bf96:	4606      	mov	r6, r0
 800bf98:	460c      	mov	r4, r1
 800bf9a:	d507      	bpl.n	800bfac <__smakebuf_r+0x1c>
 800bf9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	6163      	str	r3, [r4, #20]
 800bfa8:	b002      	add	sp, #8
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
 800bfac:	ab01      	add	r3, sp, #4
 800bfae:	466a      	mov	r2, sp
 800bfb0:	f7ff ffca 	bl	800bf48 <__swhatbuf_r>
 800bfb4:	9900      	ldr	r1, [sp, #0]
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	4630      	mov	r0, r6
 800bfba:	f7fe ff6b 	bl	800ae94 <_malloc_r>
 800bfbe:	b948      	cbnz	r0, 800bfd4 <__smakebuf_r+0x44>
 800bfc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc4:	059a      	lsls	r2, r3, #22
 800bfc6:	d4ef      	bmi.n	800bfa8 <__smakebuf_r+0x18>
 800bfc8:	f023 0303 	bic.w	r3, r3, #3
 800bfcc:	f043 0302 	orr.w	r3, r3, #2
 800bfd0:	81a3      	strh	r3, [r4, #12]
 800bfd2:	e7e3      	b.n	800bf9c <__smakebuf_r+0xc>
 800bfd4:	4b0d      	ldr	r3, [pc, #52]	; (800c00c <__smakebuf_r+0x7c>)
 800bfd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	6020      	str	r0, [r4, #0]
 800bfdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfe0:	81a3      	strh	r3, [r4, #12]
 800bfe2:	9b00      	ldr	r3, [sp, #0]
 800bfe4:	6163      	str	r3, [r4, #20]
 800bfe6:	9b01      	ldr	r3, [sp, #4]
 800bfe8:	6120      	str	r0, [r4, #16]
 800bfea:	b15b      	cbz	r3, 800c004 <__smakebuf_r+0x74>
 800bfec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bff0:	4630      	mov	r0, r6
 800bff2:	f000 f85f 	bl	800c0b4 <_isatty_r>
 800bff6:	b128      	cbz	r0, 800c004 <__smakebuf_r+0x74>
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	f023 0303 	bic.w	r3, r3, #3
 800bffe:	f043 0301 	orr.w	r3, r3, #1
 800c002:	81a3      	strh	r3, [r4, #12]
 800c004:	89a0      	ldrh	r0, [r4, #12]
 800c006:	4305      	orrs	r5, r0
 800c008:	81a5      	strh	r5, [r4, #12]
 800c00a:	e7cd      	b.n	800bfa8 <__smakebuf_r+0x18>
 800c00c:	0800ac59 	.word	0x0800ac59

0800c010 <memmove>:
 800c010:	4288      	cmp	r0, r1
 800c012:	b510      	push	{r4, lr}
 800c014:	eb01 0402 	add.w	r4, r1, r2
 800c018:	d902      	bls.n	800c020 <memmove+0x10>
 800c01a:	4284      	cmp	r4, r0
 800c01c:	4623      	mov	r3, r4
 800c01e:	d807      	bhi.n	800c030 <memmove+0x20>
 800c020:	1e43      	subs	r3, r0, #1
 800c022:	42a1      	cmp	r1, r4
 800c024:	d008      	beq.n	800c038 <memmove+0x28>
 800c026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c02a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c02e:	e7f8      	b.n	800c022 <memmove+0x12>
 800c030:	4402      	add	r2, r0
 800c032:	4601      	mov	r1, r0
 800c034:	428a      	cmp	r2, r1
 800c036:	d100      	bne.n	800c03a <memmove+0x2a>
 800c038:	bd10      	pop	{r4, pc}
 800c03a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c03e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c042:	e7f7      	b.n	800c034 <memmove+0x24>

0800c044 <_realloc_r>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	4607      	mov	r7, r0
 800c048:	4614      	mov	r4, r2
 800c04a:	460e      	mov	r6, r1
 800c04c:	b921      	cbnz	r1, 800c058 <_realloc_r+0x14>
 800c04e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c052:	4611      	mov	r1, r2
 800c054:	f7fe bf1e 	b.w	800ae94 <_malloc_r>
 800c058:	b922      	cbnz	r2, 800c064 <_realloc_r+0x20>
 800c05a:	f7ff fa09 	bl	800b470 <_free_r>
 800c05e:	4625      	mov	r5, r4
 800c060:	4628      	mov	r0, r5
 800c062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c064:	f000 f836 	bl	800c0d4 <_malloc_usable_size_r>
 800c068:	42a0      	cmp	r0, r4
 800c06a:	d20f      	bcs.n	800c08c <_realloc_r+0x48>
 800c06c:	4621      	mov	r1, r4
 800c06e:	4638      	mov	r0, r7
 800c070:	f7fe ff10 	bl	800ae94 <_malloc_r>
 800c074:	4605      	mov	r5, r0
 800c076:	2800      	cmp	r0, #0
 800c078:	d0f2      	beq.n	800c060 <_realloc_r+0x1c>
 800c07a:	4631      	mov	r1, r6
 800c07c:	4622      	mov	r2, r4
 800c07e:	f7fe fef2 	bl	800ae66 <memcpy>
 800c082:	4631      	mov	r1, r6
 800c084:	4638      	mov	r0, r7
 800c086:	f7ff f9f3 	bl	800b470 <_free_r>
 800c08a:	e7e9      	b.n	800c060 <_realloc_r+0x1c>
 800c08c:	4635      	mov	r5, r6
 800c08e:	e7e7      	b.n	800c060 <_realloc_r+0x1c>

0800c090 <_fstat_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4d07      	ldr	r5, [pc, #28]	; (800c0b0 <_fstat_r+0x20>)
 800c094:	2300      	movs	r3, #0
 800c096:	4604      	mov	r4, r0
 800c098:	4608      	mov	r0, r1
 800c09a:	4611      	mov	r1, r2
 800c09c:	602b      	str	r3, [r5, #0]
 800c09e:	f7f4 ffae 	bl	8000ffe <_fstat>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	d102      	bne.n	800c0ac <_fstat_r+0x1c>
 800c0a6:	682b      	ldr	r3, [r5, #0]
 800c0a8:	b103      	cbz	r3, 800c0ac <_fstat_r+0x1c>
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	bd38      	pop	{r3, r4, r5, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20006850 	.word	0x20006850

0800c0b4 <_isatty_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4d06      	ldr	r5, [pc, #24]	; (800c0d0 <_isatty_r+0x1c>)
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	4608      	mov	r0, r1
 800c0be:	602b      	str	r3, [r5, #0]
 800c0c0:	f7f4 ffad 	bl	800101e <_isatty>
 800c0c4:	1c43      	adds	r3, r0, #1
 800c0c6:	d102      	bne.n	800c0ce <_isatty_r+0x1a>
 800c0c8:	682b      	ldr	r3, [r5, #0]
 800c0ca:	b103      	cbz	r3, 800c0ce <_isatty_r+0x1a>
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	bd38      	pop	{r3, r4, r5, pc}
 800c0d0:	20006850 	.word	0x20006850

0800c0d4 <_malloc_usable_size_r>:
 800c0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0d8:	1f18      	subs	r0, r3, #4
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	bfbc      	itt	lt
 800c0de:	580b      	ldrlt	r3, [r1, r0]
 800c0e0:	18c0      	addlt	r0, r0, r3
 800c0e2:	4770      	bx	lr

0800c0e4 <_init>:
 800c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e6:	bf00      	nop
 800c0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ea:	bc08      	pop	{r3}
 800c0ec:	469e      	mov	lr, r3
 800c0ee:	4770      	bx	lr

0800c0f0 <_fini>:
 800c0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f2:	bf00      	nop
 800c0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f6:	bc08      	pop	{r3}
 800c0f8:	469e      	mov	lr, r3
 800c0fa:	4770      	bx	lr
